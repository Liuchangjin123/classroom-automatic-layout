(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
    /*!
     * jQuery JavaScript Library v2.1.4
     * http://jquery.com/
     *
     * Includes Sizzle.js
     * http://sizzlejs.com/
     *
     * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2015-04-28T16:01Z
     */
    
    (function( global, factory ) {
    
        if ( typeof module === "object" && typeof module.exports === "object" ) {
            // For CommonJS and CommonJS-like environments where a proper `window`
            // is present, execute the factory and get jQuery.
            // For environments that do not have a `window` with a `document`
            // (such as Node.js), expose a factory as module.exports.
            // This accentuates the need for the creation of a real `window`.
            // e.g. var jQuery = require("jquery")(window);
            // See ticket #14549 for more info.
            module.exports = global.document ?
                factory( global, true ) :
                function( w ) {
                    if ( !w.document ) {
                        throw new Error( "jQuery requires a window with a document" );
                    }
                    return factory( w );
                };
        } else {
            factory( global );
        }
    
    // Pass this if window is not defined yet
    }(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
    
    // Support: Firefox 18+
    // Can't be in strict mode, several libs including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)---
    //
    
    var arr = [];
    
    var slice = arr.slice;
    
    var concat = arr.concat;
    
    var push = arr.push;
    
    var indexOf = arr.indexOf;
    
    var class2type = {};
    
    var toString = class2type.toString;
    
    var hasOwn = class2type.hasOwnProperty;
    
    var support = {};
    
    
    
    var
        // Use the correct document accordingly with window argument (sandbox)
        document = window.document,
    
        version = "2.1.4",
    
        // Define a local copy of jQuery
        jQuery = function( selector, context ) {
            // The jQuery object is actually just the init constructor 'enhanced'
            // Need init if jQuery is called (just allow error to be thrown if not included)
            return new jQuery.fn.init( selector, context );
        },
    
        // Support: Android<4.1
        // Make sure we trim BOM and NBSP
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    
        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,
    
        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function( all, letter ) {
            return letter.toUpperCase();
        };
    
    jQuery.fn = jQuery.prototype = {
        // The current version of jQuery being used
        jquery: version,
    
        constructor: jQuery,
    
        // Start with an empty selector
        selector: "",
    
        // The default length of a jQuery object is 0
        length: 0,
    
        toArray: function() {
            return slice.call( this );
        },
    
        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function( num ) {
            return num != null ?
    
                // Return just the one element from the set
                ( num < 0 ? this[ num + this.length ] : this[ num ] ) :
    
                // Return all the elements in a clean array
                slice.call( this );
        },
    
        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function( elems ) {
    
            // Build a new jQuery matched element set
            var ret = jQuery.merge( this.constructor(), elems );
    
            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;
    
            // Return the newly-formed element set
            return ret;
        },
    
        // Execute a callback for every element in the matched set.
        // (You can seed the arguments with an array of args, but this is
        // only used internally.)
        each: function( callback, args ) {
            return jQuery.each( this, callback, args );
        },
    
        map: function( callback ) {
            return this.pushStack( jQuery.map(this, function( elem, i ) {
                return callback.call( elem, i, elem );
            }));
        },
    
        slice: function() {
            return this.pushStack( slice.apply( this, arguments ) );
        },
    
        first: function() {
            return this.eq( 0 );
        },
    
        last: function() {
            return this.eq( -1 );
        },
    
        eq: function( i ) {
            var len = this.length,
                j = +i + ( i < 0 ? len : 0 );
            return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
        },
    
        end: function() {
            return this.prevObject || this.constructor(null);
        },
    
        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;
    
        // Handle a deep copy situation
        if ( typeof target === "boolean" ) {
            deep = target;
    
            // Skip the boolean and the target
            target = arguments[ i ] || {};
            i++;
        }
    
        // Handle case when target is a string or something (possible in deep copy)
        if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
            target = {};
        }
    
        // Extend jQuery itself if only one argument is passed
        if ( i === length ) {
            target = this;
            i--;
        }
    
        for ( ; i < length; i++ ) {
            // Only deal with non-null/undefined values
            if ( (options = arguments[ i ]) != null ) {
                // Extend the base object
                for ( name in options ) {
                    src = target[ name ];
                    copy = options[ name ];
    
                    // Prevent never-ending loop
                    if ( target === copy ) {
                        continue;
                    }
    
                    // Recurse if we're merging plain objects or arrays
                    if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                        if ( copyIsArray ) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
    
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
    
                        // Never move original objects, clone them
                        target[ name ] = jQuery.extend( deep, clone, copy );
    
                    // Don't bring in undefined values
                    } else if ( copy !== undefined ) {
                        target[ name ] = copy;
                    }
                }
            }
        }
    
        // Return the modified object
        return target;
    };
    
    jQuery.extend({
        // Unique for each copy of jQuery on the page
        expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
    
        // Assume jQuery is ready without the ready module
        isReady: true,
    
        error: function( msg ) {
            throw new Error( msg );
        },
    
        noop: function() {},
    
        isFunction: function( obj ) {
            return jQuery.type(obj) === "function";
        },
    
        isArray: Array.isArray,
    
        isWindow: function( obj ) {
            return obj != null && obj === obj.window;
        },
    
        isNumeric: function( obj ) {
            // parseFloat NaNs numeric-cast false positives (null|true|false|"")
            // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
            // subtraction forces infinities to NaN
            // adding 1 corrects loss of precision from parseFloat (#15100)
            return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
        },
    
        isPlainObject: function( obj ) {
            // Not plain objects:
            // - Any object or value whose internal [[Class]] property is not "[object Object]"
            // - DOM nodes
            // - window
            if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
                return false;
            }
    
            if ( obj.constructor &&
                    !hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
                return false;
            }
    
            // If the function hasn't returned already, we're confident that
            // |obj| is a plain object, created by {} or constructed with new Object
            return true;
        },
    
        isEmptyObject: function( obj ) {
            var name;
            for ( name in obj ) {
                return false;
            }
            return true;
        },
    
        type: function( obj ) {
            if ( obj == null ) {
                return obj + "";
            }
            // Support: Android<4.0, iOS<6 (functionish RegExp)
            return typeof obj === "object" || typeof obj === "function" ?
                class2type[ toString.call(obj) ] || "object" :
                typeof obj;
        },
    
        // Evaluates a script in a global context
        globalEval: function( code ) {
            var script,
                indirect = eval;
    
            code = jQuery.trim( code );
    
            if ( code ) {
                // If the code includes a valid, prologue position
                // strict mode pragma, execute code by injecting a
                // script tag into the document.
                if ( code.indexOf("use strict") === 1 ) {
                    script = document.createElement("script");
                    script.text = code;
                    document.head.appendChild( script ).parentNode.removeChild( script );
                } else {
                // Otherwise, avoid the DOM node creation, insertion
                // and removal by using an indirect global eval
                    indirect( code );
                }
            }
        },
    
        // Convert dashed to camelCase; used by the css and data modules
        // Support: IE9-11+
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function( string ) {
            return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
        },
    
        nodeName: function( elem, name ) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
    
        // args is for internal usage only
        each: function( obj, callback, args ) {
            var value,
                i = 0,
                length = obj.length,
                isArray = isArraylike( obj );
    
            if ( args ) {
                if ( isArray ) {
                    for ( ; i < length; i++ ) {
                        value = callback.apply( obj[ i ], args );
    
                        if ( value === false ) {
                            break;
                        }
                    }
                } else {
                    for ( i in obj ) {
                        value = callback.apply( obj[ i ], args );
    
                        if ( value === false ) {
                            break;
                        }
                    }
                }
    
            // A special, fast, case for the most common use of each
            } else {
                if ( isArray ) {
                    for ( ; i < length; i++ ) {
                        value = callback.call( obj[ i ], i, obj[ i ] );
    
                        if ( value === false ) {
                            break;
                        }
                    }
                } else {
                    for ( i in obj ) {
                        value = callback.call( obj[ i ], i, obj[ i ] );
    
                        if ( value === false ) {
                            break;
                        }
                    }
                }
            }
    
            return obj;
        },
    
        // Support: Android<4.1
        trim: function( text ) {
            return text == null ?
                "" :
                ( text + "" ).replace( rtrim, "" );
        },
    
        // results is for internal usage only
        makeArray: function( arr, results ) {
            var ret = results || [];
    
            if ( arr != null ) {
                if ( isArraylike( Object(arr) ) ) {
                    jQuery.merge( ret,
                        typeof arr === "string" ?
                        [ arr ] : arr
                    );
                } else {
                    push.call( ret, arr );
                }
            }
    
            return ret;
        },
    
        inArray: function( elem, arr, i ) {
            return arr == null ? -1 : indexOf.call( arr, elem, i );
        },
    
        merge: function( first, second ) {
            var len = +second.length,
                j = 0,
                i = first.length;
    
            for ( ; j < len; j++ ) {
                first[ i++ ] = second[ j ];
            }
    
            first.length = i;
    
            return first;
        },
    
        grep: function( elems, callback, invert ) {
            var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;
    
            // Go through the array, only saving the items
            // that pass the validator function
            for ( ; i < length; i++ ) {
                callbackInverse = !callback( elems[ i ], i );
                if ( callbackInverse !== callbackExpect ) {
                    matches.push( elems[ i ] );
                }
            }
    
            return matches;
        },
    
        // arg is for internal usage only
        map: function( elems, callback, arg ) {
            var value,
                i = 0,
                length = elems.length,
                isArray = isArraylike( elems ),
                ret = [];
    
            // Go through the array, translating each of the items to their new values
            if ( isArray ) {
                for ( ; i < length; i++ ) {
                    value = callback( elems[ i ], i, arg );
    
                    if ( value != null ) {
                        ret.push( value );
                    }
                }
    
            // Go through every key on the object,
            } else {
                for ( i in elems ) {
                    value = callback( elems[ i ], i, arg );
    
                    if ( value != null ) {
                        ret.push( value );
                    }
                }
            }
    
            // Flatten any nested arrays
            return concat.apply( [], ret );
        },
    
        // A global GUID counter for objects
        guid: 1,
    
        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function( fn, context ) {
            var tmp, args, proxy;
    
            if ( typeof context === "string" ) {
                tmp = fn[ context ];
                context = fn;
                fn = tmp;
            }
    
            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if ( !jQuery.isFunction( fn ) ) {
                return undefined;
            }
    
            // Simulated bind
            args = slice.call( arguments, 2 );
            proxy = function() {
                return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
            };
    
            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    
            return proxy;
        },
    
        now: Date.now,
    
        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
    });
    
    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
        class2type[ "[object " + name + "]" ] = name.toLowerCase();
    });
    
    function isArraylike( obj ) {
    
        // Support: iOS 8.2 (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = "length" in obj && obj.length,
            type = jQuery.type( obj );
    
        if ( type === "function" || jQuery.isWindow( obj ) ) {
            return false;
        }
    
        if ( obj.nodeType === 1 && length ) {
            return true;
        }
    
        return type === "array" || length === 0 ||
            typeof length === "number" && length > 0 && ( length - 1 ) in obj;
    }
    var Sizzle =
    /*!
     * Sizzle CSS Selector Engine v2.2.0-pre
     * http://sizzlejs.com/
     *
     * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2014-12-16
     */
    (function( window ) {
    
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
    
        // Local document vars
        setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
    
        // Instance-specific data
        expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        sortOrder = function( a, b ) {
            if ( a === b ) {
                hasDuplicate = true;
            }
            return 0;
        },
    
        // General-purpose constants
        MAX_NEGATIVE = 1 << 31,
    
        // Instance methods
        hasOwn = ({}).hasOwnProperty,
        arr = [],
        pop = arr.pop,
        push_native = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
        // http://jsperf.com/thor-indexof-vs-for/5
        indexOf = function( list, elem ) {
            var i = 0,
                len = list.length;
            for ( ; i < len; i++ ) {
                if ( list[i] === elem ) {
                    return i;
                }
            }
            return -1;
        },
    
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
    
        // Regular expressions
    
        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/css3-syntax/#characters
        characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
    
        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = characterEncoding.replace( "w", "w#" ),
    
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
            // Operator (capture 2)
            "*([*^$|!~]?=)" + whitespace +
            // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
            "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
            "*\\]",
    
        pseudos = ":(" + characterEncoding + ")(?:\\((" +
            // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
            // 1. quoted (capture 3; capture 4 or capture 5)
            "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
            // 2. simple (capture 6)
            "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
            // 3. anything else (capture 2)
            ".*" +
            ")\\)|)",
    
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp( whitespace + "+", "g" ),
        rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
    
        rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
        rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
    
        rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
    
        rpseudo = new RegExp( pseudos ),
        ridentifier = new RegExp( "^" + identifier + "$" ),
    
        matchExpr = {
            "ID": new RegExp( "^#(" + characterEncoding + ")" ),
            "CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
            "TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
            "ATTR": new RegExp( "^" + attributes ),
            "PSEUDO": new RegExp( "^" + pseudos ),
            "CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
            "bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
            // For use in libraries implementing .is()
            // We use this for POS matching in `select`
            "needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
        },
    
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
    
        rnative = /^[^{]+\{\s*\[native \w/,
    
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
    
        rsibling = /[+~]/,
        rescape = /'|\\/g,
    
        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
        funescape = function( _, escaped, escapedWhitespace ) {
            var high = "0x" + escaped - 0x10000;
            // NaN means non-codepoint
            // Support: Firefox<24
            // Workaround erroneous numeric interpretation of +"0x"
            return high !== high || escapedWhitespace ?
                escaped :
                high < 0 ?
                    // BMP codepoint
                    String.fromCharCode( high + 0x10000 ) :
                    // Supplemental Plane codepoint (surrogate pair)
                    String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
        },
    
        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function() {
            setDocument();
        };
    
    // Optimize for push.apply( _, NodeList )
    try {
        push.apply(
            (arr = slice.call( preferredDoc.childNodes )),
            preferredDoc.childNodes
        );
        // Support: Android<4.0
        // Detect silently failing push.apply
        arr[ preferredDoc.childNodes.length ].nodeType;
    } catch ( e ) {
        push = { apply: arr.length ?
    
            // Leverage slice if possible
            function( target, els ) {
                push_native.apply( target, slice.call(els) );
            } :
    
            // Support: IE<9
            // Otherwise append directly
            function( target, els ) {
                var j = target.length,
                    i = 0;
                // Can't trust NodeList.length
                while ( (target[j++] = els[i++]) ) {}
                target.length = j - 1;
            }
        };
    }
    
    function Sizzle( selector, context, results, seed ) {
        var match, elem, m, nodeType,
            // QSA vars
            i, groups, old, nid, newContext, newSelector;
    
        if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
            setDocument( context );
        }
    
        context = context || document;
        results = results || [];
        nodeType = context.nodeType;
    
        if ( typeof selector !== "string" || !selector ||
            nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
    
            return results;
        }
    
        if ( !seed && documentIsHTML ) {
    
            // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
            if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
                // Speed-up: Sizzle("#ID")
                if ( (m = match[1]) ) {
                    if ( nodeType === 9 ) {
                        elem = context.getElementById( m );
                        // Check parentNode to catch when Blackberry 4.6 returns
                        // nodes that are no longer in the document (jQuery #6963)
                        if ( elem && elem.parentNode ) {
                            // Handle the case where IE, Opera, and Webkit return items
                            // by name instead of ID
                            if ( elem.id === m ) {
                                results.push( elem );
                                return results;
                            }
                        } else {
                            return results;
                        }
                    } else {
                        // Context is not a document
                        if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
                            contains( context, elem ) && elem.id === m ) {
                            results.push( elem );
                            return results;
                        }
                    }
    
                // Speed-up: Sizzle("TAG")
                } else if ( match[2] ) {
                    push.apply( results, context.getElementsByTagName( selector ) );
                    return results;
    
                // Speed-up: Sizzle(".CLASS")
                } else if ( (m = match[3]) && support.getElementsByClassName ) {
                    push.apply( results, context.getElementsByClassName( m ) );
                    return results;
                }
            }
    
            // QSA path
            if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
                nid = old = expando;
                newContext = context;
                newSelector = nodeType !== 1 && selector;
    
                // qSA works strangely on Element-rooted queries
                // We can work around this by specifying an extra ID on the root
                // and working up from there (Thanks to Andrew Dupont for the technique)
                // IE 8 doesn't work on object elements
                if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
                    groups = tokenize( selector );
    
                    if ( (old = context.getAttribute("id")) ) {
                        nid = old.replace( rescape, "\\$&" );
                    } else {
                        context.setAttribute( "id", nid );
                    }
                    nid = "[id='" + nid + "'] ";
    
                    i = groups.length;
                    while ( i-- ) {
                        groups[i] = nid + toSelector( groups[i] );
                    }
                    newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
                    newSelector = groups.join(",");
                }
    
                if ( newSelector ) {
                    try {
                        push.apply( results,
                            newContext.querySelectorAll( newSelector )
                        );
                        return results;
                    } catch(qsaError) {
                    } finally {
                        if ( !old ) {
                            context.removeAttribute("id");
                        }
                    }
                }
            }
        }
    
        // All others
        return select( selector.replace( rtrim, "$1" ), context, results, seed );
    }
    
    /**
     * Create key-value caches of limited size
     * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */
    function createCache() {
        var keys = [];
    
        function cache( key, value ) {
            // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
            if ( keys.push( key + " " ) > Expr.cacheLength ) {
                // Only keep the most recent entries
                delete cache[ keys.shift() ];
            }
            return (cache[ key + " " ] = value);
        }
        return cache;
    }
    
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */
    function markFunction( fn ) {
        fn[ expando ] = true;
        return fn;
    }
    
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created div and expects a boolean result
     */
    function assert( fn ) {
        var div = document.createElement("div");
    
        try {
            return !!fn( div );
        } catch (e) {
            return false;
        } finally {
            // Remove from its parent by default
            if ( div.parentNode ) {
                div.parentNode.removeChild( div );
            }
            // release memory in IE
            div = null;
        }
    }
    
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */
    function addHandle( attrs, handler ) {
        var arr = attrs.split("|"),
            i = attrs.length;
    
        while ( i-- ) {
            Expr.attrHandle[ arr[i] ] = handler;
        }
    }
    
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */
    function siblingCheck( a, b ) {
        var cur = b && a,
            diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                ( ~b.sourceIndex || MAX_NEGATIVE ) -
                ( ~a.sourceIndex || MAX_NEGATIVE );
    
        // Use IE sourceIndex if available on both nodes
        if ( diff ) {
            return diff;
        }
    
        // Check if b follows a
        if ( cur ) {
            while ( (cur = cur.nextSibling) ) {
                if ( cur === b ) {
                    return -1;
                }
            }
        }
    
        return a ? 1 : -1;
    }
    
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */
    function createInputPseudo( type ) {
        return function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
        };
    }
    
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */
    function createButtonPseudo( type ) {
        return function( elem ) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
        };
    }
    
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */
    function createPositionalPseudo( fn ) {
        return markFunction(function( argument ) {
            argument = +argument;
            return markFunction(function( seed, matches ) {
                var j,
                    matchIndexes = fn( [], seed.length, argument ),
                    i = matchIndexes.length;
    
                // Match elements found at the specified indexes
                while ( i-- ) {
                    if ( seed[ (j = matchIndexes[i]) ] ) {
                        seed[j] = !(matches[j] = seed[j]);
                    }
                }
            });
        });
    }
    
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */
    function testContext( context ) {
        return context && typeof context.getElementsByTagName !== "undefined" && context;
    }
    
    // Expose support vars for convenience
    support = Sizzle.support = {};
    
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */
    isXML = Sizzle.isXML = function( elem ) {
        // documentElement is verified for cases where it doesn't yet exist
        // (such as loading iframes in IE - #4833)
        var documentElement = elem && (elem.ownerDocument || elem).documentElement;
        return documentElement ? documentElement.nodeName !== "HTML" : false;
    };
    
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */
    setDocument = Sizzle.setDocument = function( node ) {
        var hasCompare, parent,
            doc = node ? node.ownerDocument || node : preferredDoc;
    
        // If no document and documentElement is available, return
        if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
            return document;
        }
    
        // Set our document
        document = doc;
        docElem = doc.documentElement;
        parent = doc.defaultView;
    
        // Support: IE>8
        // If iframe document is assigned to "document" variable and if iframe has been reloaded,
        // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
        // IE6-8 do not support the defaultView property so parent will be undefined
        if ( parent && parent !== parent.top ) {
            // IE11 does not have attachEvent, so all must suffer
            if ( parent.addEventListener ) {
                parent.addEventListener( "unload", unloadHandler, false );
            } else if ( parent.attachEvent ) {
                parent.attachEvent( "onunload", unloadHandler );
            }
        }
    
        /* Support tests
        ---------------------------------------------------------------------- */
        documentIsHTML = !isXML( doc );
    
        /* Attributes
        ---------------------------------------------------------------------- */
    
        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties
        // (excepting IE8 booleans)
        support.attributes = assert(function( div ) {
            div.className = "i";
            return !div.getAttribute("className");
        });
    
        /* getElement(s)By*
        ---------------------------------------------------------------------- */
    
        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function( div ) {
            div.appendChild( doc.createComment("") );
            return !div.getElementsByTagName("*").length;
        });
    
        // Support: IE<9
        support.getElementsByClassName = rnative.test( doc.getElementsByClassName );
    
        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function( div ) {
            docElem.appendChild( div ).id = expando;
            return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
        });
    
        // ID find and filter
        if ( support.getById ) {
            Expr.find["ID"] = function( id, context ) {
                if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
                    var m = context.getElementById( id );
                    // Check parentNode to catch when Blackberry 4.6 returns
                    // nodes that are no longer in the document #6963
                    return m && m.parentNode ? [ m ] : [];
                }
            };
            Expr.filter["ID"] = function( id ) {
                var attrId = id.replace( runescape, funescape );
                return function( elem ) {
                    return elem.getAttribute("id") === attrId;
                };
            };
        } else {
            // Support: IE6/7
            // getElementById is not reliable as a find shortcut
            delete Expr.find["ID"];
    
            Expr.filter["ID"] =  function( id ) {
                var attrId = id.replace( runescape, funescape );
                return function( elem ) {
                    var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                    return node && node.value === attrId;
                };
            };
        }
    
        // Tag
        Expr.find["TAG"] = support.getElementsByTagName ?
            function( tag, context ) {
                if ( typeof context.getElementsByTagName !== "undefined" ) {
                    return context.getElementsByTagName( tag );
    
                // DocumentFragment nodes don't have gEBTN
                } else if ( support.qsa ) {
                    return context.querySelectorAll( tag );
                }
            } :
    
            function( tag, context ) {
                var elem,
                    tmp = [],
                    i = 0,
                    // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                    results = context.getElementsByTagName( tag );
    
                // Filter out possible comments
                if ( tag === "*" ) {
                    while ( (elem = results[i++]) ) {
                        if ( elem.nodeType === 1 ) {
                            tmp.push( elem );
                        }
                    }
    
                    return tmp;
                }
                return results;
            };
    
        // Class
        Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
            if ( documentIsHTML ) {
                return context.getElementsByClassName( className );
            }
        };
    
        /* QSA/matchesSelector
        ---------------------------------------------------------------------- */
    
        // QSA and matchesSelector support
    
        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];
    
        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See http://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];
    
        if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
            // Build QSA regex
            // Regex strategy adopted from Diego Perini
            assert(function( div ) {
                // Select is set to empty string on purpose
                // This is to test IE's treatment of not explicitly
                // setting a boolean content attribute,
                // since its presence should be enough
                // http://bugs.jquery.com/ticket/12359
                docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
                    "<select id='" + expando + "-\f]' msallowcapture=''>" +
                    "<option selected=''></option></select>";
    
                // Support: IE8, Opera 11-12.16
                // Nothing should be selected when empty strings follow ^= or $= or *=
                // The test attribute must be unknown in Opera but "safe" for WinRT
                // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                if ( div.querySelectorAll("[msallowcapture^='']").length ) {
                    rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
                }
    
                // Support: IE8
                // Boolean attributes and "value" are not treated correctly
                if ( !div.querySelectorAll("[selected]").length ) {
                    rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
                }
    
                // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
                if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
                    rbuggyQSA.push("~=");
                }
    
                // Webkit/Opera - :checked should return selected option elements
                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                // IE8 throws error here and will not see later tests
                if ( !div.querySelectorAll(":checked").length ) {
                    rbuggyQSA.push(":checked");
                }
    
                // Support: Safari 8+, iOS 8+
                // https://bugs.webkit.org/show_bug.cgi?id=136851
                // In-page `selector#id sibing-combinator selector` fails
                if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
                    rbuggyQSA.push(".#.+[+~]");
                }
            });
    
            assert(function( div ) {
                // Support: Windows 8 Native Apps
                // The type and name attributes are restricted during .innerHTML assignment
                var input = doc.createElement("input");
                input.setAttribute( "type", "hidden" );
                div.appendChild( input ).setAttribute( "name", "D" );
    
                // Support: IE8
                // Enforce case-sensitivity of name attribute
                if ( div.querySelectorAll("[name=d]").length ) {
                    rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
                }
    
                // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                // IE8 throws error here and will not see later tests
                if ( !div.querySelectorAll(":enabled").length ) {
                    rbuggyQSA.push( ":enabled", ":disabled" );
                }
    
                // Opera 10-11 does not throw on post-comma invalid pseudos
                div.querySelectorAll("*,:x");
                rbuggyQSA.push(",.*:");
            });
        }
    
        if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
            docElem.webkitMatchesSelector ||
            docElem.mozMatchesSelector ||
            docElem.oMatchesSelector ||
            docElem.msMatchesSelector) )) ) {
    
            assert(function( div ) {
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node (IE 9)
                support.disconnectedMatch = matches.call( div, "div" );
    
                // This should fail with an exception
                // Gecko does not error, returns false instead
                matches.call( div, "[s!='']:x" );
                rbuggyMatches.push( "!=", pseudos );
            });
        }
    
        rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
        rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
    
        /* Contains
        ---------------------------------------------------------------------- */
        hasCompare = rnative.test( docElem.compareDocumentPosition );
    
        // Element contains another
        // Purposefully does not implement inclusive descendent
        // As in, an element does not contain itself
        contains = hasCompare || rnative.test( docElem.contains ) ?
            function( a, b ) {
                var adown = a.nodeType === 9 ? a.documentElement : a,
                    bup = b && b.parentNode;
                return a === bup || !!( bup && bup.nodeType === 1 && (
                    adown.contains ?
                        adown.contains( bup ) :
                        a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
                ));
            } :
            function( a, b ) {
                if ( b ) {
                    while ( (b = b.parentNode) ) {
                        if ( b === a ) {
                            return true;
                        }
                    }
                }
                return false;
            };
    
        /* Sorting
        ---------------------------------------------------------------------- */
    
        // Document order sorting
        sortOrder = hasCompare ?
        function( a, b ) {
    
            // Flag for duplicate removal
            if ( a === b ) {
                hasDuplicate = true;
                return 0;
            }
    
            // Sort on method existence if only one input has compareDocumentPosition
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if ( compare ) {
                return compare;
            }
    
            // Calculate position if both inputs belong to the same document
            compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
                a.compareDocumentPosition( b ) :
    
                // Otherwise we know they are disconnected
                1;
    
            // Disconnected nodes
            if ( compare & 1 ||
                (!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
    
                // Choose the first element that is related to our preferred document
                if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
                    return -1;
                }
                if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
                    return 1;
                }
    
                // Maintain original order
                return sortInput ?
                    ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                    0;
            }
    
            return compare & 4 ? -1 : 1;
        } :
        function( a, b ) {
            // Exit early if the nodes are identical
            if ( a === b ) {
                hasDuplicate = true;
                return 0;
            }
    
            var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [ a ],
                bp = [ b ];
    
            // Parentless nodes are either documents or disconnected
            if ( !aup || !bup ) {
                return a === doc ? -1 :
                    b === doc ? 1 :
                    aup ? -1 :
                    bup ? 1 :
                    sortInput ?
                    ( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
                    0;
    
            // If the nodes are siblings, we can do a quick check
            } else if ( aup === bup ) {
                return siblingCheck( a, b );
            }
    
            // Otherwise we need full lists of their ancestors for comparison
            cur = a;
            while ( (cur = cur.parentNode) ) {
                ap.unshift( cur );
            }
            cur = b;
            while ( (cur = cur.parentNode) ) {
                bp.unshift( cur );
            }
    
            // Walk down the tree looking for a discrepancy
            while ( ap[i] === bp[i] ) {
                i++;
            }
    
            return i ?
                // Do a sibling check if the nodes have a common ancestor
                siblingCheck( ap[i], bp[i] ) :
    
                // Otherwise nodes in our document sort first
                ap[i] === preferredDoc ? -1 :
                bp[i] === preferredDoc ? 1 :
                0;
        };
    
        return doc;
    };
    
    Sizzle.matches = function( expr, elements ) {
        return Sizzle( expr, null, null, elements );
    };
    
    Sizzle.matchesSelector = function( elem, expr ) {
        // Set document vars if needed
        if ( ( elem.ownerDocument || elem ) !== document ) {
            setDocument( elem );
        }
    
        // Make sure that attribute selectors are quoted
        expr = expr.replace( rattributeQuotes, "='$1']" );
    
        if ( support.matchesSelector && documentIsHTML &&
            ( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
            ( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
    
            try {
                var ret = matches.call( elem, expr );
    
                // IE 9's matchesSelector returns false on disconnected nodes
                if ( ret || support.disconnectedMatch ||
                        // As well, disconnected nodes are said to be in a document
                        // fragment in IE 9
                        elem.document && elem.document.nodeType !== 11 ) {
                    return ret;
                }
            } catch (e) {}
        }
    
        return Sizzle( expr, document, null, [ elem ] ).length > 0;
    };
    
    Sizzle.contains = function( context, elem ) {
        // Set document vars if needed
        if ( ( context.ownerDocument || context ) !== document ) {
            setDocument( context );
        }
        return contains( context, elem );
    };
    
    Sizzle.attr = function( elem, name ) {
        // Set document vars if needed
        if ( ( elem.ownerDocument || elem ) !== document ) {
            setDocument( elem );
        }
    
        var fn = Expr.attrHandle[ name.toLowerCase() ],
            // Don't get fooled by Object.prototype properties (jQuery #13807)
            val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
                fn( elem, name, !documentIsHTML ) :
                undefined;
    
        return val !== undefined ?
            val :
            support.attributes || !documentIsHTML ?
                elem.getAttribute( name ) :
                (val = elem.getAttributeNode(name)) && val.specified ?
                    val.value :
                    null;
    };
    
    Sizzle.error = function( msg ) {
        throw new Error( "Syntax error, unrecognized expression: " + msg );
    };
    
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */
    Sizzle.uniqueSort = function( results ) {
        var elem,
            duplicates = [],
            j = 0,
            i = 0;
    
        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice( 0 );
        results.sort( sortOrder );
    
        if ( hasDuplicate ) {
            while ( (elem = results[i++]) ) {
                if ( elem === results[ i ] ) {
                    j = duplicates.push( i );
                }
            }
            while ( j-- ) {
                results.splice( duplicates[ j ], 1 );
            }
        }
    
        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;
    
        return results;
    };
    
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */
    getText = Sizzle.getText = function( elem ) {
        var node,
            ret = "",
            i = 0,
            nodeType = elem.nodeType;
    
        if ( !nodeType ) {
            // If no nodeType, this is expected to be an array
            while ( (node = elem[i++]) ) {
                // Do not traverse comment nodes
                ret += getText( node );
            }
        } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
            // Use textContent for elements
            // innerText usage removed for consistency of new lines (jQuery #11153)
            if ( typeof elem.textContent === "string" ) {
                return elem.textContent;
            } else {
                // Traverse its children
                for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                    ret += getText( elem );
                }
            }
        } else if ( nodeType === 3 || nodeType === 4 ) {
            return elem.nodeValue;
        }
        // Do not include comment or processing instruction nodes
    
        return ret;
    };
    
    Expr = Sizzle.selectors = {
    
        // Can be adjusted by the user
        cacheLength: 50,
    
        createPseudo: markFunction,
    
        match: matchExpr,
    
        attrHandle: {},
    
        find: {},
    
        relative: {
            ">": { dir: "parentNode", first: true },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: true },
            "~": { dir: "previousSibling" }
        },
    
        preFilter: {
            "ATTR": function( match ) {
                match[1] = match[1].replace( runescape, funescape );
    
                // Move the given value to match[3] whether quoted or unquoted
                match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
    
                if ( match[2] === "~=" ) {
                    match[3] = " " + match[3] + " ";
                }
    
                return match.slice( 0, 4 );
            },
    
            "CHILD": function( match ) {
                /* matches from matchExpr["CHILD"]
                    1 type (only|nth|...)
                    2 what (child|of-type)
                    3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                    4 xn-component of xn+y argument ([+-]?\d*n|)
                    5 sign of xn-component
                    6 x of xn-component
                    7 sign of y-component
                    8 y of y-component
                */
                match[1] = match[1].toLowerCase();
    
                if ( match[1].slice( 0, 3 ) === "nth" ) {
                    // nth-* requires argument
                    if ( !match[3] ) {
                        Sizzle.error( match[0] );
                    }
    
                    // numeric x and y parameters for Expr.filter.CHILD
                    // remember that false/true cast respectively to 0/1
                    match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
                    match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
    
                // other types prohibit arguments
                } else if ( match[3] ) {
                    Sizzle.error( match[0] );
                }
    
                return match;
            },
    
            "PSEUDO": function( match ) {
                var excess,
                    unquoted = !match[6] && match[2];
    
                if ( matchExpr["CHILD"].test( match[0] ) ) {
                    return null;
                }
    
                // Accept quoted arguments as-is
                if ( match[3] ) {
                    match[2] = match[4] || match[5] || "";
    
                // Strip excess characters from unquoted arguments
                } else if ( unquoted && rpseudo.test( unquoted ) &&
                    // Get excess from tokenize (recursively)
                    (excess = tokenize( unquoted, true )) &&
                    // advance to the next closing parenthesis
                    (excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
    
                    // excess is a negative index
                    match[0] = match[0].slice( 0, excess );
                    match[2] = unquoted.slice( 0, excess );
                }
    
                // Return only captures needed by the pseudo filter method (type and argument)
                return match.slice( 0, 3 );
            }
        },
    
        filter: {
    
            "TAG": function( nodeNameSelector ) {
                var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
                return nodeNameSelector === "*" ?
                    function() { return true; } :
                    function( elem ) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
            },
    
            "CLASS": function( className ) {
                var pattern = classCache[ className + " " ];
    
                return pattern ||
                    (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
                    classCache( className, function( elem ) {
                        return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
                    });
            },
    
            "ATTR": function( name, operator, check ) {
                return function( elem ) {
                    var result = Sizzle.attr( elem, name );
    
                    if ( result == null ) {
                        return operator === "!=";
                    }
                    if ( !operator ) {
                        return true;
                    }
    
                    result += "";
    
                    return operator === "=" ? result === check :
                        operator === "!=" ? result !== check :
                        operator === "^=" ? check && result.indexOf( check ) === 0 :
                        operator === "*=" ? check && result.indexOf( check ) > -1 :
                        operator === "$=" ? check && result.slice( -check.length ) === check :
                        operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
                        operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
                        false;
                };
            },
    
            "CHILD": function( type, what, argument, first, last ) {
                var simple = type.slice( 0, 3 ) !== "nth",
                    forward = type.slice( -4 ) !== "last",
                    ofType = what === "of-type";
    
                return first === 1 && last === 0 ?
    
                    // Shortcut for :nth-*(n)
                    function( elem ) {
                        return !!elem.parentNode;
                    } :
    
                    function( elem, context, xml ) {
                        var cache, outerCache, node, diff, nodeIndex, start,
                            dir = simple !== forward ? "nextSibling" : "previousSibling",
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType;
    
                        if ( parent ) {
    
                            // :(first|last|only)-(child|of-type)
                            if ( simple ) {
                                while ( dir ) {
                                    node = elem;
                                    while ( (node = node[ dir ]) ) {
                                        if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
                                            return false;
                                        }
                                    }
                                    // Reverse direction for :only-* (if we haven't yet done so)
                                    start = dir = type === "only" && !start && "nextSibling";
                                }
                                return true;
                            }
    
                            start = [ forward ? parent.firstChild : parent.lastChild ];
    
                            // non-xml :nth-child(...) stores cache data on `parent`
                            if ( forward && useCache ) {
                                // Seek `elem` from a previously-cached index
                                outerCache = parent[ expando ] || (parent[ expando ] = {});
                                cache = outerCache[ type ] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[ nodeIndex ];
    
                                while ( (node = ++nodeIndex && node && node[ dir ] ||
    
                                    // Fallback to seeking `elem` from the start
                                    (diff = nodeIndex = 0) || start.pop()) ) {
    
                                    // When found, cache indexes on `parent` and break
                                    if ( node.nodeType === 1 && ++diff && node === elem ) {
                                        outerCache[ type ] = [ dirruns, nodeIndex, diff ];
                                        break;
                                    }
                                }
    
                            // Use previously-cached element index if available
                            } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
                                diff = cache[1];
    
                            // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                            } else {
                                // Use the same loop as above to seek `elem` from the start
                                while ( (node = ++nodeIndex && node && node[ dir ] ||
                                    (diff = nodeIndex = 0) || start.pop()) ) {
    
                                    if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
                                        // Cache the index of each encountered element
                                        if ( useCache ) {
                                            (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
                                        }
    
                                        if ( node === elem ) {
                                            break;
                                        }
                                    }
                                }
                            }
    
                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return diff === first || ( diff % first === 0 && diff / first >= 0 );
                        }
                    };
            },
    
            "PSEUDO": function( pseudo, argument ) {
                // pseudo-class names are case-insensitive
                // http://www.w3.org/TR/selectors/#pseudo-classes
                // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                // Remember that setFilters inherits from pseudos
                var args,
                    fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
                        Sizzle.error( "unsupported pseudo: " + pseudo );
    
                // The user may use createPseudo to indicate that
                // arguments are needed to create the filter function
                // just as Sizzle does
                if ( fn[ expando ] ) {
                    return fn( argument );
                }
    
                // But maintain support for old signatures
                if ( fn.length > 1 ) {
                    args = [ pseudo, pseudo, "", argument ];
                    return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
                        markFunction(function( seed, matches ) {
                            var idx,
                                matched = fn( seed, argument ),
                                i = matched.length;
                            while ( i-- ) {
                                idx = indexOf( seed, matched[i] );
                                seed[ idx ] = !( matches[ idx ] = matched[i] );
                            }
                        }) :
                        function( elem ) {
                            return fn( elem, 0, args );
                        };
                }
    
                return fn;
            }
        },
    
        pseudos: {
            // Potentially complex pseudos
            "not": markFunction(function( selector ) {
                // Trim the selector passed to compile
                // to avoid treating leading and trailing
                // spaces as combinators
                var input = [],
                    results = [],
                    matcher = compile( selector.replace( rtrim, "$1" ) );
    
                return matcher[ expando ] ?
                    markFunction(function( seed, matches, context, xml ) {
                        var elem,
                            unmatched = matcher( seed, null, xml, [] ),
                            i = seed.length;
    
                        // Match elements unmatched by `matcher`
                        while ( i-- ) {
                            if ( (elem = unmatched[i]) ) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) :
                    function( elem, context, xml ) {
                        input[0] = elem;
                        matcher( input, null, xml, results );
                        // Don't keep the element (issue #299)
                        input[0] = null;
                        return !results.pop();
                    };
            }),
    
            "has": markFunction(function( selector ) {
                return function( elem ) {
                    return Sizzle( selector, elem ).length > 0;
                };
            }),
    
            "contains": markFunction(function( text ) {
                text = text.replace( runescape, funescape );
                return function( elem ) {
                    return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
                };
            }),
    
            // "Whether an element is represented by a :lang() selector
            // is based solely on the element's language value
            // being equal to the identifier C,
            // or beginning with the identifier C immediately followed by "-".
            // The matching of C against the element's language value is performed case-insensitively.
            // The identifier C does not have to be a valid language name."
            // http://www.w3.org/TR/selectors/#lang-pseudo
            "lang": markFunction( function( lang ) {
                // lang value must be a valid identifier
                if ( !ridentifier.test(lang || "") ) {
                    Sizzle.error( "unsupported lang: " + lang );
                }
                lang = lang.replace( runescape, funescape ).toLowerCase();
                return function( elem ) {
                    var elemLang;
                    do {
                        if ( (elemLang = documentIsHTML ?
                            elem.lang :
                            elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
    
                            elemLang = elemLang.toLowerCase();
                            return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
                        }
                    } while ( (elem = elem.parentNode) && elem.nodeType === 1 );
                    return false;
                };
            }),
    
            // Miscellaneous
            "target": function( elem ) {
                var hash = window.location && window.location.hash;
                return hash && hash.slice( 1 ) === elem.id;
            },
    
            "root": function( elem ) {
                return elem === docElem;
            },
    
            "focus": function( elem ) {
                return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
            },
    
            // Boolean properties
            "enabled": function( elem ) {
                return elem.disabled === false;
            },
    
            "disabled": function( elem ) {
                return elem.disabled === true;
            },
    
            "checked": function( elem ) {
                // In CSS3, :checked should return both checked and selected elements
                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                var nodeName = elem.nodeName.toLowerCase();
                return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
            },
    
            "selected": function( elem ) {
                // Accessing this property makes selected-by-default
                // options in Safari work properly
                if ( elem.parentNode ) {
                    elem.parentNode.selectedIndex;
                }
    
                return elem.selected === true;
            },
    
            // Contents
            "empty": function( elem ) {
                // http://www.w3.org/TR/selectors/#empty-pseudo
                // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                //   but not by others (comment: 8; processing instruction: 7; etc.)
                // nodeType < 6 works because attributes (2) do not appear as children
                for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
                    if ( elem.nodeType < 6 ) {
                        return false;
                    }
                }
                return true;
            },
    
            "parent": function( elem ) {
                return !Expr.pseudos["empty"]( elem );
            },
    
            // Element/input types
            "header": function( elem ) {
                return rheader.test( elem.nodeName );
            },
    
            "input": function( elem ) {
                return rinputs.test( elem.nodeName );
            },
    
            "button": function( elem ) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === "button" || name === "button";
            },
    
            "text": function( elem ) {
                var attr;
                return elem.nodeName.toLowerCase() === "input" &&
                    elem.type === "text" &&
    
                    // Support: IE<8
                    // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                    ( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
            },
    
            // Position-in-collection
            "first": createPositionalPseudo(function() {
                return [ 0 ];
            }),
    
            "last": createPositionalPseudo(function( matchIndexes, length ) {
                return [ length - 1 ];
            }),
    
            "eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
                return [ argument < 0 ? argument + length : argument ];
            }),
    
            "even": createPositionalPseudo(function( matchIndexes, length ) {
                var i = 0;
                for ( ; i < length; i += 2 ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            }),
    
            "odd": createPositionalPseudo(function( matchIndexes, length ) {
                var i = 1;
                for ( ; i < length; i += 2 ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            }),
    
            "lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                var i = argument < 0 ? argument + length : argument;
                for ( ; --i >= 0; ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            }),
    
            "gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
                var i = argument < 0 ? argument + length : argument;
                for ( ; ++i < length; ) {
                    matchIndexes.push( i );
                }
                return matchIndexes;
            })
        }
    };
    
    Expr.pseudos["nth"] = Expr.pseudos["eq"];
    
    // Add button/input type pseudos
    for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
        Expr.pseudos[ i ] = createInputPseudo( i );
    }
    for ( i in { submit: true, reset: true } ) {
        Expr.pseudos[ i ] = createButtonPseudo( i );
    }
    
    // Easy API for creating new setFilters
    function setFilters() {}
    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();
    
    tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
        var matched, match, tokens, type,
            soFar, groups, preFilters,
            cached = tokenCache[ selector + " " ];
    
        if ( cached ) {
            return parseOnly ? 0 : cached.slice( 0 );
        }
    
        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;
    
        while ( soFar ) {
    
            // Comma and first run
            if ( !matched || (match = rcomma.exec( soFar )) ) {
                if ( match ) {
                    // Don't consume trailing commas as valid
                    soFar = soFar.slice( match[0].length ) || soFar;
                }
                groups.push( (tokens = []) );
            }
    
            matched = false;
    
            // Combinators
            if ( (match = rcombinators.exec( soFar )) ) {
                matched = match.shift();
                tokens.push({
                    value: matched,
                    // Cast descendant combinators to space
                    type: match[0].replace( rtrim, " " )
                });
                soFar = soFar.slice( matched.length );
            }
    
            // Filters
            for ( type in Expr.filter ) {
                if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
                    (match = preFilters[ type ]( match ))) ) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: type,
                        matches: match
                    });
                    soFar = soFar.slice( matched.length );
                }
            }
    
            if ( !matched ) {
                break;
            }
        }
    
        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly ?
            soFar.length :
            soFar ?
                Sizzle.error( selector ) :
                // Cache the tokens
                tokenCache( selector, groups ).slice( 0 );
    };
    
    function toSelector( tokens ) {
        var i = 0,
            len = tokens.length,
            selector = "";
        for ( ; i < len; i++ ) {
            selector += tokens[i].value;
        }
        return selector;
    }
    
    function addCombinator( matcher, combinator, base ) {
        var dir = combinator.dir,
            checkNonElements = base && dir === "parentNode",
            doneName = done++;
    
        return combinator.first ?
            // Check against closest ancestor/preceding element
            function( elem, context, xml ) {
                while ( (elem = elem[ dir ]) ) {
                    if ( elem.nodeType === 1 || checkNonElements ) {
                        return matcher( elem, context, xml );
                    }
                }
            } :
    
            // Check against all ancestor/preceding elements
            function( elem, context, xml ) {
                var oldCache, outerCache,
                    newCache = [ dirruns, doneName ];
    
                // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
                if ( xml ) {
                    while ( (elem = elem[ dir ]) ) {
                        if ( elem.nodeType === 1 || checkNonElements ) {
                            if ( matcher( elem, context, xml ) ) {
                                return true;
                            }
                        }
                    }
                } else {
                    while ( (elem = elem[ dir ]) ) {
                        if ( elem.nodeType === 1 || checkNonElements ) {
                            outerCache = elem[ expando ] || (elem[ expando ] = {});
                            if ( (oldCache = outerCache[ dir ]) &&
                                oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
    
                                // Assign to newCache so results back-propagate to previous elements
                                return (newCache[ 2 ] = oldCache[ 2 ]);
                            } else {
                                // Reuse newcache so results back-propagate to previous elements
                                outerCache[ dir ] = newCache;
    
                                // A match means we're done; a fail means we have to keep checking
                                if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
    }
    
    function elementMatcher( matchers ) {
        return matchers.length > 1 ?
            function( elem, context, xml ) {
                var i = matchers.length;
                while ( i-- ) {
                    if ( !matchers[i]( elem, context, xml ) ) {
                        return false;
                    }
                }
                return true;
            } :
            matchers[0];
    }
    
    function multipleContexts( selector, contexts, results ) {
        var i = 0,
            len = contexts.length;
        for ( ; i < len; i++ ) {
            Sizzle( selector, contexts[i], results );
        }
        return results;
    }
    
    function condense( unmatched, map, filter, context, xml ) {
        var elem,
            newUnmatched = [],
            i = 0,
            len = unmatched.length,
            mapped = map != null;
    
        for ( ; i < len; i++ ) {
            if ( (elem = unmatched[i]) ) {
                if ( !filter || filter( elem, context, xml ) ) {
                    newUnmatched.push( elem );
                    if ( mapped ) {
                        map.push( i );
                    }
                }
            }
        }
    
        return newUnmatched;
    }
    
    function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
        if ( postFilter && !postFilter[ expando ] ) {
            postFilter = setMatcher( postFilter );
        }
        if ( postFinder && !postFinder[ expando ] ) {
            postFinder = setMatcher( postFinder, postSelector );
        }
        return markFunction(function( seed, results, context, xml ) {
            var temp, i, elem,
                preMap = [],
                postMap = [],
                preexisting = results.length,
    
                // Get initial elements from seed or context
                elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
    
                // Prefilter to get matcher input, preserving a map for seed-results synchronization
                matcherIn = preFilter && ( seed || !selector ) ?
                    condense( elems, preMap, preFilter, context, xml ) :
                    elems,
    
                matcherOut = matcher ?
                    // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                    postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
    
                        // ...intermediate processing is necessary
                        [] :
    
                        // ...otherwise use results directly
                        results :
                    matcherIn;
    
            // Find primary matches
            if ( matcher ) {
                matcher( matcherIn, matcherOut, context, xml );
            }
    
            // Apply postFilter
            if ( postFilter ) {
                temp = condense( matcherOut, postMap );
                postFilter( temp, [], context, xml );
    
                // Un-match failing elements by moving them back to matcherIn
                i = temp.length;
                while ( i-- ) {
                    if ( (elem = temp[i]) ) {
                        matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
                    }
                }
            }
    
            if ( seed ) {
                if ( postFinder || preFilter ) {
                    if ( postFinder ) {
                        // Get the final matcherOut by condensing this intermediate into postFinder contexts
                        temp = [];
                        i = matcherOut.length;
                        while ( i-- ) {
                            if ( (elem = matcherOut[i]) ) {
                                // Restore matcherIn since elem is not yet a final match
                                temp.push( (matcherIn[i] = elem) );
                            }
                        }
                        postFinder( null, (matcherOut = []), temp, xml );
                    }
    
                    // Move matched elements from seed to results to keep them synchronized
                    i = matcherOut.length;
                    while ( i-- ) {
                        if ( (elem = matcherOut[i]) &&
                            (temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
    
                            seed[temp] = !(results[temp] = elem);
                        }
                    }
                }
    
            // Add elements to results, through postFinder if defined
            } else {
                matcherOut = condense(
                    matcherOut === results ?
                        matcherOut.splice( preexisting, matcherOut.length ) :
                        matcherOut
                );
                if ( postFinder ) {
                    postFinder( null, results, matcherOut, xml );
                } else {
                    push.apply( results, matcherOut );
                }
            }
        });
    }
    
    function matcherFromTokens( tokens ) {
        var checkContext, matcher, j,
            len = tokens.length,
            leadingRelative = Expr.relative[ tokens[0].type ],
            implicitRelative = leadingRelative || Expr.relative[" "],
            i = leadingRelative ? 1 : 0,
    
            // The foundational matcher ensures that elements are reachable from top-level context(s)
            matchContext = addCombinator( function( elem ) {
                return elem === checkContext;
            }, implicitRelative, true ),
            matchAnyContext = addCombinator( function( elem ) {
                return indexOf( checkContext, elem ) > -1;
            }, implicitRelative, true ),
            matchers = [ function( elem, context, xml ) {
                var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
                    (checkContext = context).nodeType ?
                        matchContext( elem, context, xml ) :
                        matchAnyContext( elem, context, xml ) );
                // Avoid hanging onto element (issue #299)
                checkContext = null;
                return ret;
            } ];
    
        for ( ; i < len; i++ ) {
            if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
                matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
            } else {
                matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
    
                // Return special upon seeing a positional matcher
                if ( matcher[ expando ] ) {
                    // Find the next relative operator (if any) for proper handling
                    j = ++i;
                    for ( ; j < len; j++ ) {
                        if ( Expr.relative[ tokens[j].type ] ) {
                            break;
                        }
                    }
                    return setMatcher(
                        i > 1 && elementMatcher( matchers ),
                        i > 1 && toSelector(
                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                            tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
                        ).replace( rtrim, "$1" ),
                        matcher,
                        i < j && matcherFromTokens( tokens.slice( i, j ) ),
                        j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
                        j < len && toSelector( tokens )
                    );
                }
                matchers.push( matcher );
            }
        }
    
        return elementMatcher( matchers );
    }
    
    function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
        var bySet = setMatchers.length > 0,
            byElement = elementMatchers.length > 0,
            superMatcher = function( seed, context, xml, results, outermost ) {
                var elem, j, matcher,
                    matchedCount = 0,
                    i = "0",
                    unmatched = seed && [],
                    setMatched = [],
                    contextBackup = outermostContext,
                    // We must always have either seed elements or outermost context
                    elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
                    // Use integer dirruns iff this is the outermost matcher
                    dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                    len = elems.length;
    
                if ( outermost ) {
                    outermostContext = context !== document && context;
                }
    
                // Add elements passing elementMatchers directly to results
                // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
                // Support: IE<9, Safari
                // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
                    if ( byElement && elem ) {
                        j = 0;
                        while ( (matcher = elementMatchers[j++]) ) {
                            if ( matcher( elem, context, xml ) ) {
                                results.push( elem );
                                break;
                            }
                        }
                        if ( outermost ) {
                            dirruns = dirrunsUnique;
                        }
                    }
    
                    // Track unmatched elements for set filters
                    if ( bySet ) {
                        // They will have gone through all possible matchers
                        if ( (elem = !matcher && elem) ) {
                            matchedCount--;
                        }
    
                        // Lengthen the array for every element, matched or not
                        if ( seed ) {
                            unmatched.push( elem );
                        }
                    }
                }
    
                // Apply set filters to unmatched elements
                matchedCount += i;
                if ( bySet && i !== matchedCount ) {
                    j = 0;
                    while ( (matcher = setMatchers[j++]) ) {
                        matcher( unmatched, setMatched, context, xml );
                    }
    
                    if ( seed ) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if ( matchedCount > 0 ) {
                            while ( i-- ) {
                                if ( !(unmatched[i] || setMatched[i]) ) {
                                    setMatched[i] = pop.call( results );
                                }
                            }
                        }
    
                        // Discard index placeholder values to get only actual matches
                        setMatched = condense( setMatched );
                    }
    
                    // Add matches to results
                    push.apply( results, setMatched );
    
                    // Seedless set matches succeeding multiple successful matchers stipulate sorting
                    if ( outermost && !seed && setMatched.length > 0 &&
                        ( matchedCount + setMatchers.length ) > 1 ) {
    
                        Sizzle.uniqueSort( results );
                    }
                }
    
                // Override manipulation of globals by nested matchers
                if ( outermost ) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup;
                }
    
                return unmatched;
            };
    
        return bySet ?
            markFunction( superMatcher ) :
            superMatcher;
    }
    
    compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
        var i,
            setMatchers = [],
            elementMatchers = [],
            cached = compilerCache[ selector + " " ];
    
        if ( !cached ) {
            // Generate a function of recursive functions that can be used to check each element
            if ( !match ) {
                match = tokenize( selector );
            }
            i = match.length;
            while ( i-- ) {
                cached = matcherFromTokens( match[i] );
                if ( cached[ expando ] ) {
                    setMatchers.push( cached );
                } else {
                    elementMatchers.push( cached );
                }
            }
    
            // Cache the compiled function
            cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
    
            // Save selector and tokenization
            cached.selector = selector;
        }
        return cached;
    };
    
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */
    select = Sizzle.select = function( selector, context, results, seed ) {
        var i, tokens, token, type, find,
            compiled = typeof selector === "function" && selector,
            match = !seed && tokenize( (selector = compiled.selector || selector) );
    
        results = results || [];
    
        // Try to minimize operations if there is no seed and only one group
        if ( match.length === 1 ) {
    
            // Take a shortcut and set the context if the root selector is an ID
            tokens = match[0] = match[0].slice( 0 );
            if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                    support.getById && context.nodeType === 9 && documentIsHTML &&
                    Expr.relative[ tokens[1].type ] ) {
    
                context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
                if ( !context ) {
                    return results;
    
                // Precompiled matchers will still verify ancestry, so step up a level
                } else if ( compiled ) {
                    context = context.parentNode;
                }
    
                selector = selector.slice( tokens.shift().value.length );
            }
    
            // Fetch a seed set for right-to-left matching
            i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
            while ( i-- ) {
                token = tokens[i];
    
                // Abort if we hit a combinator
                if ( Expr.relative[ (type = token.type) ] ) {
                    break;
                }
                if ( (find = Expr.find[ type ]) ) {
                    // Search, expanding context for leading sibling combinators
                    if ( (seed = find(
                        token.matches[0].replace( runescape, funescape ),
                        rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
                    )) ) {
    
                        // If seed is empty or no tokens remain, we can return early
                        tokens.splice( i, 1 );
                        selector = seed.length && toSelector( tokens );
                        if ( !selector ) {
                            push.apply( results, seed );
                            return results;
                        }
    
                        break;
                    }
                }
            }
        }
    
        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        ( compiled || compile( selector, match ) )(
            seed,
            context,
            !documentIsHTML,
            results,
            rsibling.test( selector ) && testContext( context.parentNode ) || context
        );
        return results;
    };
    
    // One-time assignments
    
    // Sort stability
    support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
    
    // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function
    support.detectDuplicates = !!hasDuplicate;
    
    // Initialize against the default document
    setDocument();
    
    // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*
    support.sortDetached = assert(function( div1 ) {
        // Should return 1, but returns 4 (following)
        return div1.compareDocumentPosition( document.createElement("div") ) & 1;
    });
    
    // Support: IE<8
    // Prevent attribute/property "interpolation"
    // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
    if ( !assert(function( div ) {
        div.innerHTML = "<a href='#'></a>";
        return div.firstChild.getAttribute("href") === "#" ;
    }) ) {
        addHandle( "type|href|height|width", function( elem, name, isXML ) {
            if ( !isXML ) {
                return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
            }
        });
    }
    
    // Support: IE<9
    // Use defaultValue in place of getAttribute("value")
    if ( !support.attributes || !assert(function( div ) {
        div.innerHTML = "<input/>";
        div.firstChild.setAttribute( "value", "" );
        return div.firstChild.getAttribute( "value" ) === "";
    }) ) {
        addHandle( "value", function( elem, name, isXML ) {
            if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
                return elem.defaultValue;
            }
        });
    }
    
    // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies
    if ( !assert(function( div ) {
        return div.getAttribute("disabled") == null;
    }) ) {
        addHandle( booleans, function( elem, name, isXML ) {
            var val;
            if ( !isXML ) {
                return elem[ name ] === true ? name.toLowerCase() :
                        (val = elem.getAttributeNode( name )) && val.specified ?
                        val.value :
                    null;
            }
        });
    }
    
    return Sizzle;
    
    })( window );
    
    
    
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    
    
    
    var rneedsContext = jQuery.expr.match.needsContext;
    
    var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);
    
    
    
    var risSimple = /^.[^:#\[\.,]*$/;
    
    // Implement the identical functionality for filter and not
    function winnow( elements, qualifier, not ) {
        if ( jQuery.isFunction( qualifier ) ) {
            return jQuery.grep( elements, function( elem, i ) {
                /* jshint -W018 */
                return !!qualifier.call( elem, i, elem ) !== not;
            });
    
        }
    
        if ( qualifier.nodeType ) {
            return jQuery.grep( elements, function( elem ) {
                return ( elem === qualifier ) !== not;
            });
    
        }
    
        if ( typeof qualifier === "string" ) {
            if ( risSimple.test( qualifier ) ) {
                return jQuery.filter( qualifier, elements, not );
            }
    
            qualifier = jQuery.filter( qualifier, elements );
        }
    
        return jQuery.grep( elements, function( elem ) {
            return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
        });
    }
    
    jQuery.filter = function( expr, elems, not ) {
        var elem = elems[ 0 ];
    
        if ( not ) {
            expr = ":not(" + expr + ")";
        }
    
        return elems.length === 1 && elem.nodeType === 1 ?
            jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
            jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
                return elem.nodeType === 1;
            }));
    };
    
    jQuery.fn.extend({
        find: function( selector ) {
            var i,
                len = this.length,
                ret = [],
                self = this;
    
            if ( typeof selector !== "string" ) {
                return this.pushStack( jQuery( selector ).filter(function() {
                    for ( i = 0; i < len; i++ ) {
                        if ( jQuery.contains( self[ i ], this ) ) {
                            return true;
                        }
                    }
                }) );
            }
    
            for ( i = 0; i < len; i++ ) {
                jQuery.find( selector, self[ i ], ret );
            }
    
            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function( selector ) {
            return this.pushStack( winnow(this, selector || [], false) );
        },
        not: function( selector ) {
            return this.pushStack( winnow(this, selector || [], true) );
        },
        is: function( selector ) {
            return !!winnow(
                this,
    
                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test( selector ) ?
                    jQuery( selector ) :
                    selector || [],
                false
            ).length;
        }
    });
    
    
    // Initialize a jQuery object
    
    
    // A central reference to the root jQuery(document)
    var rootjQuery,
    
        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
    
        init = jQuery.fn.init = function( selector, context ) {
            var match, elem;
    
            // HANDLE: $(""), $(null), $(undefined), $(false)
            if ( !selector ) {
                return this;
            }
    
            // Handle HTML strings
            if ( typeof selector === "string" ) {
                if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [ null, selector, null ];
    
                } else {
                    match = rquickExpr.exec( selector );
                }
    
                // Match html or make sure no context is specified for #id
                if ( match && (match[1] || !context) ) {
    
                    // HANDLE: $(html) -> $(array)
                    if ( match[1] ) {
                        context = context instanceof jQuery ? context[0] : context;
    
                        // Option to run scripts is true for back-compat
                        // Intentionally let the error be thrown if parseHTML is not present
                        jQuery.merge( this, jQuery.parseHTML(
                            match[1],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ) );
    
                        // HANDLE: $(html, props)
                        if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
                            for ( match in context ) {
                                // Properties of context are called as methods if possible
                                if ( jQuery.isFunction( this[ match ] ) ) {
                                    this[ match ]( context[ match ] );
    
                                // ...and otherwise set as attributes
                                } else {
                                    this.attr( match, context[ match ] );
                                }
                            }
                        }
    
                        return this;
    
                    // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById( match[2] );
    
                        // Support: Blackberry 4.6
                        // gEBID returns nodes no longer in the document (#6963)
                        if ( elem && elem.parentNode ) {
                            // Inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }
    
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
    
                // HANDLE: $(expr, $(...))
                } else if ( !context || context.jquery ) {
                    return ( context || rootjQuery ).find( selector );
    
                // HANDLE: $(expr, context)
                // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor( context ).find( selector );
                }
    
            // HANDLE: $(DOMElement)
            } else if ( selector.nodeType ) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
    
            // HANDLE: $(function)
            // Shortcut for document ready
            } else if ( jQuery.isFunction( selector ) ) {
                return typeof rootjQuery.ready !== "undefined" ?
                    rootjQuery.ready( selector ) :
                    // Execute immediately if ready is not present
                    selector( jQuery );
            }
    
            if ( selector.selector !== undefined ) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
    
            return jQuery.makeArray( selector, this );
        };
    
    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;
    
    // Initialize central reference
    rootjQuery = jQuery( document );
    
    
    var rparentsprev = /^(?:parents|prev(?:Until|All))/,
        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    
    jQuery.extend({
        dir: function( elem, dir, until ) {
            var matched = [],
                truncate = until !== undefined;
    
            while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
                if ( elem.nodeType === 1 ) {
                    if ( truncate && jQuery( elem ).is( until ) ) {
                        break;
                    }
                    matched.push( elem );
                }
            }
            return matched;
        },
    
        sibling: function( n, elem ) {
            var matched = [];
    
            for ( ; n; n = n.nextSibling ) {
                if ( n.nodeType === 1 && n !== elem ) {
                    matched.push( n );
                }
            }
    
            return matched;
        }
    });
    
    jQuery.fn.extend({
        has: function( target ) {
            var targets = jQuery( target, this ),
                l = targets.length;
    
            return this.filter(function() {
                var i = 0;
                for ( ; i < l; i++ ) {
                    if ( jQuery.contains( this, targets[i] ) ) {
                        return true;
                    }
                }
            });
        },
    
        closest: function( selectors, context ) {
            var cur,
                i = 0,
                l = this.length,
                matched = [],
                pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
                    jQuery( selectors, context || this.context ) :
                    0;
    
            for ( ; i < l; i++ ) {
                for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
                    // Always skip document fragments
                    if ( cur.nodeType < 11 && (pos ?
                        pos.index(cur) > -1 :
    
                        // Don't pass non-elements to Sizzle
                        cur.nodeType === 1 &&
                            jQuery.find.matchesSelector(cur, selectors)) ) {
    
                        matched.push( cur );
                        break;
                    }
                }
            }
    
            return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
        },
    
        // Determine the position of an element within the set
        index: function( elem ) {
    
            // No argument, return index in parent
            if ( !elem ) {
                return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
            }
    
            // Index in selector
            if ( typeof elem === "string" ) {
                return indexOf.call( jQuery( elem ), this[ 0 ] );
            }
    
            // Locate the position of the desired element
            return indexOf.call( this,
    
                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[ 0 ] : elem
            );
        },
    
        add: function( selector, context ) {
            return this.pushStack(
                jQuery.unique(
                    jQuery.merge( this.get(), jQuery( selector, context ) )
                )
            );
        },
    
        addBack: function( selector ) {
            return this.add( selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        }
    });
    
    function sibling( cur, dir ) {
        while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
        return cur;
    }
    
    jQuery.each({
        parent: function( elem ) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function( elem ) {
            return jQuery.dir( elem, "parentNode" );
        },
        parentsUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "parentNode", until );
        },
        next: function( elem ) {
            return sibling( elem, "nextSibling" );
        },
        prev: function( elem ) {
            return sibling( elem, "previousSibling" );
        },
        nextAll: function( elem ) {
            return jQuery.dir( elem, "nextSibling" );
        },
        prevAll: function( elem ) {
            return jQuery.dir( elem, "previousSibling" );
        },
        nextUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "nextSibling", until );
        },
        prevUntil: function( elem, i, until ) {
            return jQuery.dir( elem, "previousSibling", until );
        },
        siblings: function( elem ) {
            return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
        },
        children: function( elem ) {
            return jQuery.sibling( elem.firstChild );
        },
        contents: function( elem ) {
            return elem.contentDocument || jQuery.merge( [], elem.childNodes );
        }
    }, function( name, fn ) {
        jQuery.fn[ name ] = function( until, selector ) {
            var matched = jQuery.map( this, fn, until );
    
            if ( name.slice( -5 ) !== "Until" ) {
                selector = until;
            }
    
            if ( selector && typeof selector === "string" ) {
                matched = jQuery.filter( selector, matched );
            }
    
            if ( this.length > 1 ) {
                // Remove duplicates
                if ( !guaranteedUnique[ name ] ) {
                    jQuery.unique( matched );
                }
    
                // Reverse order for parents* and prev-derivatives
                if ( rparentsprev.test( name ) ) {
                    matched.reverse();
                }
            }
    
            return this.pushStack( matched );
        };
    });
    var rnotwhite = (/\S+/g);
    
    
    
    // String to Object options format cache
    var optionsCache = {};
    
    // Convert String-formatted options into Object-formatted ones and store in cache
    function createOptions( options ) {
        var object = optionsCache[ options ] = {};
        jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
            object[ flag ] = true;
        });
        return object;
    }
    
    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function( options ) {
    
        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            ( optionsCache[ options ] || createOptions( options ) ) :
            jQuery.extend( {}, options );
    
        var // Last fire value (for non-forgettable lists)
            memory,
            // Flag to know if list was already fired
            fired,
            // Flag to know if list is currently firing
            firing,
            // First callback to fire (used internally by add and fireWith)
            firingStart,
            // End of the loop when firing
            firingLength,
            // Index of currently firing callback (modified by remove if needed)
            firingIndex,
            // Actual callback list
            list = [],
            // Stack of fire calls for repeatable lists
            stack = !options.once && [],
            // Fire callbacks
            fire = function( data ) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for ( ; list && firingIndex < firingLength; firingIndex++ ) {
                    if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
                        memory = false; // To prevent further calls using add
                        break;
                    }
                }
                firing = false;
                if ( list ) {
                    if ( stack ) {
                        if ( stack.length ) {
                            fire( stack.shift() );
                        }
                    } else if ( memory ) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            },
            // Actual Callbacks object
            self = {
                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if ( list ) {
                        // First, we save the current length
                        var start = list.length;
                        (function add( args ) {
                            jQuery.each( args, function( _, arg ) {
                                var type = jQuery.type( arg );
                                if ( type === "function" ) {
                                    if ( !options.unique || !self.has( arg ) ) {
                                        list.push( arg );
                                    }
                                } else if ( arg && arg.length && type !== "string" ) {
                                    // Inspect recursively
                                    add( arg );
                                }
                            });
                        })( arguments );
                        // Do we need to add the callbacks to the
                        // current firing batch?
                        if ( firing ) {
                            firingLength = list.length;
                        // With memory, if we're not firing then
                        // we should call right away
                        } else if ( memory ) {
                            firingStart = start;
                            fire( memory );
                        }
                    }
                    return this;
                },
                // Remove a callback from the list
                remove: function() {
                    if ( list ) {
                        jQuery.each( arguments, function( _, arg ) {
                            var index;
                            while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
                                list.splice( index, 1 );
                                // Handle firing indexes
                                if ( firing ) {
                                    if ( index <= firingLength ) {
                                        firingLength--;
                                    }
                                    if ( index <= firingIndex ) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function( fn ) {
                    return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
                },
                // Remove all callbacks from the list
                empty: function() {
                    list = [];
                    firingLength = 0;
                    return this;
                },
                // Have the list do nothing anymore
                disable: function() {
                    list = stack = memory = undefined;
                    return this;
                },
                // Is it disabled?
                disabled: function() {
                    return !list;
                },
                // Lock the list in its current state
                lock: function() {
                    stack = undefined;
                    if ( !memory ) {
                        self.disable();
                    }
                    return this;
                },
                // Is it locked?
                locked: function() {
                    return !stack;
                },
                // Call all callbacks with the given context and arguments
                fireWith: function( context, args ) {
                    if ( list && ( !fired || stack ) ) {
                        args = args || [];
                        args = [ context, args.slice ? args.slice() : args ];
                        if ( firing ) {
                            stack.push( args );
                        } else {
                            fire( args );
                        }
                    }
                    return this;
                },
                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith( this, arguments );
                    return this;
                },
                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };
    
        return self;
    };
    
    
    jQuery.extend({
    
        Deferred: function( func ) {
            var tuples = [
                    // action, add listener, listener list, final state
                    [ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
                    [ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
                    [ "notify", "progress", jQuery.Callbacks("memory") ]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done( arguments ).fail( arguments );
                        return this;
                    },
                    then: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
                        return jQuery.Deferred(function( newDefer ) {
                            jQuery.each( tuples, function( i, tuple ) {
                                var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
                                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                                deferred[ tuple[1] ](function() {
                                    var returned = fn && fn.apply( this, arguments );
                                    if ( returned && jQuery.isFunction( returned.promise ) ) {
                                        returned.promise()
                                            .done( newDefer.resolve )
                                            .fail( newDefer.reject )
                                            .progress( newDefer.notify );
                                    } else {
                                        newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function( obj ) {
                        return obj != null ? jQuery.extend( obj, promise ) : promise;
                    }
                },
                deferred = {};
    
            // Keep pipe for back-compat
            promise.pipe = promise.then;
    
            // Add list-specific methods
            jQuery.each( tuples, function( i, tuple ) {
                var list = tuple[ 2 ],
                    stateString = tuple[ 3 ];
    
                // promise[ done | fail | progress ] = list.add
                promise[ tuple[1] ] = list.add;
    
                // Handle state
                if ( stateString ) {
                    list.add(function() {
                        // state = [ resolved | rejected ]
                        state = stateString;
    
                    // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
                }
    
                // deferred[ resolve | reject | notify ]
                deferred[ tuple[0] ] = function() {
                    deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
                    return this;
                };
                deferred[ tuple[0] + "With" ] = list.fireWith;
            });
    
            // Make the deferred a promise
            promise.promise( deferred );
    
            // Call given func if any
            if ( func ) {
                func.call( deferred, deferred );
            }
    
            // All done!
            return deferred;
        },
    
        // Deferred helper
        when: function( subordinate /* , ..., subordinateN */ ) {
            var i = 0,
                resolveValues = slice.call( arguments ),
                length = resolveValues.length,
    
                // the count of uncompleted subordinates
                remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
    
                // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
    
                // Update function for both resolve and progress values
                updateFunc = function( i, contexts, values ) {
                    return function( value ) {
                        contexts[ i ] = this;
                        values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
                        if ( values === progressValues ) {
                            deferred.notifyWith( contexts, values );
                        } else if ( !( --remaining ) ) {
                            deferred.resolveWith( contexts, values );
                        }
                    };
                },
    
                progressValues, progressContexts, resolveContexts;
    
            // Add listeners to Deferred subordinates; treat others as resolved
            if ( length > 1 ) {
                progressValues = new Array( length );
                progressContexts = new Array( length );
                resolveContexts = new Array( length );
                for ( ; i < length; i++ ) {
                    if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
                        resolveValues[ i ].promise()
                            .done( updateFunc( i, resolveContexts, resolveValues ) )
                            .fail( deferred.reject )
                            .progress( updateFunc( i, progressContexts, progressValues ) );
                    } else {
                        --remaining;
                    }
                }
            }
    
            // If we're not waiting on anything, resolve the master
            if ( !remaining ) {
                deferred.resolveWith( resolveContexts, resolveValues );
            }
    
            return deferred.promise();
        }
    });
    
    
    // The deferred used on DOM ready
    var readyList;
    
    jQuery.fn.ready = function( fn ) {
        // Add the callback
        jQuery.ready.promise().done( fn );
    
        return this;
    };
    
    jQuery.extend({
        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,
    
        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,
    
        // Hold (or release) the ready event
        holdReady: function( hold ) {
            if ( hold ) {
                jQuery.readyWait++;
            } else {
                jQuery.ready( true );
            }
        },
    
        // Handle when the DOM is ready
        ready: function( wait ) {
    
            // Abort if there are pending holds or we're already ready
            if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
                return;
            }
    
            // Remember that the DOM is ready
            jQuery.isReady = true;
    
            // If a normal DOM Ready event fired, decrement, and wait if need be
            if ( wait !== true && --jQuery.readyWait > 0 ) {
                return;
            }
    
            // If there are functions bound, to execute
            readyList.resolveWith( document, [ jQuery ] );
    
            // Trigger any bound ready events
            if ( jQuery.fn.triggerHandler ) {
                jQuery( document ).triggerHandler( "ready" );
                jQuery( document ).off( "ready" );
            }
        }
    });
    
    /**
     * The ready event handler and self cleanup method
     */
    function completed() {
        document.removeEventListener( "DOMContentLoaded", completed, false );
        window.removeEventListener( "load", completed, false );
        jQuery.ready();
    }
    
    jQuery.ready.promise = function( obj ) {
        if ( !readyList ) {
    
            readyList = jQuery.Deferred();
    
            // Catch cases where $(document).ready() is called after the browser event has already occurred.
            // We once tried to use readyState "interactive" here, but it caused issues like the one
            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
            if ( document.readyState === "complete" ) {
                // Handle it asynchronously to allow scripts the opportunity to delay ready
                setTimeout( jQuery.ready );
    
            } else {
    
                // Use the handy event callback
                document.addEventListener( "DOMContentLoaded", completed, false );
    
                // A fallback to window.onload, that will always work
                window.addEventListener( "load", completed, false );
            }
        }
        return readyList.promise( obj );
    };
    
    // Kick off the DOM ready check even if the user does not
    jQuery.ready.promise();
    
    
    
    
    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
        var i = 0,
            len = elems.length,
            bulk = key == null;
    
        // Sets many values
        if ( jQuery.type( key ) === "object" ) {
            chainable = true;
            for ( i in key ) {
                jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
            }
    
        // Sets one value
        } else if ( value !== undefined ) {
            chainable = true;
    
            if ( !jQuery.isFunction( value ) ) {
                raw = true;
            }
    
            if ( bulk ) {
                // Bulk operations run against the entire set
                if ( raw ) {
                    fn.call( elems, value );
                    fn = null;
    
                // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function( elem, key, value ) {
                        return bulk.call( jQuery( elem ), value );
                    };
                }
            }
    
            if ( fn ) {
                for ( ; i < len; i++ ) {
                    fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
                }
            }
        }
    
        return chainable ?
            elems :
    
            // Gets
            bulk ?
                fn.call( elems ) :
                len ? fn( elems[0], key ) : emptyGet;
    };
    
    
    /**
     * Determines whether an object can have data
     */
    jQuery.acceptData = function( owner ) {
        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        /* jshint -W018 */
        return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
    };
    
    
    function Data() {
        // Support: Android<4,
        // Old WebKit does not have Object.preventExtensions/freeze method,
        // return new empty object instead with no [[set]] accessor
        Object.defineProperty( this.cache = {}, 0, {
            get: function() {
                return {};
            }
        });
    
        this.expando = jQuery.expando + Data.uid++;
    }
    
    Data.uid = 1;
    Data.accepts = jQuery.acceptData;
    
    Data.prototype = {
        key: function( owner ) {
            // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return the key for a frozen object.
            if ( !Data.accepts( owner ) ) {
                return 0;
            }
    
            var descriptor = {},
                // Check if the owner object already has a cache key
                unlock = owner[ this.expando ];
    
            // If not, create one
            if ( !unlock ) {
                unlock = Data.uid++;
    
                // Secure it in a non-enumerable, non-writable property
                try {
                    descriptor[ this.expando ] = { value: unlock };
                    Object.defineProperties( owner, descriptor );
    
                // Support: Android<4
                // Fallback to a less secure definition
                } catch ( e ) {
                    descriptor[ this.expando ] = unlock;
                    jQuery.extend( owner, descriptor );
                }
            }
    
            // Ensure the cache object
            if ( !this.cache[ unlock ] ) {
                this.cache[ unlock ] = {};
            }
    
            return unlock;
        },
        set: function( owner, data, value ) {
            var prop,
                // There may be an unlock assigned to this node,
                // if there is no entry for this "owner", create one inline
                // and set the unlock as though an owner entry had always existed
                unlock = this.key( owner ),
                cache = this.cache[ unlock ];
    
            // Handle: [ owner, key, value ] args
            if ( typeof data === "string" ) {
                cache[ data ] = value;
    
            // Handle: [ owner, { properties } ] args
            } else {
                // Fresh assignments by object are shallow copied
                if ( jQuery.isEmptyObject( cache ) ) {
                    jQuery.extend( this.cache[ unlock ], data );
                // Otherwise, copy the properties one-by-one to the cache object
                } else {
                    for ( prop in data ) {
                        cache[ prop ] = data[ prop ];
                    }
                }
            }
            return cache;
        },
        get: function( owner, key ) {
            // Either a valid cache is found, or will be created.
            // New caches will be created and the unlock returned,
            // allowing direct access to the newly created
            // empty data object. A valid owner object must be provided.
            var cache = this.cache[ this.key( owner ) ];
    
            return key === undefined ?
                cache : cache[ key ];
        },
        access: function( owner, key, value ) {
            var stored;
            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if ( key === undefined ||
                    ((key && typeof key === "string") && value === undefined) ) {
    
                stored = this.get( owner, key );
    
                return stored !== undefined ?
                    stored : this.get( owner, jQuery.camelCase(key) );
            }
    
            // [*]When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set( owner, key, value );
    
            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function( owner, key ) {
            var i, name, camel,
                unlock = this.key( owner ),
                cache = this.cache[ unlock ];
    
            if ( key === undefined ) {
                this.cache[ unlock ] = {};
    
            } else {
                // Support array or space separated string of keys
                if ( jQuery.isArray( key ) ) {
                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = key.concat( key.map( jQuery.camelCase ) );
                } else {
                    camel = jQuery.camelCase( key );
                    // Try the string as a key before any manipulation
                    if ( key in cache ) {
                        name = [ key, camel ];
                    } else {
                        // If a key with the spaces exists, use it.
                        // Otherwise, create an array by matching non-whitespace
                        name = camel;
                        name = name in cache ?
                            [ name ] : ( name.match( rnotwhite ) || [] );
                    }
                }
    
                i = name.length;
                while ( i-- ) {
                    delete cache[ name[ i ] ];
                }
            }
        },
        hasData: function( owner ) {
            return !jQuery.isEmptyObject(
                this.cache[ owner[ this.expando ] ] || {}
            );
        },
        discard: function( owner ) {
            if ( owner[ this.expando ] ) {
                delete this.cache[ owner[ this.expando ] ];
            }
        }
    };
    var data_priv = new Data();
    
    var data_user = new Data();
    
    
    
    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014
    
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /([A-Z])/g;
    
    function dataAttr( elem, key, data ) {
        var name;
    
        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if ( data === undefined && elem.nodeType === 1 ) {
            name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
            data = elem.getAttribute( name );
    
            if ( typeof data === "string" ) {
                try {
                    data = data === "true" ? true :
                        data === "false" ? false :
                        data === "null" ? null :
                        // Only convert to a number if it doesn't change the string
                        +data + "" === data ? +data :
                        rbrace.test( data ) ? jQuery.parseJSON( data ) :
                        data;
                } catch( e ) {}
    
                // Make sure we set the data so it isn't changed later
                data_user.set( elem, key, data );
            } else {
                data = undefined;
            }
        }
        return data;
    }
    
    jQuery.extend({
        hasData: function( elem ) {
            return data_user.hasData( elem ) || data_priv.hasData( elem );
        },
    
        data: function( elem, name, data ) {
            return data_user.access( elem, name, data );
        },
    
        removeData: function( elem, name ) {
            data_user.remove( elem, name );
        },
    
        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to data_priv methods, these can be deprecated.
        _data: function( elem, name, data ) {
            return data_priv.access( elem, name, data );
        },
    
        _removeData: function( elem, name ) {
            data_priv.remove( elem, name );
        }
    });
    
    jQuery.fn.extend({
        data: function( key, value ) {
            var i, name, data,
                elem = this[ 0 ],
                attrs = elem && elem.attributes;
    
            // Gets all values
            if ( key === undefined ) {
                if ( this.length ) {
                    data = data_user.get( elem );
    
                    if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
                        i = attrs.length;
                        while ( i-- ) {
    
                            // Support: IE11+
                            // The attrs elements can be null (#14894)
                            if ( attrs[ i ] ) {
                                name = attrs[ i ].name;
                                if ( name.indexOf( "data-" ) === 0 ) {
                                    name = jQuery.camelCase( name.slice(5) );
                                    dataAttr( elem, name, data[ name ] );
                                }
                            }
                        }
                        data_priv.set( elem, "hasDataAttrs", true );
                    }
                }
    
                return data;
            }
    
            // Sets multiple values
            if ( typeof key === "object" ) {
                return this.each(function() {
                    data_user.set( this, key );
                });
            }
    
            return access( this, function( value ) {
                var data,
                    camelKey = jQuery.camelCase( key );
    
                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if ( elem && value === undefined ) {
                    // Attempt to get data from the cache
                    // with the key as-is
                    data = data_user.get( elem, key );
                    if ( data !== undefined ) {
                        return data;
                    }
    
                    // Attempt to get data from the cache
                    // with the key camelized
                    data = data_user.get( elem, camelKey );
                    if ( data !== undefined ) {
                        return data;
                    }
    
                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr( elem, camelKey, undefined );
                    if ( data !== undefined ) {
                        return data;
                    }
    
                    // We tried really hard, but the data doesn't exist.
                    return;
                }
    
                // Set the data...
                this.each(function() {
                    // First, attempt to store a copy or reference of any
                    // data that might've been store with a camelCased key.
                    var data = data_user.get( this, camelKey );
    
                    // For HTML5 data-* attribute interop, we have to
                    // store property names with dashes in a camelCase form.
                    // This might not apply to all properties...*
                    data_user.set( this, camelKey, value );
    
                    // *... In the case of properties that might _actually_
                    // have dashes, we need to also store a copy of that
                    // unchanged property.
                    if ( key.indexOf("-") !== -1 && data !== undefined ) {
                        data_user.set( this, key, value );
                    }
                });
            }, null, value, arguments.length > 1, null, true );
        },
    
        removeData: function( key ) {
            return this.each(function() {
                data_user.remove( this, key );
            });
        }
    });
    
    
    jQuery.extend({
        queue: function( elem, type, data ) {
            var queue;
    
            if ( elem ) {
                type = ( type || "fx" ) + "queue";
                queue = data_priv.get( elem, type );
    
                // Speed up dequeue by getting out quickly if this is just a lookup
                if ( data ) {
                    if ( !queue || jQuery.isArray( data ) ) {
                        queue = data_priv.access( elem, type, jQuery.makeArray(data) );
                    } else {
                        queue.push( data );
                    }
                }
                return queue || [];
            }
        },
    
        dequeue: function( elem, type ) {
            type = type || "fx";
    
            var queue = jQuery.queue( elem, type ),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks( elem, type ),
                next = function() {
                    jQuery.dequeue( elem, type );
                };
    
            // If the fx queue is dequeued, always remove the progress sentinel
            if ( fn === "inprogress" ) {
                fn = queue.shift();
                startLength--;
            }
    
            if ( fn ) {
    
                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if ( type === "fx" ) {
                    queue.unshift( "inprogress" );
                }
    
                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call( elem, next, hooks );
            }
    
            if ( !startLength && hooks ) {
                hooks.empty.fire();
            }
        },
    
        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function( elem, type ) {
            var key = type + "queueHooks";
            return data_priv.get( elem, key ) || data_priv.access( elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    data_priv.remove( elem, [ type + "queue", key ] );
                })
            });
        }
    });
    
    jQuery.fn.extend({
        queue: function( type, data ) {
            var setter = 2;
    
            if ( typeof type !== "string" ) {
                data = type;
                type = "fx";
                setter--;
            }
    
            if ( arguments.length < setter ) {
                return jQuery.queue( this[0], type );
            }
    
            return data === undefined ?
                this :
                this.each(function() {
                    var queue = jQuery.queue( this, type, data );
    
                    // Ensure a hooks for this queue
                    jQuery._queueHooks( this, type );
    
                    if ( type === "fx" && queue[0] !== "inprogress" ) {
                        jQuery.dequeue( this, type );
                    }
                });
        },
        dequeue: function( type ) {
            return this.each(function() {
                jQuery.dequeue( this, type );
            });
        },
        clearQueue: function( type ) {
            return this.queue( type || "fx", [] );
        },
        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function( type, obj ) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if ( !( --count ) ) {
                        defer.resolveWith( elements, [ elements ] );
                    }
                };
    
            if ( typeof type !== "string" ) {
                obj = type;
                type = undefined;
            }
            type = type || "fx";
    
            while ( i-- ) {
                tmp = data_priv.get( elements[ i ], type + "queueHooks" );
                if ( tmp && tmp.empty ) {
                    count++;
                    tmp.empty.add( resolve );
                }
            }
            resolve();
            return defer.promise( obj );
        }
    });
    var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;
    
    var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
    
    var isHidden = function( elem, el ) {
            // isHidden might be called from jQuery#filter function;
            // in that case, element will be second argument
            elem = el || elem;
            return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
        };
    
    var rcheckableType = (/^(?:checkbox|radio)$/i);
    
    
    
    (function() {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild( document.createElement( "div" ) ),
            input = document.createElement( "input" );
    
        // Support: Safari<=5.1
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute( "type", "radio" );
        input.setAttribute( "checked", "checked" );
        input.setAttribute( "name", "t" );
    
        div.appendChild( input );
    
        // Support: Safari<=5.1, Android<4.2
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
    
        // Support: IE<=11+
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
    })();
    var strundefined = typeof undefined;
    
    
    
    support.focusinBubbles = "onfocusin" in window;
    
    
    var
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    
    function returnTrue() {
        return true;
    }
    
    function returnFalse() {
        return false;
    }
    
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch ( err ) { }
    }
    
    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {
    
        global: {},
    
        add: function( elem, types, handler, data, selector ) {
    
            var handleObjIn, eventHandle, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = data_priv.get( elem );
    
            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if ( !elemData ) {
                return;
            }
    
            // Caller can pass in an object of custom data in lieu of the handler
            if ( handler.handler ) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
    
            // Make sure that the handler has a unique ID, used to find/remove it later
            if ( !handler.guid ) {
                handler.guid = jQuery.guid++;
            }
    
            // Init the element's event structure and main handler, if this is the first
            if ( !(events = elemData.events) ) {
                events = elemData.events = {};
            }
            if ( !(eventHandle = elemData.handle) ) {
                eventHandle = elemData.handle = function( e ) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
                        jQuery.event.dispatch.apply( elem, arguments ) : undefined;
                };
            }
    
            // Handle multiple events separated by a space
            types = ( types || "" ).match( rnotwhite ) || [ "" ];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[t] ) || [];
                type = origType = tmp[1];
                namespaces = ( tmp[2] || "" ).split( "." ).sort();
    
                // There *must* be a type, no attaching namespace-only handlers
                if ( !type ) {
                    continue;
                }
    
                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[ type ] || {};
    
                // If selector defined, determine special event api type, otherwise given type
                type = ( selector ? special.delegateType : special.bindType ) || type;
    
                // Update special based on newly reset type
                special = jQuery.event.special[ type ] || {};
    
                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
                    namespace: namespaces.join(".")
                }, handleObjIn );
    
                // Init the event handler queue if we're the first
                if ( !(handlers = events[ type ]) ) {
                    handlers = events[ type ] = [];
                    handlers.delegateCount = 0;
    
                    // Only use addEventListener if the special events handler returns false
                    if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
                        if ( elem.addEventListener ) {
                            elem.addEventListener( type, eventHandle, false );
                        }
                    }
                }
    
                if ( special.add ) {
                    special.add.call( elem, handleObj );
    
                    if ( !handleObj.handler.guid ) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
    
                // Add to the element's handler list, delegates in front
                if ( selector ) {
                    handlers.splice( handlers.delegateCount++, 0, handleObj );
                } else {
                    handlers.push( handleObj );
                }
    
                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[ type ] = true;
            }
    
        },
    
        // Detach an event or set of events from an element
        remove: function( elem, types, handler, selector, mappedTypes ) {
    
            var j, origCount, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = data_priv.hasData( elem ) && data_priv.get( elem );
    
            if ( !elemData || !(events = elemData.events) ) {
                return;
            }
    
            // Once for each type.namespace in types; type may be omitted
            types = ( types || "" ).match( rnotwhite ) || [ "" ];
            t = types.length;
            while ( t-- ) {
                tmp = rtypenamespace.exec( types[t] ) || [];
                type = origType = tmp[1];
                namespaces = ( tmp[2] || "" ).split( "." ).sort();
    
                // Unbind all events (on this namespace, if provided) for the element
                if ( !type ) {
                    for ( type in events ) {
                        jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
                    }
                    continue;
                }
    
                special = jQuery.event.special[ type ] || {};
                type = ( selector ? special.delegateType : special.bindType ) || type;
                handlers = events[ type ] || [];
                tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );
    
                // Remove matching events
                origCount = j = handlers.length;
                while ( j-- ) {
                    handleObj = handlers[ j ];
    
                    if ( ( mappedTypes || origType === handleObj.origType ) &&
                        ( !handler || handler.guid === handleObj.guid ) &&
                        ( !tmp || tmp.test( handleObj.namespace ) ) &&
                        ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
                        handlers.splice( j, 1 );
    
                        if ( handleObj.selector ) {
                            handlers.delegateCount--;
                        }
                        if ( special.remove ) {
                            special.remove.call( elem, handleObj );
                        }
                    }
                }
    
                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if ( origCount && !handlers.length ) {
                    if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
                        jQuery.removeEvent( elem, type, elemData.handle );
                    }
    
                    delete events[ type ];
                }
            }
    
            // Remove the expando if it's no longer used
            if ( jQuery.isEmptyObject( events ) ) {
                delete elemData.handle;
                data_priv.remove( elem, "events" );
            }
        },
    
        trigger: function( event, data, elem, onlyHandlers ) {
    
            var i, cur, tmp, bubbleType, ontype, handle, special,
                eventPath = [ elem || document ],
                type = hasOwn.call( event, "type" ) ? event.type : event,
                namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];
    
            cur = tmp = elem = elem || document;
    
            // Don't do events on text and comment nodes
            if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
                return;
            }
    
            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
                return;
            }
    
            if ( type.indexOf(".") >= 0 ) {
                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
    
            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[ jQuery.expando ] ?
                event :
                new jQuery.Event( type, typeof event === "object" && event );
    
            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ?
                new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
                null;
    
            // Clean up the event in case it is being reused
            event.result = undefined;
            if ( !event.target ) {
                event.target = elem;
            }
    
            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ?
                [ event ] :
                jQuery.makeArray( data, [ event ] );
    
            // Allow special events to draw outside the lines
            special = jQuery.event.special[ type ] || {};
            if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
                return;
            }
    
            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
    
                bubbleType = special.delegateType || type;
                if ( !rfocusMorph.test( bubbleType + type ) ) {
                    cur = cur.parentNode;
                }
                for ( ; cur; cur = cur.parentNode ) {
                    eventPath.push( cur );
                    tmp = cur;
                }
    
                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if ( tmp === (elem.ownerDocument || document) ) {
                    eventPath.push( tmp.defaultView || tmp.parentWindow || window );
                }
            }
    
            // Fire handlers on the event path
            i = 0;
            while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {
    
                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;
    
                // jQuery handler
                handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
                if ( handle ) {
                    handle.apply( cur, data );
                }
    
                // Native handler
                handle = ontype && cur[ ontype ];
                if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
                    event.result = handle.apply( cur, data );
                    if ( event.result === false ) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
    
            // If nobody prevented the default action, do it now
            if ( !onlyHandlers && !event.isDefaultPrevented() ) {
    
                if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
                    jQuery.acceptData( elem ) ) {
    
                    // Call a native DOM method on the target with the same name name as the event.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
    
                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ ontype ];
    
                        if ( tmp ) {
                            elem[ ontype ] = null;
                        }
    
                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        elem[ type ]();
                        jQuery.event.triggered = undefined;
    
                        if ( tmp ) {
                            elem[ ontype ] = tmp;
                        }
                    }
                }
            }
    
            return event.result;
        },
    
        dispatch: function( event ) {
    
            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix( event );
    
            var i, j, ret, matched, handleObj,
                handlerQueue = [],
                args = slice.call( arguments ),
                handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
                special = jQuery.event.special[ event.type ] || {};
    
            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;
    
            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
                return;
            }
    
            // Determine handlers
            handlerQueue = jQuery.event.handlers.call( this, event, handlers );
    
            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
                event.currentTarget = matched.elem;
    
                j = 0;
                while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {
    
                    // Triggered event must either 1) have no namespace, or 2) have namespace(s)
                    // a subset or equal to those in the bound event (both can have no namespace).
                    if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {
    
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
    
                        ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
                                .apply( matched.elem, args );
    
                        if ( ret !== undefined ) {
                            if ( (event.result = ret) === false ) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
    
            // Call the postDispatch hook for the mapped type
            if ( special.postDispatch ) {
                special.postDispatch.call( this, event );
            }
    
            return event.result;
        },
    
        handlers: function( event, handlers ) {
            var i, matches, sel, handleObj,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;
    
            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            // Avoid non-left-click bubbling in Firefox (#3861)
            if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {
    
                for ( ; cur !== this; cur = cur.parentNode || this ) {
    
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if ( cur.disabled !== true || event.type !== "click" ) {
                        matches = [];
                        for ( i = 0; i < delegateCount; i++ ) {
                            handleObj = handlers[ i ];
    
                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";
    
                            if ( matches[ sel ] === undefined ) {
                                matches[ sel ] = handleObj.needsContext ?
                                    jQuery( sel, this ).index( cur ) >= 0 :
                                    jQuery.find( sel, this, null, [ cur ] ).length;
                            }
                            if ( matches[ sel ] ) {
                                matches.push( handleObj );
                            }
                        }
                        if ( matches.length ) {
                            handlerQueue.push({ elem: cur, handlers: matches });
                        }
                    }
                }
            }
    
            // Add the remaining (directly-bound) handlers
            if ( delegateCount < handlers.length ) {
                handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
            }
    
            return handlerQueue;
        },
    
        // Includes some event props shared by KeyEvent and MouseEvent
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    
        fixHooks: {},
    
        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function( event, original ) {
    
                // Add which for key events
                if ( event.which == null ) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
    
                return event;
            }
        },
    
        mouseHooks: {
            props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function( event, original ) {
                var eventDoc, doc, body,
                    button = original.button;
    
                // Calculate pageX/Y if missing and clientX/Y available
                if ( event.pageX == null && original.clientX != null ) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
    
                    event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                    event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
                }
    
                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if ( !event.which && button !== undefined ) {
                    event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
                }
    
                return event;
            }
        },
    
        fix: function( event ) {
            if ( event[ jQuery.expando ] ) {
                return event;
            }
    
            // Create a writable copy of the event object and normalize some properties
            var i, prop, copy,
                type = event.type,
                originalEvent = event,
                fixHook = this.fixHooks[ type ];
    
            if ( !fixHook ) {
                this.fixHooks[ type ] = fixHook =
                    rmouseEvent.test( type ) ? this.mouseHooks :
                    rkeyEvent.test( type ) ? this.keyHooks :
                    {};
            }
            copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
    
            event = new jQuery.Event( originalEvent );
    
            i = copy.length;
            while ( i-- ) {
                prop = copy[ i ];
                event[ prop ] = originalEvent[ prop ];
            }
    
            // Support: Cordova 2.5 (WebKit) (#13255)
            // All events should have a target; Cordova deviceready doesn't
            if ( !event.target ) {
                event.target = document;
            }
    
            // Support: Safari 6.0+, Chrome<28
            // Target should not be a text node (#504, #13143)
            if ( event.target.nodeType === 3 ) {
                event.target = event.target.parentNode;
            }
    
            return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
        },
    
        special: {
            load: {
                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {
                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if ( this !== safeActiveElement() && this.focus ) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if ( this === safeActiveElement() && this.blur ) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {
                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
                        this.click();
                        return false;
                    }
                },
    
                // For cross-browser consistency, don't fire native .click() on links
                _default: function( event ) {
                    return jQuery.nodeName( event.target, "a" );
                }
            },
    
            beforeunload: {
                postDispatch: function( event ) {
    
                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if ( event.result !== undefined && event.originalEvent ) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
    
        simulate: function( type, elem, event, bubble ) {
            // Piggyback on a donor event to simulate a different one.
            // Fake originalEvent to avoid donor's stopPropagation, but if the
            // simulated event prevents default then we do the same on the donor.
            var e = jQuery.extend(
                new jQuery.Event(),
                event,
                {
                    type: type,
                    isSimulated: true,
                    originalEvent: {}
                }
            );
            if ( bubble ) {
                jQuery.event.trigger( e, null, elem );
            } else {
                jQuery.event.dispatch.call( elem, e );
            }
            if ( e.isDefaultPrevented() ) {
                event.preventDefault();
            }
        }
    };
    
    jQuery.removeEvent = function( elem, type, handle ) {
        if ( elem.removeEventListener ) {
            elem.removeEventListener( type, handle, false );
        }
    };
    
    jQuery.Event = function( src, props ) {
        // Allow instantiation without the 'new' keyword
        if ( !(this instanceof jQuery.Event) ) {
            return new jQuery.Event( src, props );
        }
    
        // Event object
        if ( src && src.type ) {
            this.originalEvent = src;
            this.type = src.type;
    
            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented ||
                    src.defaultPrevented === undefined &&
                    // Support: Android<4.0
                    src.returnValue === false ?
                returnTrue :
                returnFalse;
    
        // Event type
        } else {
            this.type = src;
        }
    
        // Put explicitly provided properties onto the event object
        if ( props ) {
            jQuery.extend( this, props );
        }
    
        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();
    
        // Mark it as fixed
        this[ jQuery.expando ] = true;
    };
    
    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
    
        preventDefault: function() {
            var e = this.originalEvent;
    
            this.isDefaultPrevented = returnTrue;
    
            if ( e && e.preventDefault ) {
                e.preventDefault();
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;
    
            this.isPropagationStopped = returnTrue;
    
            if ( e && e.stopPropagation ) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
    
            this.isImmediatePropagationStopped = returnTrue;
    
            if ( e && e.stopImmediatePropagation ) {
                e.stopImmediatePropagation();
            }
    
            this.stopPropagation();
        }
    };
    
    // Create mouseenter/leave events using mouseover/out and event-time checks
    // Support: Chrome 15+
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function( orig, fix ) {
        jQuery.event.special[ orig ] = {
            delegateType: fix,
            bindType: fix,
    
            handle: function( event ) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;
    
                // For mousenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply( this, arguments );
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    
    // Support: Firefox, Chrome, Safari
    // Create "bubbling" focus and blur events
    if ( !support.focusinBubbles ) {
        jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {
    
            // Attach a single capturing handler on the document while someone wants focusin/focusout
            var handler = function( event ) {
                    jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
                };
    
            jQuery.event.special[ fix ] = {
                setup: function() {
                    var doc = this.ownerDocument || this,
                        attaches = data_priv.access( doc, fix );
    
                    if ( !attaches ) {
                        doc.addEventListener( orig, handler, true );
                    }
                    data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
                },
                teardown: function() {
                    var doc = this.ownerDocument || this,
                        attaches = data_priv.access( doc, fix ) - 1;
    
                    if ( !attaches ) {
                        doc.removeEventListener( orig, handler, true );
                        data_priv.remove( doc, fix );
    
                    } else {
                        data_priv.access( doc, fix, attaches );
                    }
                }
            };
        });
    }
    
    jQuery.fn.extend({
    
        on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
            var origFn, type;
    
            // Types can be a map of types/handlers
            if ( typeof types === "object" ) {
                // ( types-Object, selector, data )
                if ( typeof selector !== "string" ) {
                    // ( types-Object, data )
                    data = data || selector;
                    selector = undefined;
                }
                for ( type in types ) {
                    this.on( type, selector, data, types[ type ], one );
                }
                return this;
            }
    
            if ( data == null && fn == null ) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
            } else if ( fn == null ) {
                if ( typeof selector === "string" ) {
                    // ( types, selector, fn )
                    fn = data;
                    data = undefined;
                } else {
                    // ( types, data, fn )
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if ( fn === false ) {
                fn = returnFalse;
            } else if ( !fn ) {
                return this;
            }
    
            if ( one === 1 ) {
                origFn = fn;
                fn = function( event ) {
                    // Can use an empty set, since event contains the info
                    jQuery().off( event );
                    return origFn.apply( this, arguments );
                };
                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
            }
            return this.each( function() {
                jQuery.event.add( this, types, fn, data, selector );
            });
        },
        one: function( types, selector, data, fn ) {
            return this.on( types, selector, data, fn, 1 );
        },
        off: function( types, selector, fn ) {
            var handleObj, type;
            if ( types && types.preventDefault && types.handleObj ) {
                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery( types.delegateTarget ).off(
                    handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if ( typeof types === "object" ) {
                // ( types-object [, selector] )
                for ( type in types ) {
                    this.off( type, selector, types[ type ] );
                }
                return this;
            }
            if ( selector === false || typeof selector === "function" ) {
                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if ( fn === false ) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove( this, types, fn, selector );
            });
        },
    
        trigger: function( type, data ) {
            return this.each(function() {
                jQuery.event.trigger( type, data, this );
            });
        },
        triggerHandler: function( type, data ) {
            var elem = this[0];
            if ( elem ) {
                return jQuery.event.trigger( type, data, elem, true );
            }
        }
    });
    
    
    var
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
        rtagName = /<([\w:]+)/,
        rhtml = /<|&#?\w+;/,
        rnoInnerhtml = /<(?:script|style|link)/i,
        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptType = /^$|\/(?:java|ecma)script/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    
        // We have to close these tags to support XHTML (#13200)
        wrapMap = {
    
            // Support: IE9
            option: [ 1, "<select multiple='multiple'>", "</select>" ],
    
            thead: [ 1, "<table>", "</table>" ],
            col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
            tr: [ 2, "<table><tbody>", "</tbody></table>" ],
            td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
    
            _default: [ 0, "", "" ]
        };
    
    // Support: IE9
    wrapMap.optgroup = wrapMap.option;
    
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    
    // Support: 1.x compatibility
    // Manipulating tables requires a tbody
    function manipulationTarget( elem, content ) {
        return jQuery.nodeName( elem, "table" ) &&
            jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
    
            elem.getElementsByTagName("tbody")[0] ||
                elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
            elem;
    }
    
    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript( elem ) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }
    function restoreScript( elem ) {
        var match = rscriptTypeMasked.exec( elem.type );
    
        if ( match ) {
            elem.type = match[ 1 ];
        } else {
            elem.removeAttribute("type");
        }
    
        return elem;
    }
    
    // Mark scripts as having already been evaluated
    function setGlobalEval( elems, refElements ) {
        var i = 0,
            l = elems.length;
    
        for ( ; i < l; i++ ) {
            data_priv.set(
                elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
            );
        }
    }
    
    function cloneCopyEvent( src, dest ) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
    
        if ( dest.nodeType !== 1 ) {
            return;
        }
    
        // 1. Copy private data: events, handlers, etc.
        if ( data_priv.hasData( src ) ) {
            pdataOld = data_priv.access( src );
            pdataCur = data_priv.set( dest, pdataOld );
            events = pdataOld.events;
    
            if ( events ) {
                delete pdataCur.handle;
                pdataCur.events = {};
    
                for ( type in events ) {
                    for ( i = 0, l = events[ type ].length; i < l; i++ ) {
                        jQuery.event.add( dest, type, events[ type ][ i ] );
                    }
                }
            }
        }
    
        // 2. Copy user data
        if ( data_user.hasData( src ) ) {
            udataOld = data_user.access( src );
            udataCur = jQuery.extend( {}, udataOld );
    
            data_user.set( dest, udataCur );
        }
    }
    
    function getAll( context, tag ) {
        var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
                context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
                [];
    
        return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
            jQuery.merge( [ context ], ret ) :
            ret;
    }
    
    // Fix IE bugs, see support tests
    function fixInput( src, dest ) {
        var nodeName = dest.nodeName.toLowerCase();
    
        // Fails to persist the checked state of a cloned checkbox or radio button.
        if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
            dest.checked = src.checked;
    
        // Fails to return the selected option to the default selected state when cloning options
        } else if ( nodeName === "input" || nodeName === "textarea" ) {
            dest.defaultValue = src.defaultValue;
        }
    }
    
    jQuery.extend({
        clone: function( elem, dataAndEvents, deepDataAndEvents ) {
            var i, l, srcElements, destElements,
                clone = elem.cloneNode( true ),
                inPage = jQuery.contains( elem.ownerDocument, elem );
    
            // Fix IE cloning issues
            if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
                    !jQuery.isXMLDoc( elem ) ) {
    
                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll( clone );
                srcElements = getAll( elem );
    
                for ( i = 0, l = srcElements.length; i < l; i++ ) {
                    fixInput( srcElements[ i ], destElements[ i ] );
                }
            }
    
            // Copy the events from the original to the clone
            if ( dataAndEvents ) {
                if ( deepDataAndEvents ) {
                    srcElements = srcElements || getAll( elem );
                    destElements = destElements || getAll( clone );
    
                    for ( i = 0, l = srcElements.length; i < l; i++ ) {
                        cloneCopyEvent( srcElements[ i ], destElements[ i ] );
                    }
                } else {
                    cloneCopyEvent( elem, clone );
                }
            }
    
            // Preserve script evaluation history
            destElements = getAll( clone, "script" );
            if ( destElements.length > 0 ) {
                setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
            }
    
            // Return the cloned set
            return clone;
        },
    
        buildFragment: function( elems, context, scripts, selection ) {
            var elem, tmp, tag, wrap, contains, j,
                fragment = context.createDocumentFragment(),
                nodes = [],
                i = 0,
                l = elems.length;
    
            for ( ; i < l; i++ ) {
                elem = elems[ i ];
    
                if ( elem || elem === 0 ) {
    
                    // Add nodes directly
                    if ( jQuery.type( elem ) === "object" ) {
                        // Support: QtWebKit, PhantomJS
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
    
                    // Convert non-html into a text node
                    } else if ( !rhtml.test( elem ) ) {
                        nodes.push( context.createTextNode( elem ) );
    
                    // Convert html into DOM nodes
                    } else {
                        tmp = tmp || fragment.appendChild( context.createElement("div") );
    
                        // Deserialize a standard representation
                        tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
                        wrap = wrapMap[ tag ] || wrapMap._default;
                        tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];
    
                        // Descend through wrappers to the right content
                        j = wrap[ 0 ];
                        while ( j-- ) {
                            tmp = tmp.lastChild;
                        }
    
                        // Support: QtWebKit, PhantomJS
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge( nodes, tmp.childNodes );
    
                        // Remember the top-level container
                        tmp = fragment.firstChild;
    
                        // Ensure the created nodes are orphaned (#12392)
                        tmp.textContent = "";
                    }
                }
            }
    
            // Remove wrapper from fragment
            fragment.textContent = "";
    
            i = 0;
            while ( (elem = nodes[ i++ ]) ) {
    
                // #4087 - If origin and destination elements are the same, and this is
                // that element, do not do anything
                if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
                    continue;
                }
    
                contains = jQuery.contains( elem.ownerDocument, elem );
    
                // Append to fragment
                tmp = getAll( fragment.appendChild( elem ), "script" );
    
                // Preserve script evaluation history
                if ( contains ) {
                    setGlobalEval( tmp );
                }
    
                // Capture executables
                if ( scripts ) {
                    j = 0;
                    while ( (elem = tmp[ j++ ]) ) {
                        if ( rscriptType.test( elem.type || "" ) ) {
                            scripts.push( elem );
                        }
                    }
                }
            }
    
            return fragment;
        },
    
        cleanData: function( elems ) {
            var data, elem, type, key,
                special = jQuery.event.special,
                i = 0;
    
            for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
                if ( jQuery.acceptData( elem ) ) {
                    key = elem[ data_priv.expando ];
    
                    if ( key && (data = data_priv.cache[ key ]) ) {
                        if ( data.events ) {
                            for ( type in data.events ) {
                                if ( special[ type ] ) {
                                    jQuery.event.remove( elem, type );
    
                                // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent( elem, type, data.handle );
                                }
                            }
                        }
                        if ( data_priv.cache[ key ] ) {
                            // Discard any remaining `private` data
                            delete data_priv.cache[ key ];
                        }
                    }
                }
                // Discard any remaining `user` data
                delete data_user.cache[ elem[ data_user.expando ] ];
            }
        }
    });
    
    jQuery.fn.extend({
        text: function( value ) {
            return access( this, function( value ) {
                return value === undefined ?
                    jQuery.text( this ) :
                    this.empty().each(function() {
                        if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                            this.textContent = value;
                        }
                    });
            }, null, value, arguments.length );
        },
    
        append: function() {
            return this.domManip( arguments, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    var target = manipulationTarget( this, elem );
                    target.appendChild( elem );
                }
            });
        },
    
        prepend: function() {
            return this.domManip( arguments, function( elem ) {
                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
                    var target = manipulationTarget( this, elem );
                    target.insertBefore( elem, target.firstChild );
                }
            });
        },
    
        before: function() {
            return this.domManip( arguments, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this );
                }
            });
        },
    
        after: function() {
            return this.domManip( arguments, function( elem ) {
                if ( this.parentNode ) {
                    this.parentNode.insertBefore( elem, this.nextSibling );
                }
            });
        },
    
        remove: function( selector, keepData /* Internal Use Only */ ) {
            var elem,
                elems = selector ? jQuery.filter( selector, this ) : this,
                i = 0;
    
            for ( ; (elem = elems[i]) != null; i++ ) {
                if ( !keepData && elem.nodeType === 1 ) {
                    jQuery.cleanData( getAll( elem ) );
                }
    
                if ( elem.parentNode ) {
                    if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
                        setGlobalEval( getAll( elem, "script" ) );
                    }
                    elem.parentNode.removeChild( elem );
                }
            }
    
            return this;
        },
    
        empty: function() {
            var elem,
                i = 0;
    
            for ( ; (elem = this[i]) != null; i++ ) {
                if ( elem.nodeType === 1 ) {
    
                    // Prevent memory leaks
                    jQuery.cleanData( getAll( elem, false ) );
    
                    // Remove any remaining nodes
                    elem.textContent = "";
                }
            }
    
            return this;
        },
    
        clone: function( dataAndEvents, deepDataAndEvents ) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
    
            return this.map(function() {
                return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
            });
        },
    
        html: function( value ) {
            return access( this, function( value ) {
                var elem = this[ 0 ] || {},
                    i = 0,
                    l = this.length;
    
                if ( value === undefined && elem.nodeType === 1 ) {
                    return elem.innerHTML;
                }
    
                // See if we can take a shortcut and just use innerHTML
                if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
                    !wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
    
                    value = value.replace( rxhtmlTag, "<$1></$2>" );
    
                    try {
                        for ( ; i < l; i++ ) {
                            elem = this[ i ] || {};
    
                            // Remove element nodes and prevent memory leaks
                            if ( elem.nodeType === 1 ) {
                                jQuery.cleanData( getAll( elem, false ) );
                                elem.innerHTML = value;
                            }
                        }
    
                        elem = 0;
    
                    // If using innerHTML throws an exception, use the fallback method
                    } catch( e ) {}
                }
    
                if ( elem ) {
                    this.empty().append( value );
                }
            }, null, value, arguments.length );
        },
    
        replaceWith: function() {
            var arg = arguments[ 0 ];
    
            // Make the changes, replacing each context element with the new content
            this.domManip( arguments, function( elem ) {
                arg = this.parentNode;
    
                jQuery.cleanData( getAll( this ) );
    
                if ( arg ) {
                    arg.replaceChild( elem, this );
                }
            });
    
            // Force removal if there was no new content (e.g., from empty arguments)
            return arg && (arg.length || arg.nodeType) ? this : this.remove();
        },
    
        detach: function( selector ) {
            return this.remove( selector, true );
        },
    
        domManip: function( args, callback ) {
    
            // Flatten any nested arrays
            args = concat.apply( [], args );
    
            var fragment, first, scripts, hasScripts, node, doc,
                i = 0,
                l = this.length,
                set = this,
                iNoClone = l - 1,
                value = args[ 0 ],
                isFunction = jQuery.isFunction( value );
    
            // We can't cloneNode fragments that contain checked, in WebKit
            if ( isFunction ||
                    ( l > 1 && typeof value === "string" &&
                        !support.checkClone && rchecked.test( value ) ) ) {
                return this.each(function( index ) {
                    var self = set.eq( index );
                    if ( isFunction ) {
                        args[ 0 ] = value.call( this, index, self.html() );
                    }
                    self.domManip( args, callback );
                });
            }
    
            if ( l ) {
                fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
                first = fragment.firstChild;
    
                if ( fragment.childNodes.length === 1 ) {
                    fragment = first;
                }
    
                if ( first ) {
                    scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
                    hasScripts = scripts.length;
    
                    // Use the original fragment for the last item instead of the first because it can end up
                    // being emptied incorrectly in certain situations (#8070).
                    for ( ; i < l; i++ ) {
                        node = fragment;
    
                        if ( i !== iNoClone ) {
                            node = jQuery.clone( node, true, true );
    
                            // Keep references to cloned scripts for later restoration
                            if ( hasScripts ) {
                                // Support: QtWebKit
                                // jQuery.merge because push.apply(_, arraylike) throws
                                jQuery.merge( scripts, getAll( node, "script" ) );
                            }
                        }
    
                        callback.call( this[ i ], node, i );
                    }
    
                    if ( hasScripts ) {
                        doc = scripts[ scripts.length - 1 ].ownerDocument;
    
                        // Reenable scripts
                        jQuery.map( scripts, restoreScript );
    
                        // Evaluate executable scripts on first document insertion
                        for ( i = 0; i < hasScripts; i++ ) {
                            node = scripts[ i ];
                            if ( rscriptType.test( node.type || "" ) &&
                                !data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {
    
                                if ( node.src ) {
                                    // Optional AJAX dependency, but won't run scripts if not present
                                    if ( jQuery._evalUrl ) {
                                        jQuery._evalUrl( node.src );
                                    }
                                } else {
                                    jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
                                }
                            }
                        }
                    }
                }
            }
    
            return this;
        }
    });
    
    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function( name, original ) {
        jQuery.fn[ name ] = function( selector ) {
            var elems,
                ret = [],
                insert = jQuery( selector ),
                last = insert.length - 1,
                i = 0;
    
            for ( ; i <= last; i++ ) {
                elems = i === last ? this : this.clone( true );
                jQuery( insert[ i ] )[ original ]( elems );
    
                // Support: QtWebKit
                // .get() because push.apply(_, arraylike) throws
                push.apply( ret, elems.get() );
            }
    
            return this.pushStack( ret );
        };
    });
    
    
    var iframe,
        elemdisplay = {};
    
    /**
     * Retrieve the actual display of a element
     * @param {String} name nodeName of the element
     * @param {Object} doc Document object
     */
    // Called only from within defaultDisplay
    function actualDisplay( name, doc ) {
        var style,
            elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
    
            // getDefaultComputedStyle might be reliably used only on attached element
            display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?
    
                // Use of this method is a temporary fix (more like optimization) until something better comes along,
                // since it was removed from specification and supported only in FF
                style.display : jQuery.css( elem[ 0 ], "display" );
    
        // We don't have any data stored on the element,
        // so use "detach" method as fast way to get rid of the element
        elem.detach();
    
        return display;
    }
    
    /**
     * Try to determine the default display value of an element
     * @param {String} nodeName
     */
    function defaultDisplay( nodeName ) {
        var doc = document,
            display = elemdisplay[ nodeName ];
    
        if ( !display ) {
            display = actualDisplay( nodeName, doc );
    
            // If the simple way fails, read from inside an iframe
            if ( display === "none" || !display ) {
    
                // Use the already-created iframe if possible
                iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );
    
                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = iframe[ 0 ].contentDocument;
    
                // Support: IE
                doc.write();
                doc.close();
    
                display = actualDisplay( nodeName, doc );
                iframe.detach();
            }
    
            // Store the correct default display
            elemdisplay[ nodeName ] = display;
        }
    
        return display;
    }
    var rmargin = (/^margin/);
    
    var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
    
    var getStyles = function( elem ) {
            // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
            // IE throws on elements created in popups
            // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
            if ( elem.ownerDocument.defaultView.opener ) {
                return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
            }
    
            return window.getComputedStyle( elem, null );
        };
    
    
    
    function curCSS( elem, name, computed ) {
        var width, minWidth, maxWidth, ret,
            style = elem.style;
    
        computed = computed || getStyles( elem );
    
        // Support: IE9
        // getPropertyValue is only needed for .css('filter') (#12537)
        if ( computed ) {
            ret = computed.getPropertyValue( name ) || computed[ name ];
        }
    
        if ( computed ) {
    
            if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
                ret = jQuery.style( elem, name );
            }
    
            // Support: iOS < 6
            // A tribute to the "awesome hack by Dean Edwards"
            // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
            // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
            if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
    
                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
    
                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
    
                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
    
        return ret !== undefined ?
            // Support: IE
            // IE returns zIndex value as an integer.
            ret + "" :
            ret;
    }
    
    
    function addGetHookIf( conditionFn, hookFn ) {
        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function() {
                if ( conditionFn() ) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }
    
                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply( this, arguments );
            }
        };
    }
    
    
    (function() {
        var pixelPositionVal, boxSizingReliableVal,
            docElem = document.documentElement,
            container = document.createElement( "div" ),
            div = document.createElement( "div" );
    
        if ( !div.style ) {
            return;
        }
    
        // Support: IE9-11+
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode( true ).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
    
        container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
            "position:absolute";
        container.appendChild( div );
    
        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computePixelPositionAndBoxSizingReliable() {
            div.style.cssText =
                // Support: Firefox<29, Android 2.3
                // Vendor-prefix box-sizing
                "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
                "box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
                "border:1px;padding:1px;width:4px;position:absolute";
            div.innerHTML = "";
            docElem.appendChild( container );
    
            var divStyle = window.getComputedStyle( div, null );
            pixelPositionVal = divStyle.top !== "1%";
            boxSizingReliableVal = divStyle.width === "4px";
    
            docElem.removeChild( container );
        }
    
        // Support: node.js jsdom
        // Don't assume that getComputedStyle is a property of the global object
        if ( window.getComputedStyle ) {
            jQuery.extend( support, {
                pixelPosition: function() {
    
                    // This test is executed only once but we still do memoizing
                    // since we can use the boxSizingReliable pre-computing.
                    // No need to check if the test was already performed, though.
                    computePixelPositionAndBoxSizingReliable();
                    return pixelPositionVal;
                },
                boxSizingReliable: function() {
                    if ( boxSizingReliableVal == null ) {
                        computePixelPositionAndBoxSizingReliable();
                    }
                    return boxSizingReliableVal;
                },
                reliableMarginRight: function() {
    
                    // Support: Android 2.3
                    // Check if div with explicit width and no margin-right incorrectly
                    // gets computed margin-right based on width of container. (#3333)
                    // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                    // This support function is only executed once so no memoizing is needed.
                    var ret,
                        marginDiv = div.appendChild( document.createElement( "div" ) );
    
                    // Reset CSS: box-sizing; display; margin; border; padding
                    marginDiv.style.cssText = div.style.cssText =
                        // Support: Firefox<29, Android 2.3
                        // Vendor-prefix box-sizing
                        "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
                        "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                    marginDiv.style.marginRight = marginDiv.style.width = "0";
                    div.style.width = "1px";
                    docElem.appendChild( container );
    
                    ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );
    
                    docElem.removeChild( container );
                    div.removeChild( marginDiv );
    
                    return ret;
                }
            });
        }
    })();
    
    
    // A method for quickly swapping in/out CSS properties to get correct calculations.
    jQuery.swap = function( elem, options, callback, args ) {
        var ret, name,
            old = {};
    
        // Remember the old values, and insert the new ones
        for ( name in options ) {
            old[ name ] = elem.style[ name ];
            elem.style[ name ] = options[ name ];
        }
    
        ret = callback.apply( elem, args || [] );
    
        // Revert the old values
        for ( name in options ) {
            elem.style[ name ] = old[ name ];
        }
    
        return ret;
    };
    
    
    var
        // Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
        rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),
    
        cssShow = { position: "absolute", visibility: "hidden", display: "block" },
        cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
        },
    
        cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];
    
    // Return a css property mapped to a potentially vendor prefixed property
    function vendorPropName( style, name ) {
    
        // Shortcut for names that are not vendor prefixed
        if ( name in style ) {
            return name;
        }
    
        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1),
            origName = name,
            i = cssPrefixes.length;
    
        while ( i-- ) {
            name = cssPrefixes[ i ] + capName;
            if ( name in style ) {
                return name;
            }
        }
    
        return origName;
    }
    
    function setPositiveNumber( elem, value, subtract ) {
        var matches = rnumsplit.exec( value );
        return matches ?
            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
            value;
    }
    
    function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
        var i = extra === ( isBorderBox ? "border" : "content" ) ?
            // If we already have the right measurement, avoid augmentation
            4 :
            // Otherwise initialize for horizontal or vertical properties
            name === "width" ? 1 : 0,
    
            val = 0;
    
        for ( ; i < 4; i += 2 ) {
            // Both box models exclude margin, so add it if we want it
            if ( extra === "margin" ) {
                val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
            }
    
            if ( isBorderBox ) {
                // border-box includes padding, so remove it if we want content
                if ( extra === "content" ) {
                    val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
                }
    
                // At this point, extra isn't border nor margin, so remove border
                if ( extra !== "margin" ) {
                    val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
            } else {
                // At this point, extra isn't content, so add padding
                val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
    
                // At this point, extra isn't content nor padding, so add border
                if ( extra !== "padding" ) {
                    val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
                }
            }
        }
    
        return val;
    }
    
    function getWidthOrHeight( elem, name, extra ) {
    
        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles( elem ),
            isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
    
        // Some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if ( val <= 0 || val == null ) {
            // Fall back to computed then uncomputed css if necessary
            val = curCSS( elem, name, styles );
            if ( val < 0 || val == null ) {
                val = elem.style[ name ];
            }
    
            // Computed unit is not pixels. Stop here and return.
            if ( rnumnonpx.test(val) ) {
                return val;
            }
    
            // Check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox &&
                ( support.boxSizingReliable() || val === elem.style[ name ] );
    
            // Normalize "", auto, and prepare for extra
            val = parseFloat( val ) || 0;
        }
    
        // Use the active box-sizing model to add/subtract irrelevant styles
        return ( val +
            augmentWidthOrHeight(
                elem,
                name,
                extra || ( isBorderBox ? "border" : "content" ),
                valueIsBorderBox,
                styles
            )
        ) + "px";
    }
    
    function showHide( elements, show ) {
        var display, elem, hidden,
            values = [],
            index = 0,
            length = elements.length;
    
        for ( ; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
    
            values[ index ] = data_priv.get( elem, "olddisplay" );
            display = elem.style.display;
            if ( show ) {
                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if ( !values[ index ] && display === "none" ) {
                    elem.style.display = "";
                }
    
                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if ( elem.style.display === "" && isHidden( elem ) ) {
                    values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
                }
            } else {
                hidden = isHidden( elem );
    
                if ( display !== "none" || !hidden ) {
                    data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
                }
            }
        }
    
        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for ( index = 0; index < length; index++ ) {
            elem = elements[ index ];
            if ( !elem.style ) {
                continue;
            }
            if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
                elem.style.display = show ? values[ index ] || "" : "none";
            }
        }
    
        return elements;
    }
    
    jQuery.extend({
    
        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function( elem, computed ) {
                    if ( computed ) {
    
                        // We should always get a number back from opacity
                        var ret = curCSS( elem, "opacity" );
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },
    
        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },
    
        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            "float": "cssFloat"
        },
    
        // Get and set the style property on a DOM Node
        style: function( elem, name, value, extra ) {
    
            // Don't set styles on text and comment nodes
            if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
                return;
            }
    
            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = jQuery.camelCase( name ),
                style = elem.style;
    
            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );
    
            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
    
            // Check if we're setting a value
            if ( value !== undefined ) {
                type = typeof value;
    
                // Convert "+=" or "-=" to relative numbers (#7345)
                if ( type === "string" && (ret = rrelNum.exec( value )) ) {
                    value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
                    // Fixes bug #9237
                    type = "number";
                }
    
                // Make sure that null and NaN values aren't set (#7116)
                if ( value == null || value !== value ) {
                    return;
                }
    
                // If a number, add 'px' to the (except for certain CSS properties)
                if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
                    value += "px";
                }
    
                // Support: IE9-11+
                // background-* props affect original clone's values
                if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
                    style[ name ] = "inherit";
                }
    
                // If a hook was provided, use that value, otherwise just set the specified value
                if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
                    style[ name ] = value;
                }
    
            } else {
                // If a hook was provided get the non-computed value from there
                if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
                    return ret;
                }
    
                // Otherwise just get the value from the style object
                return style[ name ];
            }
        },
    
        css: function( elem, name, extra, styles ) {
            var val, num, hooks,
                origName = jQuery.camelCase( name );
    
            // Make sure that we're working with the right name
            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );
    
            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
    
            // If a hook was provided get the computed value from there
            if ( hooks && "get" in hooks ) {
                val = hooks.get( elem, true, extra );
            }
    
            // Otherwise, if a way to get the computed value exists, use that
            if ( val === undefined ) {
                val = curCSS( elem, name, styles );
            }
    
            // Convert "normal" to computed value
            if ( val === "normal" && name in cssNormalTransform ) {
                val = cssNormalTransform[ name ];
            }
    
            // Make numeric if forced or a qualifier was provided and val looks numeric
            if ( extra === "" || extra ) {
                num = parseFloat( val );
                return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
            }
            return val;
        }
    });
    
    jQuery.each([ "height", "width" ], function( i, name ) {
        jQuery.cssHooks[ name ] = {
            get: function( elem, computed, extra ) {
                if ( computed ) {
    
                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
                        jQuery.swap( elem, cssShow, function() {
                            return getWidthOrHeight( elem, name, extra );
                        }) :
                        getWidthOrHeight( elem, name, extra );
                }
            },
    
            set: function( elem, value, extra ) {
                var styles = extra && getStyles( elem );
                return setPositiveNumber( elem, value, extra ?
                    augmentWidthOrHeight(
                        elem,
                        name,
                        extra,
                        jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
                        styles
                    ) : 0
                );
            }
        };
    });
    
    // Support: Android 2.3
    jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
        function( elem, computed ) {
            if ( computed ) {
                return jQuery.swap( elem, { "display": "inline-block" },
                    curCSS, [ elem, "marginRight" ] );
            }
        }
    );
    
    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function( prefix, suffix ) {
        jQuery.cssHooks[ prefix + suffix ] = {
            expand: function( value ) {
                var i = 0,
                    expanded = {},
    
                    // Assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [ value ];
    
                for ( ; i < 4; i++ ) {
                    expanded[ prefix + cssExpand[ i ] + suffix ] =
                        parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
                }
    
                return expanded;
            }
        };
    
        if ( !rmargin.test( prefix ) ) {
            jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
        }
    });
    
    jQuery.fn.extend({
        css: function( name, value ) {
            return access( this, function( elem, name, value ) {
                var styles, len,
                    map = {},
                    i = 0;
    
                if ( jQuery.isArray( name ) ) {
                    styles = getStyles( elem );
                    len = name.length;
    
                    for ( ; i < len; i++ ) {
                        map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
                    }
    
                    return map;
                }
    
                return value !== undefined ?
                    jQuery.style( elem, name, value ) :
                    jQuery.css( elem, name );
            }, name, value, arguments.length > 1 );
        },
        show: function() {
            return showHide( this, true );
        },
        hide: function() {
            return showHide( this );
        },
        toggle: function( state ) {
            if ( typeof state === "boolean" ) {
                return state ? this.show() : this.hide();
            }
    
            return this.each(function() {
                if ( isHidden( this ) ) {
                    jQuery( this ).show();
                } else {
                    jQuery( this ).hide();
                }
            });
        }
    });
    
    
    function Tween( elem, options, prop, end, easing ) {
        return new Tween.prototype.init( elem, options, prop, end, easing );
    }
    jQuery.Tween = Tween;
    
    Tween.prototype = {
        constructor: Tween,
        init: function( elem, options, prop, end, easing, unit ) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
        },
        cur: function() {
            var hooks = Tween.propHooks[ this.prop ];
    
            return hooks && hooks.get ?
                hooks.get( this ) :
                Tween.propHooks._default.get( this );
        },
        run: function( percent ) {
            var eased,
                hooks = Tween.propHooks[ this.prop ];
    
            if ( this.options.duration ) {
                this.pos = eased = jQuery.easing[ this.easing ](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = ( this.end - this.start ) * eased + this.start;
    
            if ( this.options.step ) {
                this.options.step.call( this.elem, this.now, this );
            }
    
            if ( hooks && hooks.set ) {
                hooks.set( this );
            } else {
                Tween.propHooks._default.set( this );
            }
            return this;
        }
    };
    
    Tween.prototype.init.prototype = Tween.prototype;
    
    Tween.propHooks = {
        _default: {
            get: function( tween ) {
                var result;
    
                if ( tween.elem[ tween.prop ] != null &&
                    (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
                    return tween.elem[ tween.prop ];
                }
    
                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css( tween.elem, tween.prop, "" );
                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function( tween ) {
                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if ( jQuery.fx.step[ tween.prop ] ) {
                    jQuery.fx.step[ tween.prop ]( tween );
                } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
                    jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
                } else {
                    tween.elem[ tween.prop ] = tween.now;
                }
            }
        }
    };
    
    // Support: IE9
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function( tween ) {
            if ( tween.elem.nodeType && tween.elem.parentNode ) {
                tween.elem[ tween.prop ] = tween.now;
            }
        }
    };
    
    jQuery.easing = {
        linear: function( p ) {
            return p;
        },
        swing: function( p ) {
            return 0.5 - Math.cos( p * Math.PI ) / 2;
        }
    };
    
    jQuery.fx = Tween.prototype.init;
    
    // Back Compat <1.8 extension point
    jQuery.fx.step = {};
    
    
    
    
    var
        fxNow, timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
        rrun = /queueHooks$/,
        animationPrefilters = [ defaultPrefilter ],
        tweeners = {
            "*": [ function( prop, value ) {
                var tween = this.createTween( prop, value ),
                    target = tween.cur(),
                    parts = rfxnum.exec( value ),
                    unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
    
                    // Starting value computation is required for potential unit mismatches
                    start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
                        rfxnum.exec( jQuery.css( tween.elem, prop ) ),
                    scale = 1,
                    maxIterations = 20;
    
                if ( start && start[ 3 ] !== unit ) {
                    // Trust units reported by jQuery.css
                    unit = unit || start[ 3 ];
    
                    // Make sure we update the tween properties later on
                    parts = parts || [];
    
                    // Iteratively approximate from a nonzero starting point
                    start = +target || 1;
    
                    do {
                        // If previous iteration zeroed out, double until we get *something*.
                        // Use string for doubling so we don't accidentally see scale as unchanged below
                        scale = scale || ".5";
    
                        // Adjust and apply
                        start = start / scale;
                        jQuery.style( tween.elem, prop, start + unit );
    
                    // Update scale, tolerating zero or NaN from tween.cur(),
                    // break the loop if scale is unchanged or perfect, or if we've just had enough
                    } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
                }
    
                // Update tween properties
                if ( parts ) {
                    start = tween.start = +start || +target || 0;
                    tween.unit = unit;
                    // If a +=/-= token was provided, we're doing a relative animation
                    tween.end = parts[ 1 ] ?
                        start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
                        +parts[ 2 ];
                }
    
                return tween;
            } ]
        };
    
    // Animations created synchronously will run synchronously
    function createFxNow() {
        setTimeout(function() {
            fxNow = undefined;
        });
        return ( fxNow = jQuery.now() );
    }
    
    // Generate parameters to create a standard animation
    function genFx( type, includeWidth ) {
        var which,
            i = 0,
            attrs = { height: type };
    
        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for ( ; i < 4 ; i += 2 - includeWidth ) {
            which = cssExpand[ i ];
            attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
        }
    
        if ( includeWidth ) {
            attrs.opacity = attrs.width = type;
        }
    
        return attrs;
    }
    
    function createTween( value, prop, animation ) {
        var tween,
            collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
            index = 0,
            length = collection.length;
        for ( ; index < length; index++ ) {
            if ( (tween = collection[ index ].call( animation, prop, value )) ) {
    
                // We're done with this property
                return tween;
            }
        }
    }
    
    function defaultPrefilter( elem, props, opts ) {
        /* jshint validthis: true */
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHidden( elem ),
            dataShow = data_priv.get( elem, "fxshow" );
    
        // Handle queue: false promises
        if ( !opts.queue ) {
            hooks = jQuery._queueHooks( elem, "fx" );
            if ( hooks.unqueued == null ) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if ( !hooks.unqueued ) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
    
            anim.always(function() {
                // Ensure the complete handler is called before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if ( !jQuery.queue( elem, "fx" ).length ) {
                        hooks.empty.fire();
                    }
                });
            });
        }
    
        // Height/width overflow pass
        if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE9-10 do not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
    
            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            display = jQuery.css( elem, "display" );
    
            // Test default display if display is currently "none"
            checkDisplay = display === "none" ?
                data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
    
            if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
                style.display = "inline-block";
            }
        }
    
        if ( opts.overflow ) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[ 0 ];
                style.overflowX = opts.overflow[ 1 ];
                style.overflowY = opts.overflow[ 2 ];
            });
        }
    
        // show/hide pass
        for ( prop in props ) {
            value = props[ prop ];
            if ( rfxtypes.exec( value ) ) {
                delete props[ prop ];
                toggle = toggle || value === "toggle";
                if ( value === ( hidden ? "hide" : "show" ) ) {
    
                    // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
                    if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
    
            // Any non-fx value stops us from restoring the original display value
            } else {
                display = undefined;
            }
        }
    
        if ( !jQuery.isEmptyObject( orig ) ) {
            if ( dataShow ) {
                if ( "hidden" in dataShow ) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = data_priv.access( elem, "fxshow", {} );
            }
    
            // Store state if its toggle - enables .stop().toggle() to "reverse"
            if ( toggle ) {
                dataShow.hidden = !hidden;
            }
            if ( hidden ) {
                jQuery( elem ).show();
            } else {
                anim.done(function() {
                    jQuery( elem ).hide();
                });
            }
            anim.done(function() {
                var prop;
    
                data_priv.remove( elem, "fxshow" );
                for ( prop in orig ) {
                    jQuery.style( elem, prop, orig[ prop ] );
                }
            });
            for ( prop in orig ) {
                tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
    
                if ( !( prop in dataShow ) ) {
                    dataShow[ prop ] = tween.start;
                    if ( hidden ) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }
    
        // If this is a noop like .hide().hide(), restore an overwritten display value
        } else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
            style.display = display;
        }
    }
    
    function propFilter( props, specialEasing ) {
        var index, name, easing, value, hooks;
    
        // camelCase, specialEasing and expand cssHook pass
        for ( index in props ) {
            name = jQuery.camelCase( index );
            easing = specialEasing[ name ];
            value = props[ index ];
            if ( jQuery.isArray( value ) ) {
                easing = value[ 1 ];
                value = props[ index ] = value[ 0 ];
            }
    
            if ( index !== name ) {
                props[ name ] = value;
                delete props[ index ];
            }
    
            hooks = jQuery.cssHooks[ name ];
            if ( hooks && "expand" in hooks ) {
                value = hooks.expand( value );
                delete props[ name ];
    
                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for ( index in value ) {
                    if ( !( index in props ) ) {
                        props[ index ] = value[ index ];
                        specialEasing[ index ] = easing;
                    }
                }
            } else {
                specialEasing[ name ] = easing;
            }
        }
    }
    
    function Animation( elem, properties, options ) {
        var result,
            stopped,
            index = 0,
            length = animationPrefilters.length,
            deferred = jQuery.Deferred().always( function() {
                // Don't match elem in the :animated selector
                delete tick.elem;
            }),
            tick = function() {
                if ( stopped ) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
                    // Support: Android 2.3
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;
    
                for ( ; index < length ; index++ ) {
                    animation.tweens[ index ].run( percent );
                }
    
                deferred.notifyWith( elem, [ animation, percent, remaining ]);
    
                if ( percent < 1 && length ) {
                    return remaining;
                } else {
                    deferred.resolveWith( elem, [ animation ] );
                    return false;
                }
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend( {}, properties ),
                opts: jQuery.extend( true, { specialEasing: {} }, options ),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function( prop, end ) {
                    var tween = jQuery.Tween( elem, animation.opts, prop, end,
                            animation.opts.specialEasing[ prop ] || animation.opts.easing );
                    animation.tweens.push( tween );
                    return tween;
                },
                stop: function( gotoEnd ) {
                    var index = 0,
                        // If we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if ( stopped ) {
                        return this;
                    }
                    stopped = true;
                    for ( ; index < length ; index++ ) {
                        animation.tweens[ index ].run( 1 );
                    }
    
                    // Resolve when we played the last frame; otherwise, reject
                    if ( gotoEnd ) {
                        deferred.resolveWith( elem, [ animation, gotoEnd ] );
                    } else {
                        deferred.rejectWith( elem, [ animation, gotoEnd ] );
                    }
                    return this;
                }
            }),
            props = animation.props;
    
        propFilter( props, animation.opts.specialEasing );
    
        for ( ; index < length ; index++ ) {
            result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
            if ( result ) {
                return result;
            }
        }
    
        jQuery.map( props, createTween, animation );
    
        if ( jQuery.isFunction( animation.opts.start ) ) {
            animation.opts.start.call( elem, animation );
        }
    
        jQuery.fx.timer(
            jQuery.extend( tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            })
        );
    
        // attach callbacks from options
        return animation.progress( animation.opts.progress )
            .done( animation.opts.done, animation.opts.complete )
            .fail( animation.opts.fail )
            .always( animation.opts.always );
    }
    
    jQuery.Animation = jQuery.extend( Animation, {
    
        tweener: function( props, callback ) {
            if ( jQuery.isFunction( props ) ) {
                callback = props;
                props = [ "*" ];
            } else {
                props = props.split(" ");
            }
    
            var prop,
                index = 0,
                length = props.length;
    
            for ( ; index < length ; index++ ) {
                prop = props[ index ];
                tweeners[ prop ] = tweeners[ prop ] || [];
                tweeners[ prop ].unshift( callback );
            }
        },
    
        prefilter: function( callback, prepend ) {
            if ( prepend ) {
                animationPrefilters.unshift( callback );
            } else {
                animationPrefilters.push( callback );
            }
        }
    });
    
    jQuery.speed = function( speed, easing, fn ) {
        var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
            complete: fn || !fn && easing ||
                jQuery.isFunction( speed ) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
        };
    
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
            opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
    
        // Normalize opt.queue - true/undefined/null -> "fx"
        if ( opt.queue == null || opt.queue === true ) {
            opt.queue = "fx";
        }
    
        // Queueing
        opt.old = opt.complete;
    
        opt.complete = function() {
            if ( jQuery.isFunction( opt.old ) ) {
                opt.old.call( this );
            }
    
            if ( opt.queue ) {
                jQuery.dequeue( this, opt.queue );
            }
        };
    
        return opt;
    };
    
    jQuery.fn.extend({
        fadeTo: function( speed, to, easing, callback ) {
    
            // Show any hidden elements after setting opacity to 0
            return this.filter( isHidden ).css( "opacity", 0 ).show()
    
                // Animate to the value specified
                .end().animate({ opacity: to }, speed, easing, callback );
        },
        animate: function( prop, speed, easing, callback ) {
            var empty = jQuery.isEmptyObject( prop ),
                optall = jQuery.speed( speed, easing, callback ),
                doAnimation = function() {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation( this, jQuery.extend( {}, prop ), optall );
    
                    // Empty animations, or finishing resolves immediately
                    if ( empty || data_priv.get( this, "finish" ) ) {
                        anim.stop( true );
                    }
                };
                doAnimation.finish = doAnimation;
    
            return empty || optall.queue === false ?
                this.each( doAnimation ) :
                this.queue( optall.queue, doAnimation );
        },
        stop: function( type, clearQueue, gotoEnd ) {
            var stopQueue = function( hooks ) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop( gotoEnd );
            };
    
            if ( typeof type !== "string" ) {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if ( clearQueue && type !== false ) {
                this.queue( type || "fx", [] );
            }
    
            return this.each(function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = data_priv.get( this );
    
                if ( index ) {
                    if ( data[ index ] && data[ index ].stop ) {
                        stopQueue( data[ index ] );
                    }
                } else {
                    for ( index in data ) {
                        if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
                            stopQueue( data[ index ] );
                        }
                    }
                }
    
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
                        timers[ index ].anim.stop( gotoEnd );
                        dequeue = false;
                        timers.splice( index, 1 );
                    }
                }
    
                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if ( dequeue || !gotoEnd ) {
                    jQuery.dequeue( this, type );
                }
            });
        },
        finish: function( type ) {
            if ( type !== false ) {
                type = type || "fx";
            }
            return this.each(function() {
                var index,
                    data = data_priv.get( this ),
                    queue = data[ type + "queue" ],
                    hooks = data[ type + "queueHooks" ],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;
    
                // Enable finishing flag on private data
                data.finish = true;
    
                // Empty the queue first
                jQuery.queue( this, type, [] );
    
                if ( hooks && hooks.stop ) {
                    hooks.stop.call( this, true );
                }
    
                // Look for any active animations, and finish them
                for ( index = timers.length; index--; ) {
                    if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
                        timers[ index ].anim.stop( true );
                        timers.splice( index, 1 );
                    }
                }
    
                // Look for any animations in the old queue and finish them
                for ( index = 0; index < length; index++ ) {
                    if ( queue[ index ] && queue[ index ].finish ) {
                        queue[ index ].finish.call( this );
                    }
                }
    
                // Turn off finishing flag
                delete data.finish;
            });
        }
    });
    
    jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
        var cssFn = jQuery.fn[ name ];
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply( this, arguments ) :
                this.animate( genFx( name, true ), speed, easing, callback );
        };
    });
    
    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
    }, function( name, props ) {
        jQuery.fn[ name ] = function( speed, easing, callback ) {
            return this.animate( props, speed, easing, callback );
        };
    });
    
    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer,
            i = 0,
            timers = jQuery.timers;
    
        fxNow = jQuery.now();
    
        for ( ; i < timers.length; i++ ) {
            timer = timers[ i ];
            // Checks the timer has not already been removed
            if ( !timer() && timers[ i ] === timer ) {
                timers.splice( i--, 1 );
            }
        }
    
        if ( !timers.length ) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    
    jQuery.fx.timer = function( timer ) {
        jQuery.timers.push( timer );
        if ( timer() ) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };
    
    jQuery.fx.interval = 13;
    
    jQuery.fx.start = function() {
        if ( !timerId ) {
            timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
        }
    };
    
    jQuery.fx.stop = function() {
        clearInterval( timerId );
        timerId = null;
    };
    
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        // Default speed
        _default: 400
    };
    
    
    // Based off of the plugin by Clint Helfers, with permission.
    // http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function( time, type ) {
        time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
        type = type || "fx";
    
        return this.queue( type, function( next, hooks ) {
            var timeout = setTimeout( next, time );
            hooks.stop = function() {
                clearTimeout( timeout );
            };
        });
    };
    
    
    (function() {
        var input = document.createElement( "input" ),
            select = document.createElement( "select" ),
            opt = select.appendChild( document.createElement( "option" ) );
    
        input.type = "checkbox";
    
        // Support: iOS<=5.1, Android<=4.2+
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";
    
        // Support: IE<=11+
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;
    
        // Support: Android<=2.3
        // Options inside disabled selects are incorrectly marked as disabled
        select.disabled = true;
        support.optDisabled = !opt.disabled;
    
        // Support: IE<=11+
        // An input loses its value after becoming a radio
        input = document.createElement( "input" );
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();
    
    
    var nodeHook, boolHook,
        attrHandle = jQuery.expr.attrHandle;
    
    jQuery.fn.extend({
        attr: function( name, value ) {
            return access( this, jQuery.attr, name, value, arguments.length > 1 );
        },
    
        removeAttr: function( name ) {
            return this.each(function() {
                jQuery.removeAttr( this, name );
            });
        }
    });
    
    jQuery.extend({
        attr: function( elem, name, value ) {
            var hooks, ret,
                nType = elem.nodeType;
    
            // don't get/set attributes on text, comment and attribute nodes
            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }
    
            // Fallback to prop when attributes are not supported
            if ( typeof elem.getAttribute === strundefined ) {
                return jQuery.prop( elem, name, value );
            }
    
            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[ name ] ||
                    ( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
            }
    
            if ( value !== undefined ) {
    
                if ( value === null ) {
                    jQuery.removeAttr( elem, name );
    
                } else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
                    return ret;
    
                } else {
                    elem.setAttribute( name, value + "" );
                    return value;
                }
    
            } else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
                return ret;
    
            } else {
                ret = jQuery.find.attr( elem, name );
    
                // Non-existent attributes return null, we normalize to undefined
                return ret == null ?
                    undefined :
                    ret;
            }
        },
    
        removeAttr: function( elem, value ) {
            var name, propName,
                i = 0,
                attrNames = value && value.match( rnotwhite );
    
            if ( attrNames && elem.nodeType === 1 ) {
                while ( (name = attrNames[i++]) ) {
                    propName = jQuery.propFix[ name ] || name;
    
                    // Boolean attributes get special treatment (#10870)
                    if ( jQuery.expr.match.bool.test( name ) ) {
                        // Set corresponding property to false
                        elem[ propName ] = false;
                    }
    
                    elem.removeAttribute( name );
                }
            }
        },
    
        attrHooks: {
            type: {
                set: function( elem, value ) {
                    if ( !support.radioValue && value === "radio" &&
                        jQuery.nodeName( elem, "input" ) ) {
                        var val = elem.value;
                        elem.setAttribute( "type", value );
                        if ( val ) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        }
    });
    
    // Hooks for boolean attributes
    boolHook = {
        set: function( elem, value, name ) {
            if ( value === false ) {
                // Remove boolean attributes when set to false
                jQuery.removeAttr( elem, name );
            } else {
                elem.setAttribute( name, name );
            }
            return name;
        }
    };
    jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
        var getter = attrHandle[ name ] || jQuery.find.attr;
    
        attrHandle[ name ] = function( elem, name, isXML ) {
            var ret, handle;
            if ( !isXML ) {
                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[ name ];
                attrHandle[ name ] = ret;
                ret = getter( elem, name, isXML ) != null ?
                    name.toLowerCase() :
                    null;
                attrHandle[ name ] = handle;
            }
            return ret;
        };
    });
    
    
    
    
    var rfocusable = /^(?:input|select|textarea|button)$/i;
    
    jQuery.fn.extend({
        prop: function( name, value ) {
            return access( this, jQuery.prop, name, value, arguments.length > 1 );
        },
    
        removeProp: function( name ) {
            return this.each(function() {
                delete this[ jQuery.propFix[ name ] || name ];
            });
        }
    });
    
    jQuery.extend({
        propFix: {
            "for": "htmlFor",
            "class": "className"
        },
    
        prop: function( elem, name, value ) {
            var ret, hooks, notxml,
                nType = elem.nodeType;
    
            // Don't get/set properties on text, comment and attribute nodes
            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
                return;
            }
    
            notxml = nType !== 1 || !jQuery.isXMLDoc( elem );
    
            if ( notxml ) {
                // Fix name and attach hooks
                name = jQuery.propFix[ name ] || name;
                hooks = jQuery.propHooks[ name ];
            }
    
            if ( value !== undefined ) {
                return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
                    ret :
                    ( elem[ name ] = value );
    
            } else {
                return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
                    ret :
                    elem[ name ];
            }
        },
    
        propHooks: {
            tabIndex: {
                get: function( elem ) {
                    return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
                        elem.tabIndex :
                        -1;
                }
            }
        }
    });
    
    if ( !support.optSelected ) {
        jQuery.propHooks.selected = {
            get: function( elem ) {
                var parent = elem.parentNode;
                if ( parent && parent.parentNode ) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            }
        };
    }
    
    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[ this.toLowerCase() ] = this;
    });
    
    
    
    
    var rclass = /[\t\r\n\f]/g;
    
    jQuery.fn.extend({
        addClass: function( value ) {
            var classes, elem, cur, clazz, j, finalValue,
                proceed = typeof value === "string" && value,
                i = 0,
                len = this.length;
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( j ) {
                    jQuery( this ).addClass( value.call( this, j, this.className ) );
                });
            }
    
            if ( proceed ) {
                // The disjunction here is for better compressibility (see removeClass)
                classes = ( value || "" ).match( rnotwhite ) || [];
    
                for ( ; i < len; i++ ) {
                    elem = this[ i ];
                    cur = elem.nodeType === 1 && ( elem.className ?
                        ( " " + elem.className + " " ).replace( rclass, " " ) :
                        " "
                    );
    
                    if ( cur ) {
                        j = 0;
                        while ( (clazz = classes[j++]) ) {
                            if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
                                cur += clazz + " ";
                            }
                        }
    
                        // only assign if different to avoid unneeded rendering.
                        finalValue = jQuery.trim( cur );
                        if ( elem.className !== finalValue ) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
    
            return this;
        },
    
        removeClass: function( value ) {
            var classes, elem, cur, clazz, j, finalValue,
                proceed = arguments.length === 0 || typeof value === "string" && value,
                i = 0,
                len = this.length;
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( j ) {
                    jQuery( this ).removeClass( value.call( this, j, this.className ) );
                });
            }
            if ( proceed ) {
                classes = ( value || "" ).match( rnotwhite ) || [];
    
                for ( ; i < len; i++ ) {
                    elem = this[ i ];
                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 && ( elem.className ?
                        ( " " + elem.className + " " ).replace( rclass, " " ) :
                        ""
                    );
    
                    if ( cur ) {
                        j = 0;
                        while ( (clazz = classes[j++]) ) {
                            // Remove *all* instances
                            while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
                                cur = cur.replace( " " + clazz + " ", " " );
                            }
                        }
    
                        // Only assign if different to avoid unneeded rendering.
                        finalValue = value ? jQuery.trim( cur ) : "";
                        if ( elem.className !== finalValue ) {
                            elem.className = finalValue;
                        }
                    }
                }
            }
    
            return this;
        },
    
        toggleClass: function( value, stateVal ) {
            var type = typeof value;
    
            if ( typeof stateVal === "boolean" && type === "string" ) {
                return stateVal ? this.addClass( value ) : this.removeClass( value );
            }
    
            if ( jQuery.isFunction( value ) ) {
                return this.each(function( i ) {
                    jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
                });
            }
    
            return this.each(function() {
                if ( type === "string" ) {
                    // Toggle individual class names
                    var className,
                        i = 0,
                        self = jQuery( this ),
                        classNames = value.match( rnotwhite ) || [];
    
                    while ( (className = classNames[ i++ ]) ) {
                        // Check each className given, space separated list
                        if ( self.hasClass( className ) ) {
                            self.removeClass( className );
                        } else {
                            self.addClass( className );
                        }
                    }
    
                // Toggle whole class name
                } else if ( type === strundefined || type === "boolean" ) {
                    if ( this.className ) {
                        // store className if set
                        data_priv.set( this, "__className__", this.className );
                    }
    
                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
                }
            });
        },
    
        hasClass: function( selector ) {
            var className = " " + selector + " ",
                i = 0,
                l = this.length;
            for ( ; i < l; i++ ) {
                if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
                    return true;
                }
            }
    
            return false;
        }
    });
    
    
    
    
    var rreturn = /\r/g;
    
    jQuery.fn.extend({
        val: function( value ) {
            var hooks, ret, isFunction,
                elem = this[0];
    
            if ( !arguments.length ) {
                if ( elem ) {
                    hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];
    
                    if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
                        return ret;
                    }
    
                    ret = elem.value;
    
                    return typeof ret === "string" ?
                        // Handle most common string cases
                        ret.replace(rreturn, "") :
                        // Handle cases where value is null/undef or number
                        ret == null ? "" : ret;
                }
    
                return;
            }
    
            isFunction = jQuery.isFunction( value );
    
            return this.each(function( i ) {
                var val;
    
                if ( this.nodeType !== 1 ) {
                    return;
                }
    
                if ( isFunction ) {
                    val = value.call( this, i, jQuery( this ).val() );
                } else {
                    val = value;
                }
    
                // Treat null/undefined as ""; convert numbers to string
                if ( val == null ) {
                    val = "";
    
                } else if ( typeof val === "number" ) {
                    val += "";
    
                } else if ( jQuery.isArray( val ) ) {
                    val = jQuery.map( val, function( value ) {
                        return value == null ? "" : value + "";
                    });
                }
    
                hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
    
                // If set returns undefined, fall back to normal setting
                if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
                    this.value = val;
                }
            });
        }
    });
    
    jQuery.extend({
        valHooks: {
            option: {
                get: function( elem ) {
                    var val = jQuery.find.attr( elem, "value" );
                    return val != null ?
                        val :
                        // Support: IE10-11+
                        // option.text throws exceptions (#14686, #14858)
                        jQuery.trim( jQuery.text( elem ) );
                }
            },
            select: {
                get: function( elem ) {
                    var value, option,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one" || index < 0,
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ?
                            max :
                            one ? index : 0;
    
                    // Loop through all the selected options
                    for ( ; i < max; i++ ) {
                        option = options[ i ];
    
                        // IE6-9 doesn't update selected after form reset (#2551)
                        if ( ( option.selected || i === index ) &&
                                // Don't return options that are disabled or in a disabled optgroup
                                ( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
                                ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
    
                            // Get the specific value for the option
                            value = jQuery( option ).val();
    
                            // We don't need an array for one selects
                            if ( one ) {
                                return value;
                            }
    
                            // Multi-Selects return an array
                            values.push( value );
                        }
                    }
    
                    return values;
                },
    
                set: function( elem, value ) {
                    var optionSet, option,
                        options = elem.options,
                        values = jQuery.makeArray( value ),
                        i = options.length;
    
                    while ( i-- ) {
                        option = options[ i ];
                        if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
                            optionSet = true;
                        }
                    }
    
                    // Force browsers to behave consistently when non-matching value is set
                    if ( !optionSet ) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    
    // Radios and checkboxes getter/setter
    jQuery.each([ "radio", "checkbox" ], function() {
        jQuery.valHooks[ this ] = {
            set: function( elem, value ) {
                if ( jQuery.isArray( value ) ) {
                    return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
                }
            }
        };
        if ( !support.checkOn ) {
            jQuery.valHooks[ this ].get = function( elem ) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });
    
    
    
    
    // Return jQuery for attributes-only inclusion
    
    
    jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
        "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
        "change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {
    
        // Handle event binding
        jQuery.fn[ name ] = function( data, fn ) {
            return arguments.length > 0 ?
                this.on( name, null, data, fn ) :
                this.trigger( name );
        };
    });
    
    jQuery.fn.extend({
        hover: function( fnOver, fnOut ) {
            return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
        },
    
        bind: function( types, data, fn ) {
            return this.on( types, null, data, fn );
        },
        unbind: function( types, fn ) {
            return this.off( types, null, fn );
        },
    
        delegate: function( selector, types, data, fn ) {
            return this.on( types, selector, data, fn );
        },
        undelegate: function( selector, types, fn ) {
            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
        }
    });
    
    
    var nonce = jQuery.now();
    
    var rquery = (/\?/);
    
    
    
    // Support: Android 2.3
    // Workaround failure to string-cast null input
    jQuery.parseJSON = function( data ) {
        return JSON.parse( data + "" );
    };
    
    
    // Cross-browser xml parsing
    jQuery.parseXML = function( data ) {
        var xml, tmp;
        if ( !data || typeof data !== "string" ) {
            return null;
        }
    
        // Support: IE9
        try {
            tmp = new DOMParser();
            xml = tmp.parseFromString( data, "text/xml" );
        } catch ( e ) {
            xml = undefined;
        }
    
        if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
            jQuery.error( "Invalid XML: " + data );
        }
        return xml;
    };
    
    
    var
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
    
        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},
    
        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},
    
        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = "*/".concat( "*" ),
    
        // Document location
        ajaxLocation = window.location.href,
    
        // Segment location into parts
        ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];
    
    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports( structure ) {
    
        // dataTypeExpression is optional and defaults to "*"
        return function( dataTypeExpression, func ) {
    
            if ( typeof dataTypeExpression !== "string" ) {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }
    
            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
    
            if ( jQuery.isFunction( func ) ) {
                // For each dataType in the dataTypeExpression
                while ( (dataType = dataTypes[i++]) ) {
                    // Prepend if requested
                    if ( dataType[0] === "+" ) {
                        dataType = dataType.slice( 1 ) || "*";
                        (structure[ dataType ] = structure[ dataType ] || []).unshift( func );
    
                    // Otherwise append
                    } else {
                        (structure[ dataType ] = structure[ dataType ] || []).push( func );
                    }
                }
            }
        };
    }
    
    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
    
        var inspected = {},
            seekingTransport = ( structure === transports );
    
        function inspect( dataType ) {
            var selected;
            inspected[ dataType ] = true;
            jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
                var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
                if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
                    options.dataTypes.unshift( dataTypeOrTransport );
                    inspect( dataTypeOrTransport );
                    return false;
                } else if ( seekingTransport ) {
                    return !( selected = dataTypeOrTransport );
                }
            });
            return selected;
        }
    
        return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
    }
    
    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend( target, src ) {
        var key, deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};
    
        for ( key in src ) {
            if ( src[ key ] !== undefined ) {
                ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
            }
        }
        if ( deep ) {
            jQuery.extend( true, target, deep );
        }
    
        return target;
    }
    
    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses( s, jqXHR, responses ) {
    
        var ct, type, finalDataType, firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes;
    
        // Remove auto dataType and get content-type in the process
        while ( dataTypes[ 0 ] === "*" ) {
            dataTypes.shift();
            if ( ct === undefined ) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }
    
        // Check if we're dealing with a known content-type
        if ( ct ) {
            for ( type in contents ) {
                if ( contents[ type ] && contents[ type ].test( ct ) ) {
                    dataTypes.unshift( type );
                    break;
                }
            }
        }
    
        // Check to see if we have a response for the expected dataType
        if ( dataTypes[ 0 ] in responses ) {
            finalDataType = dataTypes[ 0 ];
        } else {
            // Try convertible dataTypes
            for ( type in responses ) {
                if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
                    finalDataType = type;
                    break;
                }
                if ( !firstDataType ) {
                    firstDataType = type;
                }
            }
            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }
    
        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if ( finalDataType ) {
            if ( finalDataType !== dataTypes[ 0 ] ) {
                dataTypes.unshift( finalDataType );
            }
            return responses[ finalDataType ];
        }
    }
    
    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert( s, response, jqXHR, isSuccess ) {
        var conv2, current, conv, tmp, prev,
            converters = {},
            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice();
    
        // Create converters map with lowercased keys
        if ( dataTypes[ 1 ] ) {
            for ( conv in s.converters ) {
                converters[ conv.toLowerCase() ] = s.converters[ conv ];
            }
        }
    
        current = dataTypes.shift();
    
        // Convert to each sequential dataType
        while ( current ) {
    
            if ( s.responseFields[ current ] ) {
                jqXHR[ s.responseFields[ current ] ] = response;
            }
    
            // Apply the dataFilter if provided
            if ( !prev && isSuccess && s.dataFilter ) {
                response = s.dataFilter( response, s.dataType );
            }
    
            prev = current;
            current = dataTypes.shift();
    
            if ( current ) {
    
            // There's only work to do if current dataType is non-auto
                if ( current === "*" ) {
    
                    current = prev;
    
                // Convert response if prev dataType is non-auto and differs from current
                } else if ( prev !== "*" && prev !== current ) {
    
                    // Seek a direct converter
                    conv = converters[ prev + " " + current ] || converters[ "* " + current ];
    
                    // If none found, seek a pair
                    if ( !conv ) {
                        for ( conv2 in converters ) {
    
                            // If conv2 outputs current
                            tmp = conv2.split( " " );
                            if ( tmp[ 1 ] === current ) {
    
                                // If prev can be converted to accepted input
                                conv = converters[ prev + " " + tmp[ 0 ] ] ||
                                    converters[ "* " + tmp[ 0 ] ];
                                if ( conv ) {
                                    // Condense equivalence converters
                                    if ( conv === true ) {
                                        conv = converters[ conv2 ];
    
                                    // Otherwise, insert the intermediate dataType
                                    } else if ( converters[ conv2 ] !== true ) {
                                        current = tmp[ 0 ];
                                        dataTypes.unshift( tmp[ 1 ] );
                                    }
                                    break;
                                }
                            }
                        }
                    }
    
                    // Apply converter (if not an equivalence)
                    if ( conv !== true ) {
    
                        // Unless errors are allowed to bubble, catch and return them
                        if ( conv && s[ "throws" ] ) {
                            response = conv( response );
                        } else {
                            try {
                                response = conv( response );
                            } catch ( e ) {
                                return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
                            }
                        }
                    }
                }
            }
        }
    
        return { state: "success", data: response };
    }
    
    jQuery.extend({
    
        // Counter for holding the number of active queries
        active: 0,
    
        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},
    
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */
    
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
    
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
    
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
    
            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {
    
                // Convert anything to text
                "* text": String,
    
                // Text to html (true = no transformation)
                "text html": true,
    
                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,
    
                // Parse text as xml
                "text xml": jQuery.parseXML
            },
    
            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },
    
        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function( target, settings ) {
            return settings ?
    
                // Building a settings object
                ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
    
                // Extending ajaxSettings
                ajaxExtend( jQuery.ajaxSettings, target );
        },
    
        ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
        ajaxTransport: addToPrefiltersOrTransports( transports ),
    
        // Main method
        ajax: function( url, options ) {
    
            // If url is an object, simulate pre-1.5 signature
            if ( typeof url === "object" ) {
                options = url;
                url = undefined;
            }
    
            // Force options to be an object
            options = options || {};
    
            var transport,
                // URL without anti-cache param
                cacheURL,
                // Response headers
                responseHeadersString,
                responseHeaders,
                // timeout handle
                timeoutTimer,
                // Cross-domain detection vars
                parts,
                // To know if global events are to be dispatched
                fireGlobals,
                // Loop variable
                i,
                // Create the final options object
                s = jQuery.ajaxSetup( {}, options ),
                // Callbacks context
                callbackContext = s.context || s,
                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
                    jQuery( callbackContext ) :
                    jQuery.event,
                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),
                // Status-dependent callbacks
                statusCode = s.statusCode || {},
                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},
                // The jqXHR state
                state = 0,
                // Default abort message
                strAbort = "canceled",
                // Fake xhr
                jqXHR = {
                    readyState: 0,
    
                    // Builds headers hashtable if needed
                    getResponseHeader: function( key ) {
                        var match;
                        if ( state === 2 ) {
                            if ( !responseHeaders ) {
                                responseHeaders = {};
                                while ( (match = rheaders.exec( responseHeadersString )) ) {
                                    responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
                                }
                            }
                            match = responseHeaders[ key.toLowerCase() ];
                        }
                        return match == null ? null : match;
                    },
    
                    // Raw string
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },
    
                    // Caches the header
                    setRequestHeader: function( name, value ) {
                        var lname = name.toLowerCase();
                        if ( !state ) {
                            name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
                            requestHeaders[ name ] = value;
                        }
                        return this;
                    },
    
                    // Overrides response content-type header
                    overrideMimeType: function( type ) {
                        if ( !state ) {
                            s.mimeType = type;
                        }
                        return this;
                    },
    
                    // Status-dependent callbacks
                    statusCode: function( map ) {
                        var code;
                        if ( map ) {
                            if ( state < 2 ) {
                                for ( code in map ) {
                                    // Lazy-add the new callback in a way that preserves old ones
                                    statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
                                }
                            } else {
                                // Execute the appropriate callbacks
                                jqXHR.always( map[ jqXHR.status ] );
                            }
                        }
                        return this;
                    },
    
                    // Cancel the request
                    abort: function( statusText ) {
                        var finalText = statusText || strAbort;
                        if ( transport ) {
                            transport.abort( finalText );
                        }
                        done( 0, finalText );
                        return this;
                    }
                };
    
            // Attach deferreds
            deferred.promise( jqXHR ).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
    
            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
                .replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
    
            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;
    
            // Extract dataTypes list
            s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
    
            // A cross-domain request is in order when we have a protocol:host:port mismatch
            if ( s.crossDomain == null ) {
                parts = rurl.exec( s.url.toLowerCase() );
                s.crossDomain = !!( parts &&
                    ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
                        ( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
                            ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
                );
            }
    
            // Convert data if not already a string
            if ( s.data && s.processData && typeof s.data !== "string" ) {
                s.data = jQuery.param( s.data, s.traditional );
            }
    
            // Apply prefilters
            inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
    
            // If request was aborted inside a prefilter, stop there
            if ( state === 2 ) {
                return jqXHR;
            }
    
            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;
    
            // Watch for a new set of requests
            if ( fireGlobals && jQuery.active++ === 0 ) {
                jQuery.event.trigger("ajaxStart");
            }
    
            // Uppercase the type
            s.type = s.type.toUpperCase();
    
            // Determine if request has content
            s.hasContent = !rnoContent.test( s.type );
    
            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;
    
            // More options handling for requests with no content
            if ( !s.hasContent ) {
    
                // If data is available, append data to url
                if ( s.data ) {
                    cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }
    
                // Add anti-cache in url if needed
                if ( s.cache === false ) {
                    s.url = rts.test( cacheURL ) ?
    
                        // If there is already a '_' parameter, set its value
                        cacheURL.replace( rts, "$1_=" + nonce++ ) :
    
                        // Otherwise add one to the end
                        cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
                }
            }
    
            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if ( s.ifModified ) {
                if ( jQuery.lastModified[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
                }
                if ( jQuery.etag[ cacheURL ] ) {
                    jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
                }
            }
    
            // Set the correct header, if data is being sent
            if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
                jqXHR.setRequestHeader( "Content-Type", s.contentType );
            }
    
            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
                    s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
                    s.accepts[ "*" ]
            );
    
            // Check for headers option
            for ( i in s.headers ) {
                jqXHR.setRequestHeader( i, s.headers[ i ] );
            }
    
            // Allow custom headers/mimetypes and early abort
            if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
                // Abort if not done already and return
                return jqXHR.abort();
            }
    
            // Aborting is no longer a cancellation
            strAbort = "abort";
    
            // Install callbacks on deferreds
            for ( i in { success: 1, error: 1, complete: 1 } ) {
                jqXHR[ i ]( s[ i ] );
            }
    
            // Get transport
            transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
    
            // If no transport, we auto-abort
            if ( !transport ) {
                done( -1, "No Transport" );
            } else {
                jqXHR.readyState = 1;
    
                // Send global event
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
                }
                // Timeout
                if ( s.async && s.timeout > 0 ) {
                    timeoutTimer = setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout );
                }
    
                try {
                    state = 1;
                    transport.send( requestHeaders, done );
                } catch ( e ) {
                    // Propagate exception as error if not done
                    if ( state < 2 ) {
                        done( -1, e );
                    // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }
    
            // Callback for when everything is done
            function done( status, nativeStatusText, responses, headers ) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;
    
                // Called once
                if ( state === 2 ) {
                    return;
                }
    
                // State is "done" now
                state = 2;
    
                // Clear timeout if it exists
                if ( timeoutTimer ) {
                    clearTimeout( timeoutTimer );
                }
    
                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;
    
                // Cache response headers
                responseHeadersString = headers || "";
    
                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;
    
                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;
    
                // Get response data
                if ( responses ) {
                    response = ajaxHandleResponses( s, jqXHR, responses );
                }
    
                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert( s, response, jqXHR, isSuccess );
    
                // If successful, handle type chaining
                if ( isSuccess ) {
    
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if ( s.ifModified ) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if ( modified ) {
                            jQuery.lastModified[ cacheURL ] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if ( modified ) {
                            jQuery.etag[ cacheURL ] = modified;
                        }
                    }
    
                    // if no content
                    if ( status === 204 || s.type === "HEAD" ) {
                        statusText = "nocontent";
    
                    // if not modified
                    } else if ( status === 304 ) {
                        statusText = "notmodified";
    
                    // If we have data, let's convert it
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if ( status || !statusText ) {
                        statusText = "error";
                        if ( status < 0 ) {
                            status = 0;
                        }
                    }
                }
    
                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = ( nativeStatusText || statusText ) + "";
    
                // Success/Error
                if ( isSuccess ) {
                    deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
                } else {
                    deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
                }
    
                // Status-dependent callbacks
                jqXHR.statusCode( statusCode );
                statusCode = undefined;
    
                if ( fireGlobals ) {
                    globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
                        [ jqXHR, s, isSuccess ? success : error ] );
                }
    
                // Complete
                completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
    
                if ( fireGlobals ) {
                    globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
                    // Handle the global AJAX counter
                    if ( !( --jQuery.active ) ) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }
    
            return jqXHR;
        },
    
        getJSON: function( url, data, callback ) {
            return jQuery.get( url, data, callback, "json" );
        },
    
        getScript: function( url, callback ) {
            return jQuery.get( url, undefined, callback, "script" );
        }
    });
    
    jQuery.each( [ "get", "post" ], function( i, method ) {
        jQuery[ method ] = function( url, data, callback, type ) {
            // Shift arguments if data argument was omitted
            if ( jQuery.isFunction( data ) ) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
    
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    
    
    jQuery._evalUrl = function( url ) {
        return jQuery.ajax({
            url: url,
            type: "GET",
            dataType: "script",
            async: false,
            global: false,
            "throws": true
        });
    };
    
    
    jQuery.fn.extend({
        wrapAll: function( html ) {
            var wrap;
    
            if ( jQuery.isFunction( html ) ) {
                return this.each(function( i ) {
                    jQuery( this ).wrapAll( html.call(this, i) );
                });
            }
    
            if ( this[ 0 ] ) {
    
                // The elements to wrap the target around
                wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
    
                if ( this[ 0 ].parentNode ) {
                    wrap.insertBefore( this[ 0 ] );
                }
    
                wrap.map(function() {
                    var elem = this;
    
                    while ( elem.firstElementChild ) {
                        elem = elem.firstElementChild;
                    }
    
                    return elem;
                }).append( this );
            }
    
            return this;
        },
    
        wrapInner: function( html ) {
            if ( jQuery.isFunction( html ) ) {
                return this.each(function( i ) {
                    jQuery( this ).wrapInner( html.call(this, i) );
                });
            }
    
            return this.each(function() {
                var self = jQuery( this ),
                    contents = self.contents();
    
                if ( contents.length ) {
                    contents.wrapAll( html );
    
                } else {
                    self.append( html );
                }
            });
        },
    
        wrap: function( html ) {
            var isFunction = jQuery.isFunction( html );
    
            return this.each(function( i ) {
                jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
            });
        },
    
        unwrap: function() {
            return this.parent().each(function() {
                if ( !jQuery.nodeName( this, "body" ) ) {
                    jQuery( this ).replaceWith( this.childNodes );
                }
            }).end();
        }
    });
    
    
    jQuery.expr.filters.hidden = function( elem ) {
        // Support: Opera <= 12.12
        // Opera reports offsetWidths and offsetHeights less than zero on some elements
        return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
    };
    jQuery.expr.filters.visible = function( elem ) {
        return !jQuery.expr.filters.hidden( elem );
    };
    
    
    
    
    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;
    
    function buildParams( prefix, obj, traditional, add ) {
        var name;
    
        if ( jQuery.isArray( obj ) ) {
            // Serialize array item.
            jQuery.each( obj, function( i, v ) {
                if ( traditional || rbracket.test( prefix ) ) {
                    // Treat each array item as a scalar.
                    add( prefix, v );
    
                } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
                }
            });
    
        } else if ( !traditional && jQuery.type( obj ) === "object" ) {
            // Serialize object item.
            for ( name in obj ) {
                buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
            }
    
        } else {
            // Serialize scalar item.
            add( prefix, obj );
        }
    }
    
    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function( a, traditional ) {
        var prefix,
            s = [],
            add = function( key, value ) {
                // If value is a function, invoke it and return its value
                value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
                s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
            };
    
        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if ( traditional === undefined ) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
    
        // If an array was passed in, assume that it is an array of form elements.
        if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
            // Serialize the form elements
            jQuery.each( a, function() {
                add( this.name, this.value );
            });
    
        } else {
            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for ( prefix in a ) {
                buildParams( prefix, a[ prefix ], traditional, add );
            }
        }
    
        // Return the resulting serialization
        return s.join( "&" ).replace( r20, "+" );
    };
    
    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param( this.serializeArray() );
        },
        serializeArray: function() {
            return this.map(function() {
                // Can add propHook for "elements" to filter or add form elements
                var elements = jQuery.prop( this, "elements" );
                return elements ? jQuery.makeArray( elements ) : this;
            })
            .filter(function() {
                var type = this.type;
    
                // Use .is( ":disabled" ) so that fieldset[disabled] works
                return this.name && !jQuery( this ).is( ":disabled" ) &&
                    rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
                    ( this.checked || !rcheckableType.test( type ) );
            })
            .map(function( i, elem ) {
                var val = jQuery( this ).val();
    
                return val == null ?
                    null :
                    jQuery.isArray( val ) ?
                        jQuery.map( val, function( val ) {
                            return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
                        }) :
                        { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
            }).get();
        }
    });
    
    
    jQuery.ajaxSettings.xhr = function() {
        try {
            return new XMLHttpRequest();
        } catch( e ) {}
    };
    
    var xhrId = 0,
        xhrCallbacks = {},
        xhrSuccessStatus = {
            // file protocol always yields status code 0, assume 200
            0: 200,
            // Support: IE9
            // #1450: sometimes IE returns 1223 when it should be 204
            1223: 204
        },
        xhrSupported = jQuery.ajaxSettings.xhr();
    
    // Support: IE9
    // Open requests must be manually aborted on unload (#5280)
    // See https://support.microsoft.com/kb/2856746 for more info
    if ( window.attachEvent ) {
        window.attachEvent( "onunload", function() {
            for ( var key in xhrCallbacks ) {
                xhrCallbacks[ key ]();
            }
        });
    }
    
    support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
    support.ajax = xhrSupported = !!xhrSupported;
    
    jQuery.ajaxTransport(function( options ) {
        var callback;
    
        // Cross domain only allowed if supported through XMLHttpRequest
        if ( support.cors || xhrSupported && !options.crossDomain ) {
            return {
                send: function( headers, complete ) {
                    var i,
                        xhr = options.xhr(),
                        id = ++xhrId;
    
                    xhr.open( options.type, options.url, options.async, options.username, options.password );
    
                    // Apply custom fields if provided
                    if ( options.xhrFields ) {
                        for ( i in options.xhrFields ) {
                            xhr[ i ] = options.xhrFields[ i ];
                        }
                    }
    
                    // Override mime type if needed
                    if ( options.mimeType && xhr.overrideMimeType ) {
                        xhr.overrideMimeType( options.mimeType );
                    }
    
                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if ( !options.crossDomain && !headers["X-Requested-With"] ) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }
    
                    // Set headers
                    for ( i in headers ) {
                        xhr.setRequestHeader( i, headers[ i ] );
                    }
    
                    // Callback
                    callback = function( type ) {
                        return function() {
                            if ( callback ) {
                                delete xhrCallbacks[ id ];
                                callback = xhr.onload = xhr.onerror = null;
    
                                if ( type === "abort" ) {
                                    xhr.abort();
                                } else if ( type === "error" ) {
                                    complete(
                                        // file: protocol always yields status 0; see #8605, #14207
                                        xhr.status,
                                        xhr.statusText
                                    );
                                } else {
                                    complete(
                                        xhrSuccessStatus[ xhr.status ] || xhr.status,
                                        xhr.statusText,
                                        // Support: IE9
                                        // Accessing binary-data responseText throws an exception
                                        // (#11426)
                                        typeof xhr.responseText === "string" ? {
                                            text: xhr.responseText
                                        } : undefined,
                                        xhr.getAllResponseHeaders()
                                    );
                                }
                            }
                        };
                    };
    
                    // Listen to events
                    xhr.onload = callback();
                    xhr.onerror = callback("error");
    
                    // Create the abort callback
                    callback = xhrCallbacks[ id ] = callback("abort");
    
                    try {
                        // Do send the request (this may raise an exception)
                        xhr.send( options.hasContent && options.data || null );
                    } catch ( e ) {
                        // #14683: Only rethrow if this hasn't been notified as an error yet
                        if ( callback ) {
                            throw e;
                        }
                    }
                },
    
                abort: function() {
                    if ( callback ) {
                        callback();
                    }
                }
            };
        }
    });
    
    
    
    
    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /(?:java|ecma)script/
        },
        converters: {
            "text script": function( text ) {
                jQuery.globalEval( text );
                return text;
            }
        }
    });
    
    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter( "script", function( s ) {
        if ( s.cache === undefined ) {
            s.cache = false;
        }
        if ( s.crossDomain ) {
            s.type = "GET";
        }
    });
    
    // Bind script tag hack transport
    jQuery.ajaxTransport( "script", function( s ) {
        // This transport only deals with cross domain requests
        if ( s.crossDomain ) {
            var script, callback;
            return {
                send: function( _, complete ) {
                    script = jQuery("<script>").prop({
                        async: true,
                        charset: s.scriptCharset,
                        src: s.url
                    }).on(
                        "load error",
                        callback = function( evt ) {
                            script.remove();
                            callback = null;
                            if ( evt ) {
                                complete( evt.type === "error" ? 404 : 200, evt.type );
                            }
                        }
                    );
                    document.head.appendChild( script[ 0 ] );
                },
                abort: function() {
                    if ( callback ) {
                        callback();
                    }
                }
            };
        }
    });
    
    
    
    
    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;
    
    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
            this[ callback ] = true;
            return callback;
        }
    });
    
    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
    
        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
                "url" :
                typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
            );
    
        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
    
            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
                s.jsonpCallback() :
                s.jsonpCallback;
    
            // Insert callback into url or form data
            if ( jsonProp ) {
                s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
            } else if ( s.jsonp !== false ) {
                s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
            }
    
            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if ( !responseContainer ) {
                    jQuery.error( callbackName + " was not called" );
                }
                return responseContainer[ 0 ];
            };
    
            // force json dataType
            s.dataTypes[ 0 ] = "json";
    
            // Install callback
            overwritten = window[ callbackName ];
            window[ callbackName ] = function() {
                responseContainer = arguments;
            };
    
            // Clean-up function (fires after converters)
            jqXHR.always(function() {
                // Restore preexisting value
                window[ callbackName ] = overwritten;
    
                // Save back as free
                if ( s[ callbackName ] ) {
                    // make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;
    
                    // save the callback name for future use
                    oldCallbacks.push( callbackName );
                }
    
                // Call if it was a function and we have a response
                if ( responseContainer && jQuery.isFunction( overwritten ) ) {
                    overwritten( responseContainer[ 0 ] );
                }
    
                responseContainer = overwritten = undefined;
            });
    
            // Delegate to script
            return "script";
        }
    });
    
    
    
    
    // data: string of html
    // context (optional): If specified, the fragment will be created in this context, defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function( data, context, keepScripts ) {
        if ( !data || typeof data !== "string" ) {
            return null;
        }
        if ( typeof context === "boolean" ) {
            keepScripts = context;
            context = false;
        }
        context = context || document;
    
        var parsed = rsingleTag.exec( data ),
            scripts = !keepScripts && [];
    
        // Single tag
        if ( parsed ) {
            return [ context.createElement( parsed[1] ) ];
        }
    
        parsed = jQuery.buildFragment( [ data ], context, scripts );
    
        if ( scripts && scripts.length ) {
            jQuery( scripts ).remove();
        }
    
        return jQuery.merge( [], parsed.childNodes );
    };
    
    
    // Keep a copy of the old load method
    var _load = jQuery.fn.load;
    
    /**
     * Load a url into a page
     */
    jQuery.fn.load = function( url, params, callback ) {
        if ( typeof url !== "string" && _load ) {
            return _load.apply( this, arguments );
        }
    
        var selector, type, response,
            self = this,
            off = url.indexOf(" ");
    
        if ( off >= 0 ) {
            selector = jQuery.trim( url.slice( off ) );
            url = url.slice( 0, off );
        }
    
        // If it's a function
        if ( jQuery.isFunction( params ) ) {
    
            // We assume that it's the callback
            callback = params;
            params = undefined;
    
        // Otherwise, build a param string
        } else if ( params && typeof params === "object" ) {
            type = "POST";
        }
    
        // If we have elements to modify, make the request
        if ( self.length > 0 ) {
            jQuery.ajax({
                url: url,
    
                // if "type" variable is undefined, then "GET" method will be used
                type: type,
                dataType: "html",
                data: params
            }).done(function( responseText ) {
    
                // Save response for use in complete callback
                response = arguments;
    
                self.html( selector ?
    
                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :
    
                    // Otherwise use the full result
                    responseText );
    
            }).complete( callback && function( jqXHR, status ) {
                self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
            });
        }
    
        return this;
    };
    
    
    
    
    // Attach a bunch of functions for handling common AJAX events
    jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
        jQuery.fn[ type ] = function( fn ) {
            return this.on( type, fn );
        };
    });
    
    
    
    
    jQuery.expr.filters.animated = function( elem ) {
        return jQuery.grep(jQuery.timers, function( fn ) {
            return elem === fn.elem;
        }).length;
    };
    
    
    
    
    var docElem = window.document.documentElement;
    
    /**
     * Gets a window from an element
     */
    function getWindow( elem ) {
        return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
    }
    
    jQuery.offset = {
        setOffset: function( elem, options, i ) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                position = jQuery.css( elem, "position" ),
                curElem = jQuery( elem ),
                props = {};
    
            // Set position first, in-case top/left are set even on static elem
            if ( position === "static" ) {
                elem.style.position = "relative";
            }
    
            curOffset = curElem.offset();
            curCSSTop = jQuery.css( elem, "top" );
            curCSSLeft = jQuery.css( elem, "left" );
            calculatePosition = ( position === "absolute" || position === "fixed" ) &&
                ( curCSSTop + curCSSLeft ).indexOf("auto") > -1;
    
            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if ( calculatePosition ) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
    
            } else {
                curTop = parseFloat( curCSSTop ) || 0;
                curLeft = parseFloat( curCSSLeft ) || 0;
            }
    
            if ( jQuery.isFunction( options ) ) {
                options = options.call( elem, i, curOffset );
            }
    
            if ( options.top != null ) {
                props.top = ( options.top - curOffset.top ) + curTop;
            }
            if ( options.left != null ) {
                props.left = ( options.left - curOffset.left ) + curLeft;
            }
    
            if ( "using" in options ) {
                options.using.call( elem, props );
    
            } else {
                curElem.css( props );
            }
        }
    };
    
    jQuery.fn.extend({
        offset: function( options ) {
            if ( arguments.length ) {
                return options === undefined ?
                    this :
                    this.each(function( i ) {
                        jQuery.offset.setOffset( this, options, i );
                    });
            }
    
            var docElem, win,
                elem = this[ 0 ],
                box = { top: 0, left: 0 },
                doc = elem && elem.ownerDocument;
    
            if ( !doc ) {
                return;
            }
    
            docElem = doc.documentElement;
    
            // Make sure it's not a disconnected DOM node
            if ( !jQuery.contains( docElem, elem ) ) {
                return box;
            }
    
            // Support: BlackBerry 5, iOS 3 (original iPhone)
            // If we don't have gBCR, just use 0,0 rather than error
            if ( typeof elem.getBoundingClientRect !== strundefined ) {
                box = elem.getBoundingClientRect();
            }
            win = getWindow( doc );
            return {
                top: box.top + win.pageYOffset - docElem.clientTop,
                left: box.left + win.pageXOffset - docElem.clientLeft
            };
        },
    
        position: function() {
            if ( !this[ 0 ] ) {
                return;
            }
    
            var offsetParent, offset,
                elem = this[ 0 ],
                parentOffset = { top: 0, left: 0 };
    
            // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
            if ( jQuery.css( elem, "position" ) === "fixed" ) {
                // Assume getBoundingClientRect is there when computed position is fixed
                offset = elem.getBoundingClientRect();
    
            } else {
                // Get *real* offsetParent
                offsetParent = this.offsetParent();
    
                // Get correct offsets
                offset = this.offset();
                if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
                    parentOffset = offsetParent.offset();
                }
    
                // Add offsetParent borders
                parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
                parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
            }
    
            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
                left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
            };
        },
    
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent || docElem;
    
                while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
                    offsetParent = offsetParent.offsetParent;
                }
    
                return offsetParent || docElem;
            });
        }
    });
    
    // Create scrollLeft and scrollTop methods
    jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
        var top = "pageYOffset" === prop;
    
        jQuery.fn[ method ] = function( val ) {
            return access( this, function( elem, method, val ) {
                var win = getWindow( elem );
    
                if ( val === undefined ) {
                    return win ? win[ prop ] : elem[ method ];
                }
    
                if ( win ) {
                    win.scrollTo(
                        !top ? val : window.pageXOffset,
                        top ? val : window.pageYOffset
                    );
    
                } else {
                    elem[ method ] = val;
                }
            }, method, val, arguments.length, null );
        };
    });
    
    // Support: Safari<7+, Chrome<37+
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each( [ "top", "left" ], function( i, prop ) {
        jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
            function( elem, computed ) {
                if ( computed ) {
                    computed = curCSS( elem, prop );
                    // If curCSS returns percentage, fallback to offset
                    return rnumnonpx.test( computed ) ?
                        jQuery( elem ).position()[ prop ] + "px" :
                        computed;
                }
            }
        );
    });
    
    
    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
        jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
            // Margin is only for outerHeight, outerWidth
            jQuery.fn[ funcName ] = function( margin, value ) {
                var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
                    extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
    
                return access( this, function( elem, type, value ) {
                    var doc;
    
                    if ( jQuery.isWindow( elem ) ) {
                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                        // isn't a whole lot we can do. See pull request at this URL for discussion:
                        // https://github.com/jquery/jquery/pull/764
                        return elem.document.documentElement[ "client" + name ];
                    }
    
                    // Get document width or height
                    if ( elem.nodeType === 9 ) {
                        doc = elem.documentElement;
    
                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                        // whichever is greatest
                        return Math.max(
                            elem.body[ "scroll" + name ], doc[ "scroll" + name ],
                            elem.body[ "offset" + name ], doc[ "offset" + name ],
                            doc[ "client" + name ]
                        );
                    }
    
                    return value === undefined ?
                        // Get width or height on the element, requesting but not forcing parseFloat
                        jQuery.css( elem, type, extra ) :
    
                        // Set width or height on the element
                        jQuery.style( elem, type, value, extra );
                }, type, chainable ? margin : undefined, chainable, null );
            };
        });
    });
    
    
    // The number of elements contained in the matched element set
    jQuery.fn.size = function() {
        return this.length;
    };
    
    jQuery.fn.andSelf = jQuery.fn.addBack;
    
    
    
    
    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.
    
    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
    
    if ( typeof define === "function" && define.amd ) {
        define( "jquery", [], function() {
            return jQuery;
        });
    }
    
    
    
    
    var
        // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,
    
        // Map over the $ in case of overwrite
        _$ = window.$;
    
    jQuery.noConflict = function( deep ) {
        if ( window.$ === jQuery ) {
            window.$ = _$;
        }
    
        if ( deep && window.jQuery === jQuery ) {
            window.jQuery = _jQuery;
        }
    
        return jQuery;
    };
    
    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if ( typeof noGlobal === strundefined ) {
        window.jQuery = window.$ = jQuery;
    }
    
    
    
    
    return jQuery;
    
    }));
    
    },{}],2:[function(require,module,exports){
    var self = self || {};// File:src/Three.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    var THREE = { REVISION: '69' };
    
    // browserify support
    
    if ( typeof module === 'object' ) {
    
        module.exports = THREE;
    
    }
    
    // polyfills
    
    if ( Math.sign === undefined ) {
    
        Math.sign = function ( x ) {
    
            return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : 0;
    
        };
    
    }
    
    // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button
    
    THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
    
    // GL STATE CONSTANTS
    
    THREE.CullFaceNone = 0;
    THREE.CullFaceBack = 1;
    THREE.CullFaceFront = 2;
    THREE.CullFaceFrontBack = 3;
    
    THREE.FrontFaceDirectionCW = 0;
    THREE.FrontFaceDirectionCCW = 1;
    
    // SHADOWING TYPES
    
    THREE.BasicShadowMap = 0;
    THREE.PCFShadowMap = 1;
    THREE.PCFSoftShadowMap = 2;
    
    // MATERIAL CONSTANTS
    
    // side
    
    THREE.FrontSide = 0;
    THREE.BackSide = 1;
    THREE.DoubleSide = 2;
    
    // shading
    
    THREE.NoShading = 0;
    THREE.FlatShading = 1;
    THREE.SmoothShading = 2;
    
    // colors
    
    THREE.NoColors = 0;
    THREE.FaceColors = 1;
    THREE.VertexColors = 2;
    
    // blending modes
    
    THREE.NoBlending = 0;
    THREE.NormalBlending = 1;
    THREE.AdditiveBlending = 2;
    THREE.SubtractiveBlending = 3;
    THREE.MultiplyBlending = 4;
    THREE.CustomBlending = 5;
    
    // custom blending equations
    // (numbers start from 100 not to clash with other
    //  mappings to OpenGL constants defined in Texture.js)
    
    THREE.AddEquation = 100;
    THREE.SubtractEquation = 101;
    THREE.ReverseSubtractEquation = 102;
    THREE.MinEquation = 103;
    THREE.MaxEquation = 104;
    
    // custom blending destination factors
    
    THREE.ZeroFactor = 200;
    THREE.OneFactor = 201;
    THREE.SrcColorFactor = 202;
    THREE.OneMinusSrcColorFactor = 203;
    THREE.SrcAlphaFactor = 204;
    THREE.OneMinusSrcAlphaFactor = 205;
    THREE.DstAlphaFactor = 206;
    THREE.OneMinusDstAlphaFactor = 207;
    
    // custom blending source factors
    
    //THREE.ZeroFactor = 200;
    //THREE.OneFactor = 201;
    //THREE.SrcAlphaFactor = 204;
    //THREE.OneMinusSrcAlphaFactor = 205;
    //THREE.DstAlphaFactor = 206;
    //THREE.OneMinusDstAlphaFactor = 207;
    THREE.DstColorFactor = 208;
    THREE.OneMinusDstColorFactor = 209;
    THREE.SrcAlphaSaturateFactor = 210;
    
    
    // TEXTURE CONSTANTS
    
    THREE.MultiplyOperation = 0;
    THREE.MixOperation = 1;
    THREE.AddOperation = 2;
    
    // Mapping modes
    
    THREE.UVMapping = function () {};
    
    THREE.CubeReflectionMapping = function () {};
    THREE.CubeRefractionMapping = function () {};
    
    THREE.SphericalReflectionMapping = function () {};
    THREE.SphericalRefractionMapping = function () {};
    
    // Wrapping modes
    
    THREE.RepeatWrapping = 1000;
    THREE.ClampToEdgeWrapping = 1001;
    THREE.MirroredRepeatWrapping = 1002;
    
    // Filters
    
    THREE.NearestFilter = 1003;
    THREE.NearestMipMapNearestFilter = 1004;
    THREE.NearestMipMapLinearFilter = 1005;
    THREE.LinearFilter = 1006;
    THREE.LinearMipMapNearestFilter = 1007;
    THREE.LinearMipMapLinearFilter = 1008;
    
    // Data types
    
    THREE.UnsignedByteType = 1009;
    THREE.ByteType = 1010;
    THREE.ShortType = 1011;
    THREE.UnsignedShortType = 1012;
    THREE.IntType = 1013;
    THREE.UnsignedIntType = 1014;
    THREE.FloatType = 1015;
    
    // Pixel types
    
    //THREE.UnsignedByteType = 1009;
    THREE.UnsignedShort4444Type = 1016;
    THREE.UnsignedShort5551Type = 1017;
    THREE.UnsignedShort565Type = 1018;
    
    // Pixel formats
    
    THREE.AlphaFormat = 1019;
    THREE.RGBFormat = 1020;
    THREE.RGBAFormat = 1021;
    THREE.LuminanceFormat = 1022;
    THREE.LuminanceAlphaFormat = 1023;
    
    // DDS / ST3C Compressed texture formats
    
    THREE.RGB_S3TC_DXT1_Format = 2001;
    THREE.RGBA_S3TC_DXT1_Format = 2002;
    THREE.RGBA_S3TC_DXT3_Format = 2003;
    THREE.RGBA_S3TC_DXT5_Format = 2004;
    
    
    // PVRTC compressed texture formats
    
    THREE.RGB_PVRTC_4BPPV1_Format = 2100;
    THREE.RGB_PVRTC_2BPPV1_Format = 2101;
    THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
    THREE.RGBA_PVRTC_2BPPV1_Format = 2103;
    
    
    // File:src/math/Color.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Color = function ( color ) {
    
        if ( arguments.length === 3 ) {
    
            return this.setRGB( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );
    
        }
    
        return this.set( color )
    
    };
    
    THREE.Color.prototype = {
    
        constructor: THREE.Color,
    
        r: 1, g: 1, b: 1,
    
        set: function ( value ) {
    
            if ( value instanceof THREE.Color ) {
    
                this.copy( value );
    
            } else if ( typeof value === 'number' ) {
    
                this.setHex( value );
    
            } else if ( typeof value === 'string' ) {
    
                this.setStyle( value );
    
            }
    
            return this;
    
        },
    
        setHex: function ( hex ) {
    
            hex = Math.floor( hex );
    
            this.r = ( hex >> 16 & 255 ) / 255;
            this.g = ( hex >> 8 & 255 ) / 255;
            this.b = ( hex & 255 ) / 255;
    
            return this;
    
        },
    
        setRGB: function ( r, g, b ) {
    
            this.r = r;
            this.g = g;
            this.b = b;
    
            return this;
    
        },
    
        setHSL: function ( h, s, l ) {
    
            // h,s,l ranges are in 0.0 - 1.0
    
            if ( s === 0 ) {
    
                this.r = this.g = this.b = l;
    
            } else {
    
                var hue2rgb = function ( p, q, t ) {
    
                    if ( t < 0 ) t += 1;
                    if ( t > 1 ) t -= 1;
                    if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
                    if ( t < 1 / 2 ) return q;
                    if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
                    return p;
    
                };
    
                var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
                var q = ( 2 * l ) - p;
    
                this.r = hue2rgb( q, p, h + 1 / 3 );
                this.g = hue2rgb( q, p, h );
                this.b = hue2rgb( q, p, h - 1 / 3 );
    
            }
    
            return this;
    
        },
    
        setStyle: function ( style ) {
    
            // rgb(255,0,0)
    
            if ( /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test( style ) ) {
    
                var color = /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec( style );
    
                this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
                this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
                this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
    
                return this;
    
            }
    
            // rgb(100%,0%,0%)
    
            if ( /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test( style ) ) {
    
                var color = /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec( style );
    
                this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
                this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
                this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
    
                return this;
    
            }
    
            // #ff0000
    
            if ( /^\#([0-9a-f]{6})$/i.test( style ) ) {
    
                var color = /^\#([0-9a-f]{6})$/i.exec( style );
    
                this.setHex( parseInt( color[ 1 ], 16 ) );
    
                return this;
    
            }
    
            // #f00
    
            if ( /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {
    
                var color = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );
    
                this.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );
    
                return this;
    
            }
    
            // red
    
            if ( /^(\w+)$/i.test( style ) ) {
    
                this.setHex( THREE.ColorKeywords[ style ] );
    
                return this;
    
            }
    
    
        },
    
        copy: function ( color ) {
    
            this.r = color.r;
            this.g = color.g;
            this.b = color.b;
    
            return this;
    
        },
    
        copyGammaToLinear: function ( color ) {
    
            this.r = color.r * color.r;
            this.g = color.g * color.g;
            this.b = color.b * color.b;
    
            return this;
    
        },
    
        copyLinearToGamma: function ( color ) {
    
            this.r = Math.sqrt( color.r );
            this.g = Math.sqrt( color.g );
            this.b = Math.sqrt( color.b );
    
            return this;
    
        },
    
        convertGammaToLinear: function () {
    
            var r = this.r, g = this.g, b = this.b;
    
            this.r = r * r;
            this.g = g * g;
            this.b = b * b;
    
            return this;
    
        },
    
        convertLinearToGamma: function () {
    
            this.r = Math.sqrt( this.r );
            this.g = Math.sqrt( this.g );
            this.b = Math.sqrt( this.b );
    
            return this;
    
        },
    
        getHex: function () {
    
            return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
    
        },
    
        getHexString: function () {
    
            return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );
    
        },
    
        getHSL: function ( optionalTarget ) {
    
            // h,s,l ranges are in 0.0 - 1.0
    
            var hsl = optionalTarget || { h: 0, s: 0, l: 0 };
    
            var r = this.r, g = this.g, b = this.b;
    
            var max = Math.max( r, g, b );
            var min = Math.min( r, g, b );
    
            var hue, saturation;
            var lightness = ( min + max ) / 2.0;
    
            if ( min === max ) {
    
                hue = 0;
                saturation = 0;
    
            } else {
    
                var delta = max - min;
    
                saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
    
                switch ( max ) {
    
                    case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
                    case g: hue = ( b - r ) / delta + 2; break;
                    case b: hue = ( r - g ) / delta + 4; break;
    
                }
    
                hue /= 6;
    
            }
    
            hsl.h = hue;
            hsl.s = saturation;
            hsl.l = lightness;
    
            return hsl;
    
        },
    
        getStyle: function () {
    
            return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';
    
        },
    
        offsetHSL: function ( h, s, l ) {
    
            var hsl = this.getHSL();
    
            hsl.h += h; hsl.s += s; hsl.l += l;
    
            this.setHSL( hsl.h, hsl.s, hsl.l );
    
            return this;
    
        },
    
        add: function ( color ) {
    
            this.r += color.r;
            this.g += color.g;
            this.b += color.b;
    
            return this;
    
        },
    
        addColors: function ( color1, color2 ) {
    
            this.r = color1.r + color2.r;
            this.g = color1.g + color2.g;
            this.b = color1.b + color2.b;
    
            return this;
    
        },
    
        addScalar: function ( s ) {
    
            this.r += s;
            this.g += s;
            this.b += s;
    
            return this;
    
        },
    
        multiply: function ( color ) {
    
            this.r *= color.r;
            this.g *= color.g;
            this.b *= color.b;
    
            return this;
    
        },
    
        multiplyScalar: function ( s ) {
    
            this.r *= s;
            this.g *= s;
            this.b *= s;
    
            return this;
    
        },
    
        lerp: function ( color, alpha ) {
    
            this.r += ( color.r - this.r ) * alpha;
            this.g += ( color.g - this.g ) * alpha;
            this.b += ( color.b - this.b ) * alpha;
    
            return this;
    
        },
    
        equals: function ( c ) {
    
            return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
    
        },
    
        fromArray: function ( array ) {
    
            this.r = array[ 0 ];
            this.g = array[ 1 ];
            this.b = array[ 2 ];
    
            return this;
    
        },
    
        toArray: function () {
    
            return [ this.r, this.g, this.b ];
    
        },
    
        clone: function () {
    
            return new THREE.Color().setRGB( this.r, this.g, this.b );
    
        }
    
    };
    
    THREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
    
    // File:src/math/Quaternion.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     * @author WestLangley / http://github.com/WestLangley
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Quaternion = function ( x, y, z, w ) {
    
        this._x = x || 0;
        this._y = y || 0;
        this._z = z || 0;
        this._w = ( w !== undefined ) ? w : 1;
    
    };
    
    THREE.Quaternion.prototype = {
    
        constructor: THREE.Quaternion,
    
        _x: 0,_y: 0, _z: 0, _w: 0,
    
        get x () {
    
            return this._x;
    
        },
    
        set x ( value ) {
    
            this._x = value;
            this.onChangeCallback();
    
        },
    
        get y () {
    
            return this._y;
    
        },
    
        set y ( value ) {
    
            this._y = value;
            this.onChangeCallback();
    
        },
    
        get z () {
    
            return this._z;
    
        },
    
        set z ( value ) {
    
            this._z = value;
            this.onChangeCallback();
    
        },
    
        get w () {
    
            return this._w;
    
        },
    
        set w ( value ) {
    
            this._w = value;
            this.onChangeCallback();
    
        },
    
        set: function ( x, y, z, w ) {
    
            this._x = x;
            this._y = y;
            this._z = z;
            this._w = w;
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        copy: function ( quaternion ) {
    
            this._x = quaternion.x;
            this._y = quaternion.y;
            this._z = quaternion.z;
            this._w = quaternion.w;
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        setFromEuler: function ( euler, update ) {
    
            if ( euler instanceof THREE.Euler === false ) {
    
                throw new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
            }
    
            // http://www.mathworks.com/matlabcentral/fileexchange/
            // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
            //	content/SpinCalc.m
    
            var c1 = Math.cos( euler._x / 2 );
            var c2 = Math.cos( euler._y / 2 );
            var c3 = Math.cos( euler._z / 2 );
            var s1 = Math.sin( euler._x / 2 );
            var s2 = Math.sin( euler._y / 2 );
            var s3 = Math.sin( euler._z / 2 );
    
            if ( euler.order === 'XYZ' ) {
    
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
    
            } else if ( euler.order === 'YXZ' ) {
    
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
    
            } else if ( euler.order === 'ZXY' ) {
    
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
    
            } else if ( euler.order === 'ZYX' ) {
    
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
    
            } else if ( euler.order === 'YZX' ) {
    
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
    
            } else if ( euler.order === 'XZY' ) {
    
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
    
            }
    
            if ( update !== false ) this.onChangeCallback();
    
            return this;
    
        },
    
        setFromAxisAngle: function ( axis, angle ) {
    
            // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
    
            // assumes axis is normalized
    
            var halfAngle = angle / 2, s = Math.sin( halfAngle );
    
            this._x = axis.x * s;
            this._y = axis.y * s;
            this._z = axis.z * s;
            this._w = Math.cos( halfAngle );
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        setFromRotationMatrix: function ( m ) {
    
            // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
    
            // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    
            var te = m.elements,
    
                m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
                m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
                m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
    
                trace = m11 + m22 + m33,
                s;
    
            if ( trace > 0 ) {
    
                s = 0.5 / Math.sqrt( trace + 1.0 );
    
                this._w = 0.25 / s;
                this._x = ( m32 - m23 ) * s;
                this._y = ( m13 - m31 ) * s;
                this._z = ( m21 - m12 ) * s;
    
            } else if ( m11 > m22 && m11 > m33 ) {
    
                s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
    
                this._w = ( m32 - m23 ) / s;
                this._x = 0.25 * s;
                this._y = ( m12 + m21 ) / s;
                this._z = ( m13 + m31 ) / s;
    
            } else if ( m22 > m33 ) {
    
                s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
    
                this._w = ( m13 - m31 ) / s;
                this._x = ( m12 + m21 ) / s;
                this._y = 0.25 * s;
                this._z = ( m23 + m32 ) / s;
    
            } else {
    
                s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
    
                this._w = ( m21 - m12 ) / s;
                this._x = ( m13 + m31 ) / s;
                this._y = ( m23 + m32 ) / s;
                this._z = 0.25 * s;
    
            }
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        setFromUnitVectors: function () {
    
            // http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final
    
            // assumes direction vectors vFrom and vTo are normalized
    
            var v1, r;
    
            var EPS = 0.000001;
    
            return function ( vFrom, vTo ) {
    
                if ( v1 === undefined ) v1 = new THREE.Vector3();
    
                r = vFrom.dot( vTo ) + 1;
    
                if ( r < EPS ) {
    
                    r = 0;
    
                    if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
    
                        v1.set( - vFrom.y, vFrom.x, 0 );
    
                    } else {
    
                        v1.set( 0, - vFrom.z, vFrom.y );
    
                    }
    
                } else {
    
                    v1.crossVectors( vFrom, vTo );
    
                }
    
                this._x = v1.x;
                this._y = v1.y;
                this._z = v1.z;
                this._w = r;
    
                this.normalize();
    
                return this;
    
            }
    
        }(),
    
        inverse: function () {
    
            this.conjugate().normalize();
    
            return this;
    
        },
    
        conjugate: function () {
    
            this._x *= - 1;
            this._y *= - 1;
            this._z *= - 1;
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        dot: function ( v ) {
    
            return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    
        },
    
        lengthSq: function () {
    
            return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    
        },
    
        length: function () {
    
            return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
    
        },
    
        normalize: function () {
    
            var l = this.length();
    
            if ( l === 0 ) {
    
                this._x = 0;
                this._y = 0;
                this._z = 0;
                this._w = 1;
    
            } else {
    
                l = 1 / l;
    
                this._x = this._x * l;
                this._y = this._y * l;
                this._z = this._z * l;
                this._w = this._w * l;
    
            }
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        multiply: function ( q, p ) {
    
            if ( p !== undefined ) {
    
                console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
                return this.multiplyQuaternions( q, p );
    
            }
    
            return this.multiplyQuaternions( this, q );
    
        },
    
        multiplyQuaternions: function ( a, b ) {
    
            // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
    
            var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
            var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
    
            this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
            this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
            this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
            this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        multiplyVector3: function ( vector ) {
    
            console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
            return vector.applyQuaternion( this );
    
        },
    
        slerp: function ( qb, t ) {
    
            if ( t === 0 ) return this;
            if ( t === 1 ) return this.copy( qb );
    
            var x = this._x, y = this._y, z = this._z, w = this._w;
    
            // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
    
            var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
    
            if ( cosHalfTheta < 0 ) {
    
                this._w = - qb._w;
                this._x = - qb._x;
                this._y = - qb._y;
                this._z = - qb._z;
    
                cosHalfTheta = - cosHalfTheta;
    
            } else {
    
                this.copy( qb );
    
            }
    
            if ( cosHalfTheta >= 1.0 ) {
    
                this._w = w;
                this._x = x;
                this._y = y;
                this._z = z;
    
                return this;
    
            }
    
            var halfTheta = Math.acos( cosHalfTheta );
            var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );
    
            if ( Math.abs( sinHalfTheta ) < 0.001 ) {
    
                this._w = 0.5 * ( w + this._w );
                this._x = 0.5 * ( x + this._x );
                this._y = 0.5 * ( y + this._y );
                this._z = 0.5 * ( z + this._z );
    
                return this;
    
            }
    
            var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
            ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
    
            this._w = ( w * ratioA + this._w * ratioB );
            this._x = ( x * ratioA + this._x * ratioB );
            this._y = ( y * ratioA + this._y * ratioB );
            this._z = ( z * ratioA + this._z * ratioB );
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        equals: function ( quaternion ) {
    
            return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
    
        },
    
        fromArray: function ( array, offset ) {
    
            if ( offset === undefined ) offset = 0;
    
            this._x = array[ offset ];
            this._y = array[ offset + 1 ];
            this._z = array[ offset + 2 ];
            this._w = array[ offset + 3 ];
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        toArray: function ( array, offset ) {
    
            if ( array === undefined ) array = [];
            if ( offset === undefined ) offset = 0;
    
            array[ offset ] = this._x;
            array[ offset + 1 ] = this._y;
            array[ offset + 2 ] = this._z;
            array[ offset + 3 ] = this._w;
    
            return array;
    
        },
    
        onChange: function ( callback ) {
    
            this.onChangeCallback = callback;
    
            return this;
    
        },
    
        onChangeCallback: function () {},
    
        clone: function () {
    
            return new THREE.Quaternion( this._x, this._y, this._z, this._w );
    
        }
    
    };
    
    THREE.Quaternion.slerp = function ( qa, qb, qm, t ) {
    
        return qm.copy( qa ).slerp( qb, t );
    
    }
    
    // File:src/math/Vector2.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author philogb / http://blog.thejit.org/
     * @author egraether / http://egraether.com/
     * @author zz85 / http://www.lab4games.net/zz85/blog
     */
    
    THREE.Vector2 = function ( x, y ) {
    
        this.x = x || 0;
        this.y = y || 0;
    
    };
    
    THREE.Vector2.prototype = {
    
        constructor: THREE.Vector2,
    
        set: function ( x, y ) {
    
            this.x = x;
            this.y = y;
    
            return this;
    
        },
    
        setX: function ( x ) {
    
            this.x = x;
    
            return this;
    
        },
    
        setY: function ( y ) {
    
            this.y = y;
    
            return this;
    
        },
    
        setComponent: function ( index, value ) {
    
            switch ( index ) {
    
                case 0: this.x = value; break;
                case 1: this.y = value; break;
                default: throw new Error( 'index is out of range: ' + index );
    
            }
    
        },
    
        getComponent: function ( index ) {
    
            switch ( index ) {
    
                case 0: return this.x;
                case 1: return this.y;
                default: throw new Error( 'index is out of range: ' + index );
    
            }
    
        },
    
        copy: function ( v ) {
    
            this.x = v.x;
            this.y = v.y;
    
            return this;
    
        },
    
        add: function ( v, w ) {
    
            if ( w !== undefined ) {
    
                console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                return this.addVectors( v, w );
    
            }
    
            this.x += v.x;
            this.y += v.y;
    
            return this;
    
        },
    
        addVectors: function ( a, b ) {
    
            this.x = a.x + b.x;
            this.y = a.y + b.y;
    
            return this;
    
        },
    
        addScalar: function ( s ) {
    
            this.x += s;
            this.y += s;
    
            return this;
    
        },
    
        sub: function ( v, w ) {
    
            if ( w !== undefined ) {
    
                console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                return this.subVectors( v, w );
    
            }
    
            this.x -= v.x;
            this.y -= v.y;
    
            return this;
    
        },
    
        subVectors: function ( a, b ) {
    
            this.x = a.x - b.x;
            this.y = a.y - b.y;
    
            return this;
    
        },
    
        multiply: function ( v ) {
    
            this.x *= v.x;
            this.y *= v.y;
    
            return this;
    
        },
    
        multiplyScalar: function ( s ) {
    
            this.x *= s;
            this.y *= s;
    
            return this;
    
        },
    
        divide: function ( v ) {
    
            this.x /= v.x;
            this.y /= v.y;
    
            return this;
    
        },
    
        divideScalar: function ( scalar ) {
    
            if ( scalar !== 0 ) {
    
                var invScalar = 1 / scalar;
    
                this.x *= invScalar;
                this.y *= invScalar;
    
            } else {
    
                this.x = 0;
                this.y = 0;
    
            }
    
            return this;
    
        },
    
        min: function ( v ) {
    
            if ( this.x > v.x ) {
    
                this.x = v.x;
    
            }
    
            if ( this.y > v.y ) {
    
                this.y = v.y;
    
            }
    
            return this;
    
        },
    
        max: function ( v ) {
    
            if ( this.x < v.x ) {
    
                this.x = v.x;
    
            }
    
            if ( this.y < v.y ) {
    
                this.y = v.y;
    
            }
    
            return this;
    
        },
    
        clamp: function ( min, max ) {
    
            // This function assumes min < max, if this assumption isn't true it will not operate correctly
    
            if ( this.x < min.x ) {
    
                this.x = min.x;
    
            } else if ( this.x > max.x ) {
    
                this.x = max.x;
    
            }
    
            if ( this.y < min.y ) {
    
                this.y = min.y;
    
            } else if ( this.y > max.y ) {
    
                this.y = max.y;
    
            }
    
            return this;
        },
    
        clampScalar: ( function () {
    
            var min, max;
    
            return function ( minVal, maxVal ) {
    
                if ( min === undefined ) {
    
                    min = new THREE.Vector2();
                    max = new THREE.Vector2();
    
                }
    
                min.set( minVal, minVal );
                max.set( maxVal, maxVal );
    
                return this.clamp( min, max );
    
            };
    
        } )(),
    
        floor: function () {
    
            this.x = Math.floor( this.x );
            this.y = Math.floor( this.y );
    
            return this;
    
        },
    
        ceil: function () {
    
            this.x = Math.ceil( this.x );
            this.y = Math.ceil( this.y );
    
            return this;
    
        },
    
        round: function () {
    
            this.x = Math.round( this.x );
            this.y = Math.round( this.y );
    
            return this;
    
        },
    
        roundToZero: function () {
    
            this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
            this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
    
            return this;
    
        },
    
        negate: function () {
    
            this.x = - this.x;
            this.y = - this.y;
    
            return this;
    
        },
    
        dot: function ( v ) {
    
            return this.x * v.x + this.y * v.y;
    
        },
    
        lengthSq: function () {
    
            return this.x * this.x + this.y * this.y;
    
        },
    
        length: function () {
    
            return Math.sqrt( this.x * this.x + this.y * this.y );
    
        },
    
        normalize: function () {
    
            return this.divideScalar( this.length() );
    
        },
    
        distanceTo: function ( v ) {
    
            return Math.sqrt( this.distanceToSquared( v ) );
    
        },
    
        distanceToSquared: function ( v ) {
    
            var dx = this.x - v.x, dy = this.y - v.y;
            return dx * dx + dy * dy;
    
        },
    
        setLength: function ( l ) {
    
            var oldLength = this.length();
    
            if ( oldLength !== 0 && l !== oldLength ) {
    
                this.multiplyScalar( l / oldLength );
            }
    
            return this;
    
        },
    
        lerp: function ( v, alpha ) {
    
            this.x += ( v.x - this.x ) * alpha;
            this.y += ( v.y - this.y ) * alpha;
    
            return this;
    
        },
    
        equals: function ( v ) {
    
            return ( ( v.x === this.x ) && ( v.y === this.y ) );
    
        },
    
        fromArray: function ( array, offset ) {
    
            if ( offset === undefined ) offset = 0;
    
            this.x = array[ offset ];
            this.y = array[ offset + 1 ];
    
            return this;
    
        },
    
        toArray: function ( array, offset ) {
    
            if ( array === undefined ) array = [];
            if ( offset === undefined ) offset = 0;
    
            array[ offset ] = this.x;
            array[ offset + 1 ] = this.y;
    
            return array;
    
        },
    
        clone: function () {
    
            return new THREE.Vector2( this.x, this.y );
    
        }
    
    };
    
    // File:src/math/Vector3.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author *kile / http://kile.stravaganza.org/
     * @author philogb / http://blog.thejit.org/
     * @author mikael emtinger / http://gomo.se/
     * @author egraether / http://egraether.com/
     * @author WestLangley / http://github.com/WestLangley
     */
    
    THREE.Vector3 = function ( x, y, z ) {
    
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
    
    };
    
    THREE.Vector3.prototype = {
    
        constructor: THREE.Vector3,
    
        set: function ( x, y, z ) {
    
            this.x = x;
            this.y = y;
            this.z = z;
    
            return this;
    
        },
    
        setX: function ( x ) {
    
            this.x = x;
    
            return this;
    
        },
    
        setY: function ( y ) {
    
            this.y = y;
    
            return this;
    
        },
    
        setZ: function ( z ) {
    
            this.z = z;
    
            return this;
    
        },
    
        setComponent: function ( index, value ) {
    
            switch ( index ) {
    
                case 0: this.x = value; break;
                case 1: this.y = value; break;
                case 2: this.z = value; break;
                default: throw new Error( 'index is out of range: ' + index );
    
            }
    
        },
    
        getComponent: function ( index ) {
    
            switch ( index ) {
    
                case 0: return this.x;
                case 1: return this.y;
                case 2: return this.z;
                default: throw new Error( 'index is out of range: ' + index );
    
            }
    
        },
    
        copy: function ( v ) {
    
            this.x = v.x;
            this.y = v.y;
            this.z = v.z;
    
            return this;
    
        },
    
        add: function ( v, w ) {
    
            if ( w !== undefined ) {
    
                console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                return this.addVectors( v, w );
    
            }
    
            this.x += v.x;
            this.y += v.y;
            this.z += v.z;
    
            return this;
    
        },
    
        addScalar: function ( s ) {
    
            this.x += s;
            this.y += s;
            this.z += s;
    
            return this;
    
        },
    
        addVectors: function ( a, b ) {
    
            this.x = a.x + b.x;
            this.y = a.y + b.y;
            this.z = a.z + b.z;
    
            return this;
    
        },
    
        sub: function ( v, w ) {
    
            if ( w !== undefined ) {
    
                console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                return this.subVectors( v, w );
    
            }
    
            this.x -= v.x;
            this.y -= v.y;
            this.z -= v.z;
    
            return this;
    
        },
    
        subVectors: function ( a, b ) {
    
            this.x = a.x - b.x;
            this.y = a.y - b.y;
            this.z = a.z - b.z;
    
            return this;
    
        },
    
        multiply: function ( v, w ) {
    
            if ( w !== undefined ) {
    
                console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
                return this.multiplyVectors( v, w );
    
            }
    
            this.x *= v.x;
            this.y *= v.y;
            this.z *= v.z;
    
            return this;
    
        },
    
        multiplyScalar: function ( scalar ) {
    
            this.x *= scalar;
            this.y *= scalar;
            this.z *= scalar;
    
            return this;
    
        },
    
        multiplyVectors: function ( a, b ) {
    
            this.x = a.x * b.x;
            this.y = a.y * b.y;
            this.z = a.z * b.z;
    
            return this;
    
        },
    
        applyEuler: function () {
    
            var quaternion;
    
            return function ( euler ) {
    
                if ( euler instanceof THREE.Euler === false ) {
    
                    console.error( 'THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.' );
    
                }
    
                if ( quaternion === undefined ) quaternion = new THREE.Quaternion();
    
                this.applyQuaternion( quaternion.setFromEuler( euler ) );
    
                return this;
    
            };
    
        }(),
    
        applyAxisAngle: function () {
    
            var quaternion;
    
            return function ( axis, angle ) {
    
                if ( quaternion === undefined ) quaternion = new THREE.Quaternion();
    
                this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );
    
                return this;
    
            };
    
        }(),
    
        applyMatrix3: function ( m ) {
    
            var x = this.x;
            var y = this.y;
            var z = this.z;
    
            var e = m.elements;
    
            this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
            this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
            this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
    
            return this;
    
        },
    
        applyMatrix4: function ( m ) {
    
            // input: THREE.Matrix4 affine matrix
    
            var x = this.x, y = this.y, z = this.z;
    
            var e = m.elements;
    
            this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
            this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
            this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];
    
            return this;
    
        },
    
        applyProjection: function ( m ) {
    
            // input: THREE.Matrix4 projection matrix
    
            var x = this.x, y = this.y, z = this.z;
    
            var e = m.elements;
            var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide
    
            this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
            this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
            this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;
    
            return this;
    
        },
    
        applyQuaternion: function ( q ) {
    
            var x = this.x;
            var y = this.y;
            var z = this.z;
    
            var qx = q.x;
            var qy = q.y;
            var qz = q.z;
            var qw = q.w;
    
            // calculate quat * vector
    
            var ix =  qw * x + qy * z - qz * y;
            var iy =  qw * y + qz * x - qx * z;
            var iz =  qw * z + qx * y - qy * x;
            var iw = - qx * x - qy * y - qz * z;
    
            // calculate result * inverse quat
    
            this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
            this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
            this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
    
            return this;
    
        },
    
        project: function () {
    
            var matrix;
    
            return function ( camera ) {
    
                if ( matrix === undefined ) matrix = new THREE.Matrix4();
    
                matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
                return this.applyProjection( matrix );
    
            };
    
        }(),
    
        unproject: function () {
    
            var matrix;
    
            return function ( camera ) {
    
                if ( matrix === undefined ) matrix = new THREE.Matrix4();
    
                matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
                return this.applyProjection( matrix );
    
            };
    
        }(),
    
        transformDirection: function ( m ) {
    
            // input: THREE.Matrix4 affine matrix
            // vector interpreted as a direction
    
            var x = this.x, y = this.y, z = this.z;
    
            var e = m.elements;
    
            this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
            this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
            this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
    
            this.normalize();
    
            return this;
    
        },
    
        divide: function ( v ) {
    
            this.x /= v.x;
            this.y /= v.y;
            this.z /= v.z;
    
            return this;
    
        },
    
        divideScalar: function ( scalar ) {
    
            if ( scalar !== 0 ) {
    
                var invScalar = 1 / scalar;
    
                this.x *= invScalar;
                this.y *= invScalar;
                this.z *= invScalar;
    
            } else {
    
                this.x = 0;
                this.y = 0;
                this.z = 0;
    
            }
    
            return this;
    
        },
    
        min: function ( v ) {
    
            if ( this.x > v.x ) {
    
                this.x = v.x;
    
            }
    
            if ( this.y > v.y ) {
    
                this.y = v.y;
    
            }
    
            if ( this.z > v.z ) {
    
                this.z = v.z;
    
            }
    
            return this;
    
        },
    
        max: function ( v ) {
    
            if ( this.x < v.x ) {
    
                this.x = v.x;
    
            }
    
            if ( this.y < v.y ) {
    
                this.y = v.y;
    
            }
    
            if ( this.z < v.z ) {
    
                this.z = v.z;
    
            }
    
            return this;
    
        },
    
        clamp: function ( min, max ) {
    
            // This function assumes min < max, if this assumption isn't true it will not operate correctly
    
            if ( this.x < min.x ) {
    
                this.x = min.x;
    
            } else if ( this.x > max.x ) {
    
                this.x = max.x;
    
            }
    
            if ( this.y < min.y ) {
    
                this.y = min.y;
    
            } else if ( this.y > max.y ) {
    
                this.y = max.y;
    
            }
    
            if ( this.z < min.z ) {
    
                this.z = min.z;
    
            } else if ( this.z > max.z ) {
    
                this.z = max.z;
    
            }
    
            return this;
    
        },
    
        clampScalar: ( function () {
    
            var min, max;
    
            return function ( minVal, maxVal ) {
    
                if ( min === undefined ) {
    
                    min = new THREE.Vector3();
                    max = new THREE.Vector3();
    
                }
    
                min.set( minVal, minVal, minVal );
                max.set( maxVal, maxVal, maxVal );
    
                return this.clamp( min, max );
    
            };
    
        } )(),
    
        floor: function () {
    
            this.x = Math.floor( this.x );
            this.y = Math.floor( this.y );
            this.z = Math.floor( this.z );
    
            return this;
    
        },
    
        ceil: function () {
    
            this.x = Math.ceil( this.x );
            this.y = Math.ceil( this.y );
            this.z = Math.ceil( this.z );
    
            return this;
    
        },
    
        round: function () {
    
            this.x = Math.round( this.x );
            this.y = Math.round( this.y );
            this.z = Math.round( this.z );
    
            return this;
    
        },
    
        roundToZero: function () {
    
            this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
            this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
            this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
    
            return this;
    
        },
    
        negate: function () {
    
            this.x = - this.x;
            this.y = - this.y;
            this.z = - this.z;
    
            return this;
    
        },
    
        dot: function ( v ) {
    
            return this.x * v.x + this.y * v.y + this.z * v.z;
    
        },
    
        lengthSq: function () {
    
            return this.x * this.x + this.y * this.y + this.z * this.z;
    
        },
    
        length: function () {
    
            return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
    
        },
    
        lengthManhattan: function () {
    
            return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
    
        },
    
        normalize: function () {
    
            return this.divideScalar( this.length() );
    
        },
    
        setLength: function ( l ) {
    
            var oldLength = this.length();
    
            if ( oldLength !== 0 && l !== oldLength  ) {
    
                this.multiplyScalar( l / oldLength );
            }
    
            return this;
    
        },
    
        lerp: function ( v, alpha ) {
    
            this.x += ( v.x - this.x ) * alpha;
            this.y += ( v.y - this.y ) * alpha;
            this.z += ( v.z - this.z ) * alpha;
    
            return this;
    
        },
    
        cross: function ( v, w ) {
    
            if ( w !== undefined ) {
    
                console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
                return this.crossVectors( v, w );
    
            }
    
            var x = this.x, y = this.y, z = this.z;
    
            this.x = y * v.z - z * v.y;
            this.y = z * v.x - x * v.z;
            this.z = x * v.y - y * v.x;
    
            return this;
    
        },
    
        crossVectors: function ( a, b ) {
    
            var ax = a.x, ay = a.y, az = a.z;
            var bx = b.x, by = b.y, bz = b.z;
    
            this.x = ay * bz - az * by;
            this.y = az * bx - ax * bz;
            this.z = ax * by - ay * bx;
    
            return this;
    
        },
    
        projectOnVector: function () {
    
            var v1, dot;
    
            return function ( vector ) {
    
                if ( v1 === undefined ) v1 = new THREE.Vector3();
    
                v1.copy( vector ).normalize();
    
                dot = this.dot( v1 );
    
                return this.copy( v1 ).multiplyScalar( dot );
    
            };
    
        }(),
    
        projectOnPlane: function () {
    
            var v1;
    
            return function ( planeNormal ) {
    
                if ( v1 === undefined ) v1 = new THREE.Vector3();
    
                v1.copy( this ).projectOnVector( planeNormal );
    
                return this.sub( v1 );
    
            }
    
        }(),
    
        reflect: function () {
    
            // reflect incident vector off plane orthogonal to normal
            // normal is assumed to have unit length
    
            var v1;
    
            return function ( normal ) {
    
                if ( v1 === undefined ) v1 = new THREE.Vector3();
    
                return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
    
            }
    
        }(),
    
        angleTo: function ( v ) {
    
            var theta = this.dot( v ) / ( this.length() * v.length() );
    
            // clamp, to handle numerical problems
    
            return Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );
    
        },
    
        distanceTo: function ( v ) {
    
            return Math.sqrt( this.distanceToSquared( v ) );
    
        },
    
        distanceToSquared: function ( v ) {
    
            var dx = this.x - v.x;
            var dy = this.y - v.y;
            var dz = this.z - v.z;
    
            return dx * dx + dy * dy + dz * dz;
    
        },
    
        setEulerFromRotationMatrix: function ( m, order ) {
    
            console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
    
        },
    
        setEulerFromQuaternion: function ( q, order ) {
    
            console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
    
        },
    
        getPositionFromMatrix: function ( m ) {
    
            console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
    
            return this.setFromMatrixPosition( m );
    
        },
    
        getScaleFromMatrix: function ( m ) {
    
            console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
    
            return this.setFromMatrixScale( m );
        },
    
        getColumnFromMatrix: function ( index, matrix ) {
    
            console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
    
            return this.setFromMatrixColumn( index, matrix );
    
        },
    
        setFromMatrixPosition: function ( m ) {
    
            this.x = m.elements[ 12 ];
            this.y = m.elements[ 13 ];
            this.z = m.elements[ 14 ];
    
            return this;
    
        },
    
        setFromMatrixScale: function ( m ) {
    
            var sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[  2 ] ).length();
            var sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[  6 ] ).length();
            var sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();
    
            this.x = sx;
            this.y = sy;
            this.z = sz;
    
            return this;
        },
    
        setFromMatrixColumn: function ( index, matrix ) {
    
            var offset = index * 4;
    
            var me = matrix.elements;
    
            this.x = me[ offset ];
            this.y = me[ offset + 1 ];
            this.z = me[ offset + 2 ];
    
            return this;
    
        },
    
        equals: function ( v ) {
    
            return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
    
        },
    
        fromArray: function ( array, offset ) {
    
            if ( offset === undefined ) offset = 0;
    
            this.x = array[ offset ];
            this.y = array[ offset + 1 ];
            this.z = array[ offset + 2 ];
    
            return this;
    
        },
    
        toArray: function ( array, offset ) {
    
            if ( array === undefined ) array = [];
            if ( offset === undefined ) offset = 0;
    
            array[ offset ] = this.x;
            array[ offset + 1 ] = this.y;
            array[ offset + 2 ] = this.z;
    
            return array;
    
        },
    
        clone: function () {
    
            return new THREE.Vector3( this.x, this.y, this.z );
    
        }
    
    };
    
    // File:src/math/Vector4.js
    
    /**
     * @author supereggbert / http://www.paulbrunt.co.uk/
     * @author philogb / http://blog.thejit.org/
     * @author mikael emtinger / http://gomo.se/
     * @author egraether / http://egraether.com/
     * @author WestLangley / http://github.com/WestLangley
     */
    
    THREE.Vector4 = function ( x, y, z, w ) {
    
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
        this.w = ( w !== undefined ) ? w : 1;
    
    };
    
    THREE.Vector4.prototype = {
    
        constructor: THREE.Vector4,
    
        set: function ( x, y, z, w ) {
    
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
    
            return this;
    
        },
    
        setX: function ( x ) {
    
            this.x = x;
    
            return this;
    
        },
    
        setY: function ( y ) {
    
            this.y = y;
    
            return this;
    
        },
    
        setZ: function ( z ) {
    
            this.z = z;
    
            return this;
    
        },
    
        setW: function ( w ) {
    
            this.w = w;
    
            return this;
    
        },
    
        setComponent: function ( index, value ) {
    
            switch ( index ) {
    
                case 0: this.x = value; break;
                case 1: this.y = value; break;
                case 2: this.z = value; break;
                case 3: this.w = value; break;
                default: throw new Error( 'index is out of range: ' + index );
    
            }
    
        },
    
        getComponent: function ( index ) {
    
            switch ( index ) {
    
                case 0: return this.x;
                case 1: return this.y;
                case 2: return this.z;
                case 3: return this.w;
                default: throw new Error( 'index is out of range: ' + index );
    
            }
    
        },
    
        copy: function ( v ) {
    
            this.x = v.x;
            this.y = v.y;
            this.z = v.z;
            this.w = ( v.w !== undefined ) ? v.w : 1;
    
            return this;
    
        },
    
        add: function ( v, w ) {
    
            if ( w !== undefined ) {
    
                console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
                return this.addVectors( v, w );
    
            }
    
            this.x += v.x;
            this.y += v.y;
            this.z += v.z;
            this.w += v.w;
    
            return this;
    
        },
    
        addScalar: function ( s ) {
    
            this.x += s;
            this.y += s;
            this.z += s;
            this.w += s;
    
            return this;
    
        },
    
        addVectors: function ( a, b ) {
    
            this.x = a.x + b.x;
            this.y = a.y + b.y;
            this.z = a.z + b.z;
            this.w = a.w + b.w;
    
            return this;
    
        },
    
        sub: function ( v, w ) {
    
            if ( w !== undefined ) {
    
                console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
                return this.subVectors( v, w );
    
            }
    
            this.x -= v.x;
            this.y -= v.y;
            this.z -= v.z;
            this.w -= v.w;
    
            return this;
    
        },
    
        subVectors: function ( a, b ) {
    
            this.x = a.x - b.x;
            this.y = a.y - b.y;
            this.z = a.z - b.z;
            this.w = a.w - b.w;
    
            return this;
    
        },
    
        multiplyScalar: function ( scalar ) {
    
            this.x *= scalar;
            this.y *= scalar;
            this.z *= scalar;
            this.w *= scalar;
    
            return this;
    
        },
    
        applyMatrix4: function ( m ) {
    
            var x = this.x;
            var y = this.y;
            var z = this.z;
            var w = this.w;
    
            var e = m.elements;
    
            this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
            this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
            this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
            this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
    
            return this;
    
        },
    
        divideScalar: function ( scalar ) {
    
            if ( scalar !== 0 ) {
    
                var invScalar = 1 / scalar;
    
                this.x *= invScalar;
                this.y *= invScalar;
                this.z *= invScalar;
                this.w *= invScalar;
    
            } else {
    
                this.x = 0;
                this.y = 0;
                this.z = 0;
                this.w = 1;
    
            }
    
            return this;
    
        },
    
        setAxisAngleFromQuaternion: function ( q ) {
    
            // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
    
            // q is assumed to be normalized
    
            this.w = 2 * Math.acos( q.w );
    
            var s = Math.sqrt( 1 - q.w * q.w );
    
            if ( s < 0.0001 ) {
    
                 this.x = 1;
                 this.y = 0;
                 this.z = 0;
    
            } else {
    
                 this.x = q.x / s;
                 this.y = q.y / s;
                 this.z = q.z / s;
    
            }
    
            return this;
    
        },
    
        setAxisAngleFromRotationMatrix: function ( m ) {
    
            // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
    
            // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    
            var angle, x, y, z,		// variables for result
                epsilon = 0.01,		// margin to allow for rounding errors
                epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
    
                te = m.elements,
    
                m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
                m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
                m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
    
            if ( ( Math.abs( m12 - m21 ) < epsilon )
               && ( Math.abs( m13 - m31 ) < epsilon )
               && ( Math.abs( m23 - m32 ) < epsilon ) ) {
    
                // singularity found
                // first check for identity matrix which must have +1 for all terms
                // in leading diagonal and zero in other terms
    
                if ( ( Math.abs( m12 + m21 ) < epsilon2 )
                   && ( Math.abs( m13 + m31 ) < epsilon2 )
                   && ( Math.abs( m23 + m32 ) < epsilon2 )
                   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
    
                    // this singularity is identity matrix so angle = 0
    
                    this.set( 1, 0, 0, 0 );
    
                    return this; // zero angle, arbitrary axis
    
                }
    
                // otherwise this singularity is angle = 180
    
                angle = Math.PI;
    
                var xx = ( m11 + 1 ) / 2;
                var yy = ( m22 + 1 ) / 2;
                var zz = ( m33 + 1 ) / 2;
                var xy = ( m12 + m21 ) / 4;
                var xz = ( m13 + m31 ) / 4;
                var yz = ( m23 + m32 ) / 4;
    
                if ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term
    
                    if ( xx < epsilon ) {
    
                        x = 0;
                        y = 0.707106781;
                        z = 0.707106781;
    
                    } else {
    
                        x = Math.sqrt( xx );
                        y = xy / x;
                        z = xz / x;
    
                    }
    
                } else if ( yy > zz ) { // m22 is the largest diagonal term
    
                    if ( yy < epsilon ) {
    
                        x = 0.707106781;
                        y = 0;
                        z = 0.707106781;
    
                    } else {
    
                        y = Math.sqrt( yy );
                        x = xy / y;
                        z = yz / y;
    
                    }
    
                } else { // m33 is the largest diagonal term so base result on this
    
                    if ( zz < epsilon ) {
    
                        x = 0.707106781;
                        y = 0.707106781;
                        z = 0;
    
                    } else {
    
                        z = Math.sqrt( zz );
                        x = xz / z;
                        y = yz / z;
    
                    }
    
                }
    
                this.set( x, y, z, angle );
    
                return this; // return 180 deg rotation
    
            }
    
            // as we have reached here there are no singularities so we can handle normally
    
            var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )
                              + ( m13 - m31 ) * ( m13 - m31 )
                              + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
    
            if ( Math.abs( s ) < 0.001 ) s = 1;
    
            // prevent divide by zero, should not happen if matrix is orthogonal and should be
            // caught by singularity test above, but I've left it in just in case
    
            this.x = ( m32 - m23 ) / s;
            this.y = ( m13 - m31 ) / s;
            this.z = ( m21 - m12 ) / s;
            this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
    
            return this;
    
        },
    
        min: function ( v ) {
    
            if ( this.x > v.x ) {
    
                this.x = v.x;
    
            }
    
            if ( this.y > v.y ) {
    
                this.y = v.y;
    
            }
    
            if ( this.z > v.z ) {
    
                this.z = v.z;
    
            }
    
            if ( this.w > v.w ) {
    
                this.w = v.w;
    
            }
    
            return this;
    
        },
    
        max: function ( v ) {
    
            if ( this.x < v.x ) {
    
                this.x = v.x;
    
            }
    
            if ( this.y < v.y ) {
    
                this.y = v.y;
    
            }
    
            if ( this.z < v.z ) {
    
                this.z = v.z;
    
            }
    
            if ( this.w < v.w ) {
    
                this.w = v.w;
    
            }
    
            return this;
    
        },
    
        clamp: function ( min, max ) {
    
            // This function assumes min < max, if this assumption isn't true it will not operate correctly
    
            if ( this.x < min.x ) {
    
                this.x = min.x;
    
            } else if ( this.x > max.x ) {
    
                this.x = max.x;
    
            }
    
            if ( this.y < min.y ) {
    
                this.y = min.y;
    
            } else if ( this.y > max.y ) {
    
                this.y = max.y;
    
            }
    
            if ( this.z < min.z ) {
    
                this.z = min.z;
    
            } else if ( this.z > max.z ) {
    
                this.z = max.z;
    
            }
    
            if ( this.w < min.w ) {
    
                this.w = min.w;
    
            } else if ( this.w > max.w ) {
    
                this.w = max.w;
    
            }
    
            return this;
    
        },
    
        clampScalar: ( function () {
    
            var min, max;
    
            return function ( minVal, maxVal ) {
    
                if ( min === undefined ) {
    
                    min = new THREE.Vector4();
                    max = new THREE.Vector4();
    
                }
    
                min.set( minVal, minVal, minVal, minVal );
                max.set( maxVal, maxVal, maxVal, maxVal );
    
                return this.clamp( min, max );
    
            };
    
        } )(),
    
        floor: function () {
    
            this.x = Math.floor( this.x );
            this.y = Math.floor( this.y );
            this.z = Math.floor( this.z );
            this.w = Math.floor( this.w );
    
            return this;
    
        },
    
        ceil: function () {
    
            this.x = Math.ceil( this.x );
            this.y = Math.ceil( this.y );
            this.z = Math.ceil( this.z );
            this.w = Math.ceil( this.w );
    
            return this;
    
        },
    
        round: function () {
    
            this.x = Math.round( this.x );
            this.y = Math.round( this.y );
            this.z = Math.round( this.z );
            this.w = Math.round( this.w );
    
            return this;
    
        },
    
        roundToZero: function () {
    
            this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
            this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
            this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
            this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
    
            return this;
    
        },
    
        negate: function () {
    
            this.x = - this.x;
            this.y = - this.y;
            this.z = - this.z;
            this.w = - this.w;
    
            return this;
    
        },
    
        dot: function ( v ) {
    
            return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    
        },
    
        lengthSq: function () {
    
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    
        },
    
        length: function () {
    
            return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
    
        },
    
        lengthManhattan: function () {
    
            return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
    
        },
    
        normalize: function () {
    
            return this.divideScalar( this.length() );
    
        },
    
        setLength: function ( l ) {
    
            var oldLength = this.length();
    
            if ( oldLength !== 0 && l !== oldLength ) {
    
                this.multiplyScalar( l / oldLength );
    
            }
    
            return this;
    
        },
    
        lerp: function ( v, alpha ) {
    
            this.x += ( v.x - this.x ) * alpha;
            this.y += ( v.y - this.y ) * alpha;
            this.z += ( v.z - this.z ) * alpha;
            this.w += ( v.w - this.w ) * alpha;
    
            return this;
    
        },
    
        equals: function ( v ) {
    
            return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
    
        },
    
        fromArray: function ( array, offset ) {
    
            if ( offset === undefined ) offset = 0;
    
            this.x = array[ offset ];
            this.y = array[ offset + 1 ];
            this.z = array[ offset + 2 ];
            this.w = array[ offset + 3 ];
    
            return this;
    
        },
    
        toArray: function ( array, offset ) {
    
            if ( array === undefined ) array = [];
            if ( offset === undefined ) offset = 0;
    
            array[ offset ] = this.x;
            array[ offset + 1 ] = this.y;
            array[ offset + 2 ] = this.z;
            array[ offset + 3 ] = this.w;
    
            return array;
    
        },
    
        clone: function () {
    
            return new THREE.Vector4( this.x, this.y, this.z, this.w );
    
        }
    
    };
    
    // File:src/math/Euler.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author WestLangley / http://github.com/WestLangley
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Euler = function ( x, y, z, order ) {
    
        this._x = x || 0;
        this._y = y || 0;
        this._z = z || 0;
        this._order = order || THREE.Euler.DefaultOrder;
    
    };
    
    THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
    
    THREE.Euler.DefaultOrder = 'XYZ';
    
    THREE.Euler.prototype = {
    
        constructor: THREE.Euler,
    
        _x: 0, _y: 0, _z: 0, _order: THREE.Euler.DefaultOrder,
    
        get x () {
    
            return this._x;
    
        },
    
        set x ( value ) {
    
            this._x = value;
            this.onChangeCallback();
    
        },
    
        get y () {
    
            return this._y;
    
        },
    
        set y ( value ) {
    
            this._y = value;
            this.onChangeCallback();
    
        },
    
        get z () {
    
            return this._z;
    
        },
    
        set z ( value ) {
    
            this._z = value;
            this.onChangeCallback();
    
        },
    
        get order () {
    
            return this._order;
    
        },
    
        set order ( value ) {
    
            this._order = value;
            this.onChangeCallback();
    
        },
    
        set: function ( x, y, z, order ) {
    
            this._x = x;
            this._y = y;
            this._z = z;
            this._order = order || this._order;
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        copy: function ( euler ) {
    
            this._x = euler._x;
            this._y = euler._y;
            this._z = euler._z;
            this._order = euler._order;
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        setFromRotationMatrix: function ( m, order ) {
    
            var clamp = THREE.Math.clamp;
    
            // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    
            var te = m.elements;
            var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
            var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
            var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
    
            order = order || this._order;
    
            if ( order === 'XYZ' ) {
    
                this._y = Math.asin( clamp( m13, - 1, 1 ) );
    
                if ( Math.abs( m13 ) < 0.99999 ) {
    
                    this._x = Math.atan2( - m23, m33 );
                    this._z = Math.atan2( - m12, m11 );
    
                } else {
    
                    this._x = Math.atan2( m32, m22 );
                    this._z = 0;
    
                }
    
            } else if ( order === 'YXZ' ) {
    
                this._x = Math.asin( - clamp( m23, - 1, 1 ) );
    
                if ( Math.abs( m23 ) < 0.99999 ) {
    
                    this._y = Math.atan2( m13, m33 );
                    this._z = Math.atan2( m21, m22 );
    
                } else {
    
                    this._y = Math.atan2( - m31, m11 );
                    this._z = 0;
    
                }
    
            } else if ( order === 'ZXY' ) {
    
                this._x = Math.asin( clamp( m32, - 1, 1 ) );
    
                if ( Math.abs( m32 ) < 0.99999 ) {
    
                    this._y = Math.atan2( - m31, m33 );
                    this._z = Math.atan2( - m12, m22 );
    
                } else {
    
                    this._y = 0;
                    this._z = Math.atan2( m21, m11 );
    
                }
    
            } else if ( order === 'ZYX' ) {
    
                this._y = Math.asin( - clamp( m31, - 1, 1 ) );
    
                if ( Math.abs( m31 ) < 0.99999 ) {
    
                    this._x = Math.atan2( m32, m33 );
                    this._z = Math.atan2( m21, m11 );
    
                } else {
    
                    this._x = 0;
                    this._z = Math.atan2( - m12, m22 );
    
                }
    
            } else if ( order === 'YZX' ) {
    
                this._z = Math.asin( clamp( m21, - 1, 1 ) );
    
                if ( Math.abs( m21 ) < 0.99999 ) {
    
                    this._x = Math.atan2( - m23, m22 );
                    this._y = Math.atan2( - m31, m11 );
    
                } else {
    
                    this._x = 0;
                    this._y = Math.atan2( m13, m33 );
    
                }
    
            } else if ( order === 'XZY' ) {
    
                this._z = Math.asin( - clamp( m12, - 1, 1 ) );
    
                if ( Math.abs( m12 ) < 0.99999 ) {
    
                    this._x = Math.atan2( m32, m22 );
                    this._y = Math.atan2( m13, m11 );
    
                } else {
    
                    this._x = Math.atan2( - m23, m33 );
                    this._y = 0;
    
                }
    
            } else {
    
                console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )
    
            }
    
            this._order = order;
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        setFromQuaternion: function ( q, order, update ) {
    
            var clamp = THREE.Math.clamp;
    
            // q is assumed to be normalized
    
            // http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m
    
            var sqx = q.x * q.x;
            var sqy = q.y * q.y;
            var sqz = q.z * q.z;
            var sqw = q.w * q.w;
    
            order = order || this._order;
    
            if ( order === 'XYZ' ) {
    
                this._x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );
                this._y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ), - 1, 1 ) );
                this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );
    
            } else if ( order ===  'YXZ' ) {
    
                this._x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ), - 1, 1 ) );
                this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );
                this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );
    
            } else if ( order === 'ZXY' ) {
    
                this._x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ), - 1, 1 ) );
                this._y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );
                this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );
    
            } else if ( order === 'ZYX' ) {
    
                this._x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );
                this._y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ), - 1, 1 ) );
                this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );
    
            } else if ( order === 'YZX' ) {
    
                this._x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );
                this._y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );
                this._z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ), - 1, 1 ) );
    
            } else if ( order === 'XZY' ) {
    
                this._x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );
                this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );
                this._z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ), - 1, 1 ) );
    
            } else {
    
                console.warn( 'THREE.Euler: .setFromQuaternion() given unsupported order: ' + order )
    
            }
    
            this._order = order;
    
            if ( update !== false ) this.onChangeCallback();
    
            return this;
    
        },
    
        reorder: function () {
    
            // WARNING: this discards revolution information -bhouston
    
            var q = new THREE.Quaternion();
    
            return function ( newOrder ) {
    
                q.setFromEuler( this );
                this.setFromQuaternion( q, newOrder );
    
            };
    
    
        }(),
    
        equals: function ( euler ) {
    
            return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
    
        },
    
        fromArray: function ( array ) {
    
            this._x = array[ 0 ];
            this._y = array[ 1 ];
            this._z = array[ 2 ];
            if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
    
            this.onChangeCallback();
    
            return this;
    
        },
    
        toArray: function () {
    
            return [ this._x, this._y, this._z, this._order ];
    
        },
    
        onChange: function ( callback ) {
    
            this.onChangeCallback = callback;
    
            return this;
    
        },
    
        onChangeCallback: function () {},
    
        clone: function () {
    
            return new THREE.Euler( this._x, this._y, this._z, this._order );
    
        }
    
    };
    
    // File:src/math/Line3.js
    
    /**
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Line3 = function ( start, end ) {
    
        this.start = ( start !== undefined ) ? start : new THREE.Vector3();
        this.end = ( end !== undefined ) ? end : new THREE.Vector3();
    
    };
    
    THREE.Line3.prototype = {
    
        constructor: THREE.Line3,
    
        set: function ( start, end ) {
    
            this.start.copy( start );
            this.end.copy( end );
    
            return this;
    
        },
    
        copy: function ( line ) {
    
            this.start.copy( line.start );
            this.end.copy( line.end );
    
            return this;
    
        },
    
        center: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
            return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
    
        },
    
        delta: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
            return result.subVectors( this.end, this.start );
    
        },
    
        distanceSq: function () {
    
            return this.start.distanceToSquared( this.end );
    
        },
    
        distance: function () {
    
            return this.start.distanceTo( this.end );
    
        },
    
        at: function ( t, optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
    
            return this.delta( result ).multiplyScalar( t ).add( this.start );
    
        },
    
        closestPointToPointParameter: function () {
    
            var startP = new THREE.Vector3();
            var startEnd = new THREE.Vector3();
    
            return function ( point, clampToLine ) {
    
                startP.subVectors( point, this.start );
                startEnd.subVectors( this.end, this.start );
    
                var startEnd2 = startEnd.dot( startEnd );
                var startEnd_startP = startEnd.dot( startP );
    
                var t = startEnd_startP / startEnd2;
    
                if ( clampToLine ) {
    
                    t = THREE.Math.clamp( t, 0, 1 );
    
                }
    
                return t;
    
            };
    
        }(),
    
        closestPointToPoint: function ( point, clampToLine, optionalTarget ) {
    
            var t = this.closestPointToPointParameter( point, clampToLine );
    
            var result = optionalTarget || new THREE.Vector3();
    
            return this.delta( result ).multiplyScalar( t ).add( this.start );
    
        },
    
        applyMatrix4: function ( matrix ) {
    
            this.start.applyMatrix4( matrix );
            this.end.applyMatrix4( matrix );
    
            return this;
    
        },
    
        equals: function ( line ) {
    
            return line.start.equals( this.start ) && line.end.equals( this.end );
    
        },
    
        clone: function () {
    
            return new THREE.Line3().copy( this );
    
        }
    
    };
    
    // File:src/math/Box2.js
    
    /**
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Box2 = function ( min, max ) {
    
        this.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );
        this.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );
    
    };
    
    THREE.Box2.prototype = {
    
        constructor: THREE.Box2,
    
        set: function ( min, max ) {
    
            this.min.copy( min );
            this.max.copy( max );
    
            return this;
    
        },
    
        setFromPoints: function ( points ) {
    
            this.makeEmpty();
    
            for ( var i = 0, il = points.length; i < il; i ++ ) {
    
                this.expandByPoint( points[ i ] )
    
            }
    
            return this;
    
        },
    
        setFromCenterAndSize: function () {
    
            var v1 = new THREE.Vector2();
    
            return function ( center, size ) {
    
                var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
                this.min.copy( center ).sub( halfSize );
                this.max.copy( center ).add( halfSize );
    
                return this;
    
            };
    
        }(),
    
        copy: function ( box ) {
    
            this.min.copy( box.min );
            this.max.copy( box.max );
    
            return this;
    
        },
    
        makeEmpty: function () {
    
            this.min.x = this.min.y = Infinity;
            this.max.x = this.max.y = - Infinity;
    
            return this;
    
        },
    
        empty: function () {
    
            // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
    
            return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
    
        },
    
        center: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector2();
            return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
    
        },
    
        size: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector2();
            return result.subVectors( this.max, this.min );
    
        },
    
        expandByPoint: function ( point ) {
    
            this.min.min( point );
            this.max.max( point );
    
            return this;
        },
    
        expandByVector: function ( vector ) {
    
            this.min.sub( vector );
            this.max.add( vector );
    
            return this;
        },
    
        expandByScalar: function ( scalar ) {
    
            this.min.addScalar( - scalar );
            this.max.addScalar( scalar );
    
            return this;
        },
    
        containsPoint: function ( point ) {
    
            if ( point.x < this.min.x || point.x > this.max.x ||
                 point.y < this.min.y || point.y > this.max.y ) {
    
                return false;
    
            }
    
            return true;
    
        },
    
        containsBox: function ( box ) {
    
            if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
                 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {
    
                return true;
    
            }
    
            return false;
    
        },
    
        getParameter: function ( point, optionalTarget ) {
    
            // This can potentially have a divide by zero if the box
            // has a size dimension of 0.
    
            var result = optionalTarget || new THREE.Vector2();
    
            return result.set(
                ( point.x - this.min.x ) / ( this.max.x - this.min.x ),
                ( point.y - this.min.y ) / ( this.max.y - this.min.y )
            );
    
        },
    
        isIntersectionBox: function ( box ) {
    
            // using 6 splitting planes to rule out intersections.
    
            if ( box.max.x < this.min.x || box.min.x > this.max.x ||
                 box.max.y < this.min.y || box.min.y > this.max.y ) {
    
                return false;
    
            }
    
            return true;
    
        },
    
        clampPoint: function ( point, optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector2();
            return result.copy( point ).clamp( this.min, this.max );
    
        },
    
        distanceToPoint: function () {
    
            var v1 = new THREE.Vector2();
    
            return function ( point ) {
    
                var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
                return clampedPoint.sub( point ).length();
    
            };
    
        }(),
    
        intersect: function ( box ) {
    
            this.min.max( box.min );
            this.max.min( box.max );
    
            return this;
    
        },
    
        union: function ( box ) {
    
            this.min.min( box.min );
            this.max.max( box.max );
    
            return this;
    
        },
    
        translate: function ( offset ) {
    
            this.min.add( offset );
            this.max.add( offset );
    
            return this;
    
        },
    
        equals: function ( box ) {
    
            return box.min.equals( this.min ) && box.max.equals( this.max );
    
        },
    
        clone: function () {
    
            return new THREE.Box2().copy( this );
    
        }
    
    };
    
    // File:src/math/Box3.js
    
    /**
     * @author bhouston / http://exocortex.com
     * @author WestLangley / http://github.com/WestLangley
     */
    
    THREE.Box3 = function ( min, max ) {
    
        this.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );
        this.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );
    
    };
    
    THREE.Box3.prototype = {
    
        constructor: THREE.Box3,
    
        set: function ( min, max ) {
    
            this.min.copy( min );
            this.max.copy( max );
    
            return this;
    
        },
    
        setFromPoints: function ( points ) {
    
            this.makeEmpty();
    
            for ( var i = 0, il = points.length; i < il; i ++ ) {
    
                this.expandByPoint( points[ i ] )
    
            }
    
            return this;
    
        },
    
        setFromCenterAndSize: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( center, size ) {
    
                var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
    
                this.min.copy( center ).sub( halfSize );
                this.max.copy( center ).add( halfSize );
    
                return this;
    
            };
    
        }(),
    
        setFromObject: function () {
    
            // Computes the world-axis-aligned bounding box of an object (including its children),
            // accounting for both the object's, and childrens', world transforms
    
            var v1 = new THREE.Vector3();
    
            return function ( object ) {
    
                var scope = this;
    
                object.updateMatrixWorld( true );
    
                this.makeEmpty();
    
                object.traverse( function ( node ) {
    
                    var geometry = node.geometry;
    
                    if ( geometry !== undefined ) {
    
                        if ( geometry instanceof THREE.Geometry ) {
    
                            var vertices = geometry.vertices;
    
                            for ( var i = 0, il = vertices.length; i < il; i ++ ) {
    
                                v1.copy( vertices[ i ] );
    
                                v1.applyMatrix4( node.matrixWorld );
    
                                scope.expandByPoint( v1 );
    
                            }
    
                        } else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {
    
                            var positions = geometry.attributes[ 'position' ].array;
    
                            for ( var i = 0, il = positions.length; i < il; i += 3 ) {
    
                                v1.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
    
                                v1.applyMatrix4( node.matrixWorld );
    
                                scope.expandByPoint( v1 );
    
                            }
    
                        }
    
                    }
    
                } );
    
                return this;
    
            };
    
        }(),
    
        copy: function ( box ) {
    
            this.min.copy( box.min );
            this.max.copy( box.max );
    
            return this;
    
        },
    
        makeEmpty: function () {
    
            this.min.x = this.min.y = this.min.z = Infinity;
            this.max.x = this.max.y = this.max.z = - Infinity;
    
            return this;
    
        },
    
        empty: function () {
    
            // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
    
            return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
    
        },
    
        center: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
            return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
    
        },
    
        size: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
            return result.subVectors( this.max, this.min );
    
        },
    
        expandByPoint: function ( point ) {
    
            this.min.min( point );
            this.max.max( point );
    
            return this;
    
        },
    
        expandByVector: function ( vector ) {
    
            this.min.sub( vector );
            this.max.add( vector );
    
            return this;
    
        },
    
        expandByScalar: function ( scalar ) {
    
            this.min.addScalar( - scalar );
            this.max.addScalar( scalar );
    
            return this;
    
        },
    
        containsPoint: function ( point ) {
    
            if ( point.x < this.min.x || point.x > this.max.x ||
                 point.y < this.min.y || point.y > this.max.y ||
                 point.z < this.min.z || point.z > this.max.z ) {
    
                return false;
    
            }
    
            return true;
    
        },
    
        containsBox: function ( box ) {
    
            if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
                 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
                 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {
    
                return true;
    
            }
    
            return false;
    
        },
    
        getParameter: function ( point, optionalTarget ) {
    
            // This can potentially have a divide by zero if the box
            // has a size dimension of 0.
    
            var result = optionalTarget || new THREE.Vector3();
    
            return result.set(
                ( point.x - this.min.x ) / ( this.max.x - this.min.x ),
                ( point.y - this.min.y ) / ( this.max.y - this.min.y ),
                ( point.z - this.min.z ) / ( this.max.z - this.min.z )
            );
    
        },
    
        isIntersectionBox: function ( box ) {
    
            // using 6 splitting planes to rule out intersections.
    
            if ( box.max.x < this.min.x || box.min.x > this.max.x ||
                 box.max.y < this.min.y || box.min.y > this.max.y ||
                 box.max.z < this.min.z || box.min.z > this.max.z ) {
    
                return false;
    
            }
    
            return true;
    
        },
    
        clampPoint: function ( point, optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
            return result.copy( point ).clamp( this.min, this.max );
    
        },
    
        distanceToPoint: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( point ) {
    
                var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
                return clampedPoint.sub( point ).length();
    
            };
    
        }(),
    
        getBoundingSphere: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( optionalTarget ) {
    
                var result = optionalTarget || new THREE.Sphere();
    
                result.center = this.center();
                result.radius = this.size( v1 ).length() * 0.5;
    
                return result;
    
            };
    
        }(),
    
        intersect: function ( box ) {
    
            this.min.max( box.min );
            this.max.min( box.max );
    
            return this;
    
        },
    
        union: function ( box ) {
    
            this.min.min( box.min );
            this.max.max( box.max );
    
            return this;
    
        },
    
        applyMatrix4: function () {
    
            var points = [
                new THREE.Vector3(),
                new THREE.Vector3(),
                new THREE.Vector3(),
                new THREE.Vector3(),
                new THREE.Vector3(),
                new THREE.Vector3(),
                new THREE.Vector3(),
                new THREE.Vector3()
            ];
    
            return function ( matrix ) {
    
                // NOTE: I am using a binary pattern to specify all 2^3 combinations below
                points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
                points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
                points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
                points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
                points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
                points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
                points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
                points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111
    
                this.makeEmpty();
                this.setFromPoints( points );
    
                return this;
    
            };
    
        }(),
    
        translate: function ( offset ) {
    
            this.min.add( offset );
            this.max.add( offset );
    
            return this;
    
        },
    
        equals: function ( box ) {
    
            return box.min.equals( this.min ) && box.max.equals( this.max );
    
        },
    
        clone: function () {
    
            return new THREE.Box3().copy( this );
    
        }
    
    };
    
    // File:src/math/Matrix3.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     * @author WestLangley / http://github.com/WestLangley
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Matrix3 = function () {
    
        this.elements = new Float32Array( [
    
            1, 0, 0,
            0, 1, 0,
            0, 0, 1
    
        ] );
    
        if ( arguments.length > 0 ) {
    
            console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );
    
        }
    
    };
    
    THREE.Matrix3.prototype = {
    
        constructor: THREE.Matrix3,
    
        set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
    
            var te = this.elements;
    
            te[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;
            te[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;
            te[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;
    
            return this;
    
        },
    
        identity: function () {
    
            this.set(
    
                1, 0, 0,
                0, 1, 0,
                0, 0, 1
    
            );
    
            return this;
    
        },
    
        copy: function ( m ) {
    
            var me = m.elements;
    
            this.set(
    
                me[ 0 ], me[ 3 ], me[ 6 ],
                me[ 1 ], me[ 4 ], me[ 7 ],
                me[ 2 ], me[ 5 ], me[ 8 ]
    
            );
    
            return this;
    
        },
    
        multiplyVector3: function ( vector ) {
    
            console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
            return vector.applyMatrix3( this );
    
        },
    
        multiplyVector3Array: function ( a ) {
    
            console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
            return this.applyToVector3Array( a );
    
        },
    
        applyToVector3Array: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( array, offset, length ) {
    
                if ( offset === undefined ) offset = 0;
                if ( length === undefined ) length = array.length;
    
                for ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {
    
                    v1.x = array[ j ];
                    v1.y = array[ j + 1 ];
                    v1.z = array[ j + 2 ];
    
                    v1.applyMatrix3( this );
    
                    array[ j ]     = v1.x;
                    array[ j + 1 ] = v1.y;
                    array[ j + 2 ] = v1.z;
    
                }
    
                return array;
    
            };
    
        }(),
    
        multiplyScalar: function ( s ) {
    
            var te = this.elements;
    
            te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
            te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
            te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
    
            return this;
    
        },
    
        determinant: function () {
    
            var te = this.elements;
    
            var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
                d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
                g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
    
            return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
    
        },
    
        getInverse: function ( matrix, throwOnInvertible ) {
    
            // input: THREE.Matrix4
            // ( based on http://code.google.com/p/webgl-mjs/ )
    
            var me = matrix.elements;
            var te = this.elements;
    
            te[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];
            te[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];
            te[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];
            te[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];
            te[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];
            te[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];
            te[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];
            te[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];
            te[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];
    
            var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];
    
            // no inverse
    
            if ( det === 0 ) {
    
                var msg = "Matrix3.getInverse(): can't invert matrix, determinant is 0";
    
                if ( throwOnInvertible || false ) {
    
                    throw new Error( msg );
    
                } else {
    
                    console.warn( msg );
    
                }
    
                this.identity();
    
                return this;
    
            }
    
            this.multiplyScalar( 1.0 / det );
    
            return this;
    
        },
    
        transpose: function () {
    
            var tmp, m = this.elements;
    
            tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
            tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
            tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
    
            return this;
    
        },
    
        flattenToArrayOffset: function ( array, offset ) {
    
            var te = this.elements;
    
            array[ offset     ] = te[ 0 ];
            array[ offset + 1 ] = te[ 1 ];
            array[ offset + 2 ] = te[ 2 ];
    
            array[ offset + 3 ] = te[ 3 ];
            array[ offset + 4 ] = te[ 4 ];
            array[ offset + 5 ] = te[ 5 ];
    
            array[ offset + 6 ] = te[ 6 ];
            array[ offset + 7 ] = te[ 7 ];
            array[ offset + 8 ]  = te[ 8 ];
    
            return array;
    
        },
    
        getNormalMatrix: function ( m ) {
    
            // input: THREE.Matrix4
    
            this.getInverse( m ).transpose();
    
            return this;
    
        },
    
        transposeIntoArray: function ( r ) {
    
            var m = this.elements;
    
            r[ 0 ] = m[ 0 ];
            r[ 1 ] = m[ 3 ];
            r[ 2 ] = m[ 6 ];
            r[ 3 ] = m[ 1 ];
            r[ 4 ] = m[ 4 ];
            r[ 5 ] = m[ 7 ];
            r[ 6 ] = m[ 2 ];
            r[ 7 ] = m[ 5 ];
            r[ 8 ] = m[ 8 ];
    
            return this;
    
        },
    
        fromArray: function ( array ) {
    
            this.elements.set( array );
    
            return this;
    
        },
    
        toArray: function () {
    
            var te = this.elements;
    
            return [
                te[ 0 ], te[ 1 ], te[ 2 ],
                te[ 3 ], te[ 4 ], te[ 5 ],
                te[ 6 ], te[ 7 ], te[ 8 ]
            ];
    
        },
    
        clone: function () {
    
            return new THREE.Matrix3().fromArray( this.elements );
    
        }
    
    };
    
    // File:src/math/Matrix4.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author supereggbert / http://www.paulbrunt.co.uk/
     * @author philogb / http://blog.thejit.org/
     * @author jordi_ros / http://plattsoft.com
     * @author D1plo1d / http://github.com/D1plo1d
     * @author alteredq / http://alteredqualia.com/
     * @author mikael emtinger / http://gomo.se/
     * @author timknip / http://www.floorplanner.com/
     * @author bhouston / http://exocortex.com
     * @author WestLangley / http://github.com/WestLangley
     */
    
    THREE.Matrix4 = function () {
    
        this.elements = new Float32Array( [
    
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
    
        ] );
    
        if ( arguments.length > 0 ) {
    
            console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );
    
        }
    
    };
    
    THREE.Matrix4.prototype = {
    
        constructor: THREE.Matrix4,
    
        set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
    
            var te = this.elements;
    
            te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
            te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
            te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
            te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
    
            return this;
    
        },
    
        identity: function () {
    
            this.set(
    
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
    
            );
    
            return this;
    
        },
    
        copy: function ( m ) {
    
            this.elements.set( m.elements );
    
            return this;
    
        },
    
        extractPosition: function ( m ) {
    
            console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
            return this.copyPosition( m );
    
        },
    
        copyPosition: function ( m ) {
    
            var te = this.elements;
            var me = m.elements;
    
            te[ 12 ] = me[ 12 ];
            te[ 13 ] = me[ 13 ];
            te[ 14 ] = me[ 14 ];
    
            return this;
    
        },
    
        extractRotation: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( m ) {
    
                var te = this.elements;
                var me = m.elements;
    
                var scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();
                var scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();
                var scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();
    
                te[ 0 ] = me[ 0 ] * scaleX;
                te[ 1 ] = me[ 1 ] * scaleX;
                te[ 2 ] = me[ 2 ] * scaleX;
    
                te[ 4 ] = me[ 4 ] * scaleY;
                te[ 5 ] = me[ 5 ] * scaleY;
                te[ 6 ] = me[ 6 ] * scaleY;
    
                te[ 8 ] = me[ 8 ] * scaleZ;
                te[ 9 ] = me[ 9 ] * scaleZ;
                te[ 10 ] = me[ 10 ] * scaleZ;
    
                return this;
    
            };
    
        }(),
    
        makeRotationFromEuler: function ( euler ) {
    
            if ( euler instanceof THREE.Euler === false ) {
    
                console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
    
            }
    
            var te = this.elements;
    
            var x = euler.x, y = euler.y, z = euler.z;
            var a = Math.cos( x ), b = Math.sin( x );
            var c = Math.cos( y ), d = Math.sin( y );
            var e = Math.cos( z ), f = Math.sin( z );
    
            if ( euler.order === 'XYZ' ) {
    
                var ae = a * e, af = a * f, be = b * e, bf = b * f;
    
                te[ 0 ] = c * e;
                te[ 4 ] = - c * f;
                te[ 8 ] = d;
    
                te[ 1 ] = af + be * d;
                te[ 5 ] = ae - bf * d;
                te[ 9 ] = - b * c;
    
                te[ 2 ] = bf - ae * d;
                te[ 6 ] = be + af * d;
                te[ 10 ] = a * c;
    
            } else if ( euler.order === 'YXZ' ) {
    
                var ce = c * e, cf = c * f, de = d * e, df = d * f;
    
                te[ 0 ] = ce + df * b;
                te[ 4 ] = de * b - cf;
                te[ 8 ] = a * d;
    
                te[ 1 ] = a * f;
                te[ 5 ] = a * e;
                te[ 9 ] = - b;
    
                te[ 2 ] = cf * b - de;
                te[ 6 ] = df + ce * b;
                te[ 10 ] = a * c;
    
            } else if ( euler.order === 'ZXY' ) {
    
                var ce = c * e, cf = c * f, de = d * e, df = d * f;
    
                te[ 0 ] = ce - df * b;
                te[ 4 ] = - a * f;
                te[ 8 ] = de + cf * b;
    
                te[ 1 ] = cf + de * b;
                te[ 5 ] = a * e;
                te[ 9 ] = df - ce * b;
    
                te[ 2 ] = - a * d;
                te[ 6 ] = b;
                te[ 10 ] = a * c;
    
            } else if ( euler.order === 'ZYX' ) {
    
                var ae = a * e, af = a * f, be = b * e, bf = b * f;
    
                te[ 0 ] = c * e;
                te[ 4 ] = be * d - af;
                te[ 8 ] = ae * d + bf;
    
                te[ 1 ] = c * f;
                te[ 5 ] = bf * d + ae;
                te[ 9 ] = af * d - be;
    
                te[ 2 ] = - d;
                te[ 6 ] = b * c;
                te[ 10 ] = a * c;
    
            } else if ( euler.order === 'YZX' ) {
    
                var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
    
                te[ 0 ] = c * e;
                te[ 4 ] = bd - ac * f;
                te[ 8 ] = bc * f + ad;
    
                te[ 1 ] = f;
                te[ 5 ] = a * e;
                te[ 9 ] = - b * e;
    
                te[ 2 ] = - d * e;
                te[ 6 ] = ad * f + bc;
                te[ 10 ] = ac - bd * f;
    
            } else if ( euler.order === 'XZY' ) {
    
                var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
    
                te[ 0 ] = c * e;
                te[ 4 ] = - f;
                te[ 8 ] = d * e;
    
                te[ 1 ] = ac * f + bd;
                te[ 5 ] = a * e;
                te[ 9 ] = ad * f - bc;
    
                te[ 2 ] = bc * f - ad;
                te[ 6 ] = b * e;
                te[ 10 ] = bd * f + ac;
    
            }
    
            // last column
            te[ 3 ] = 0;
            te[ 7 ] = 0;
            te[ 11 ] = 0;
    
            // bottom row
            te[ 12 ] = 0;
            te[ 13 ] = 0;
            te[ 14 ] = 0;
            te[ 15 ] = 1;
    
            return this;
    
        },
    
        setRotationFromQuaternion: function ( q ) {
    
            console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
    
            return this.makeRotationFromQuaternion( q );
    
        },
    
        makeRotationFromQuaternion: function ( q ) {
    
            var te = this.elements;
    
            var x = q.x, y = q.y, z = q.z, w = q.w;
            var x2 = x + x, y2 = y + y, z2 = z + z;
            var xx = x * x2, xy = x * y2, xz = x * z2;
            var yy = y * y2, yz = y * z2, zz = z * z2;
            var wx = w * x2, wy = w * y2, wz = w * z2;
    
            te[ 0 ] = 1 - ( yy + zz );
            te[ 4 ] = xy - wz;
            te[ 8 ] = xz + wy;
    
            te[ 1 ] = xy + wz;
            te[ 5 ] = 1 - ( xx + zz );
            te[ 9 ] = yz - wx;
    
            te[ 2 ] = xz - wy;
            te[ 6 ] = yz + wx;
            te[ 10 ] = 1 - ( xx + yy );
    
            // last column
            te[ 3 ] = 0;
            te[ 7 ] = 0;
            te[ 11 ] = 0;
    
            // bottom row
            te[ 12 ] = 0;
            te[ 13 ] = 0;
            te[ 14 ] = 0;
            te[ 15 ] = 1;
    
            return this;
    
        },
    
        lookAt: function () {
    
            var x = new THREE.Vector3();
            var y = new THREE.Vector3();
            var z = new THREE.Vector3();
    
            return function ( eye, target, up ) {
    
                var te = this.elements;
    
                z.subVectors( eye, target ).normalize();
    
                if ( z.length() === 0 ) {
    
                    z.z = 1;
    
                }
    
                x.crossVectors( up, z ).normalize();
    
                if ( x.length() === 0 ) {
    
                    z.x += 0.0001;
                    x.crossVectors( up, z ).normalize();
    
                }
    
                y.crossVectors( z, x );
    
    
                te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
                te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
                te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;
    
                return this;
    
            };
    
        }(),
    
        multiply: function ( m, n ) {
    
            if ( n !== undefined ) {
    
                console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
                return this.multiplyMatrices( m, n );
    
            }
    
            return this.multiplyMatrices( this, m );
    
        },
    
        multiplyMatrices: function ( a, b ) {
    
            var ae = a.elements;
            var be = b.elements;
            var te = this.elements;
    
            var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
            var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
            var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
            var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
    
            var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
            var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
            var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
            var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
    
            te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
            te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
            te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
            te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    
            te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
            te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
            te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
            te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    
            te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
            te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
            te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
            te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    
            te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
            te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
            te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
            te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    
            return this;
    
        },
    
        multiplyToArray: function ( a, b, r ) {
    
            var te = this.elements;
    
            this.multiplyMatrices( a, b );
    
            r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
            r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
            r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
            r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];
    
            return this;
    
        },
    
        multiplyScalar: function ( s ) {
    
            var te = this.elements;
    
            te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
            te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
            te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
            te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
    
            return this;
    
        },
    
        multiplyVector3: function ( vector ) {
    
            console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
            return vector.applyProjection( this );
    
        },
    
        multiplyVector4: function ( vector ) {
    
            console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
            return vector.applyMatrix4( this );
    
        },
    
        multiplyVector3Array: function ( a ) {
    
            console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
            return this.applyToVector3Array( a );
    
        },
    
        applyToVector3Array: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( array, offset, length ) {
    
                if ( offset === undefined ) offset = 0;
                if ( length === undefined ) length = array.length;
    
                for ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {
    
                    v1.x = array[ j ];
                    v1.y = array[ j + 1 ];
                    v1.z = array[ j + 2 ];
    
                    v1.applyMatrix4( this );
    
                    array[ j ]     = v1.x;
                    array[ j + 1 ] = v1.y;
                    array[ j + 2 ] = v1.z;
    
                }
    
                return array;
    
            };
    
        }(),
    
        rotateAxis: function ( v ) {
    
            console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
    
            v.transformDirection( this );
    
        },
    
        crossVector: function ( vector ) {
    
            console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
            return vector.applyMatrix4( this );
    
        },
    
        determinant: function () {
    
            var te = this.elements;
    
            var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
            var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
            var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
            var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
    
            //TODO: make this more efficient
            //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
    
            return (
                n41 * (
                    + n14 * n23 * n32
                     - n13 * n24 * n32
                     - n14 * n22 * n33
                     + n12 * n24 * n33
                     + n13 * n22 * n34
                     - n12 * n23 * n34
                ) +
                n42 * (
                    + n11 * n23 * n34
                     - n11 * n24 * n33
                     + n14 * n21 * n33
                     - n13 * n21 * n34
                     + n13 * n24 * n31
                     - n14 * n23 * n31
                ) +
                n43 * (
                    + n11 * n24 * n32
                     - n11 * n22 * n34
                     - n14 * n21 * n32
                     + n12 * n21 * n34
                     + n14 * n22 * n31
                     - n12 * n24 * n31
                ) +
                n44 * (
                    - n13 * n22 * n31
                     - n11 * n23 * n32
                     + n11 * n22 * n33
                     + n13 * n21 * n32
                     - n12 * n21 * n33
                     + n12 * n23 * n31
                )
    
            );
    
        },
    
        transpose: function () {
    
            var te = this.elements;
            var tmp;
    
            tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
            tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
            tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
    
            tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
            tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
            tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
    
            return this;
    
        },
    
        flattenToArrayOffset: function ( array, offset ) {
    
            var te = this.elements;
    
            array[ offset     ] = te[ 0 ];
            array[ offset + 1 ] = te[ 1 ];
            array[ offset + 2 ] = te[ 2 ];
            array[ offset + 3 ] = te[ 3 ];
    
            array[ offset + 4 ] = te[ 4 ];
            array[ offset + 5 ] = te[ 5 ];
            array[ offset + 6 ] = te[ 6 ];
            array[ offset + 7 ] = te[ 7 ];
    
            array[ offset + 8 ]  = te[ 8 ];
            array[ offset + 9 ]  = te[ 9 ];
            array[ offset + 10 ] = te[ 10 ];
            array[ offset + 11 ] = te[ 11 ];
    
            array[ offset + 12 ] = te[ 12 ];
            array[ offset + 13 ] = te[ 13 ];
            array[ offset + 14 ] = te[ 14 ];
            array[ offset + 15 ] = te[ 15 ];
    
            return array;
    
        },
    
        getPosition: function () {
    
            var v1 = new THREE.Vector3();
    
            return function () {
    
                console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
    
                var te = this.elements;
                return v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );
    
            };
    
        }(),
    
        setPosition: function ( v ) {
    
            var te = this.elements;
    
            te[ 12 ] = v.x;
            te[ 13 ] = v.y;
            te[ 14 ] = v.z;
    
            return this;
    
        },
    
        getInverse: function ( m, throwOnInvertible ) {
    
            // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
            var te = this.elements;
            var me = m.elements;
    
            var n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];
            var n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];
            var n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];
            var n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];
    
            te[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
            te[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
            te[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
            te[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
            te[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
            te[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
            te[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
            te[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
            te[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
            te[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
            te[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
            te[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
            te[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
            te[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
            te[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
            te[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;
    
            var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];
    
            if ( det == 0 ) {
    
                var msg = "Matrix4.getInverse(): can't invert matrix, determinant is 0";
    
                if ( throwOnInvertible || false ) {
    
                    throw new Error( msg );
    
                } else {
    
                    console.warn( msg );
    
                }
    
                this.identity();
    
                return this;
            }
    
            this.multiplyScalar( 1 / det );
    
            return this;
    
        },
    
        translate: function ( v ) {
    
            console.warn( 'THREE.Matrix4: .translate() has been removed.' );
    
        },
    
        rotateX: function ( angle ) {
    
            console.warn( 'THREE.Matrix4: .rotateX() has been removed.' );
    
        },
    
        rotateY: function ( angle ) {
    
            console.warn( 'THREE.Matrix4: .rotateY() has been removed.' );
    
        },
    
        rotateZ: function ( angle ) {
    
            console.warn( 'THREE.Matrix4: .rotateZ() has been removed.' );
    
        },
    
        rotateByAxis: function ( axis, angle ) {
    
            console.warn( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
    
        },
    
        scale: function ( v ) {
    
            var te = this.elements;
            var x = v.x, y = v.y, z = v.z;
    
            te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
            te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
            te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
            te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
    
            return this;
    
        },
    
        getMaxScaleOnAxis: function () {
    
            var te = this.elements;
    
            var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
            var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
            var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
    
            return Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );
    
        },
    
        makeTranslation: function ( x, y, z ) {
    
            this.set(
    
                1, 0, 0, x,
                0, 1, 0, y,
                0, 0, 1, z,
                0, 0, 0, 1
    
            );
    
            return this;
    
        },
    
        makeRotationX: function ( theta ) {
    
            var c = Math.cos( theta ), s = Math.sin( theta );
    
            this.set(
    
                1, 0,  0, 0,
                0, c, - s, 0,
                0, s,  c, 0,
                0, 0,  0, 1
    
            );
    
            return this;
    
        },
    
        makeRotationY: function ( theta ) {
    
            var c = Math.cos( theta ), s = Math.sin( theta );
    
            this.set(
    
                 c, 0, s, 0,
                 0, 1, 0, 0,
                - s, 0, c, 0,
                 0, 0, 0, 1
    
            );
    
            return this;
    
        },
    
        makeRotationZ: function ( theta ) {
    
            var c = Math.cos( theta ), s = Math.sin( theta );
    
            this.set(
    
                c, - s, 0, 0,
                s,  c, 0, 0,
                0,  0, 1, 0,
                0,  0, 0, 1
    
            );
    
            return this;
    
        },
    
        makeRotationAxis: function ( axis, angle ) {
    
            // Based on http://www.gamedev.net/reference/articles/article1199.asp
    
            var c = Math.cos( angle );
            var s = Math.sin( angle );
            var t = 1 - c;
            var x = axis.x, y = axis.y, z = axis.z;
            var tx = t * x, ty = t * y;
    
            this.set(
    
                tx * x + c, tx * y - s * z, tx * z + s * y, 0,
                tx * y + s * z, ty * y + c, ty * z - s * x, 0,
                tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
                0, 0, 0, 1
    
            );
    
             return this;
    
        },
    
        makeScale: function ( x, y, z ) {
    
            this.set(
    
                x, 0, 0, 0,
                0, y, 0, 0,
                0, 0, z, 0,
                0, 0, 0, 1
    
            );
    
            return this;
    
        },
    
        compose: function ( position, quaternion, scale ) {
    
            this.makeRotationFromQuaternion( quaternion );
            this.scale( scale );
            this.setPosition( position );
    
            return this;
    
        },
    
        decompose: function () {
    
            var vector = new THREE.Vector3();
            var matrix = new THREE.Matrix4();
    
            return function ( position, quaternion, scale ) {
    
                var te = this.elements;
    
                var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
                var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
                var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
    
                // if determine is negative, we need to invert one scale
                var det = this.determinant();
                if ( det < 0 ) {
                    sx = - sx;
                }
    
                position.x = te[ 12 ];
                position.y = te[ 13 ];
                position.z = te[ 14 ];
    
                // scale the rotation part
    
                matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()
    
                var invSX = 1 / sx;
                var invSY = 1 / sy;
                var invSZ = 1 / sz;
    
                matrix.elements[ 0 ] *= invSX;
                matrix.elements[ 1 ] *= invSX;
                matrix.elements[ 2 ] *= invSX;
    
                matrix.elements[ 4 ] *= invSY;
                matrix.elements[ 5 ] *= invSY;
                matrix.elements[ 6 ] *= invSY;
    
                matrix.elements[ 8 ] *= invSZ;
                matrix.elements[ 9 ] *= invSZ;
                matrix.elements[ 10 ] *= invSZ;
    
                quaternion.setFromRotationMatrix( matrix );
    
                scale.x = sx;
                scale.y = sy;
                scale.z = sz;
    
                return this;
    
            };
    
        }(),
    
        makeFrustum: function ( left, right, bottom, top, near, far ) {
    
            var te = this.elements;
            var x = 2 * near / ( right - left );
            var y = 2 * near / ( top - bottom );
    
            var a = ( right + left ) / ( right - left );
            var b = ( top + bottom ) / ( top - bottom );
            var c = - ( far + near ) / ( far - near );
            var d = - 2 * far * near / ( far - near );
    
            te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
            te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
            te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
            te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
    
            return this;
    
        },
    
        makePerspective: function ( fov, aspect, near, far ) {
    
            var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
            var ymin = - ymax;
            var xmin = ymin * aspect;
            var xmax = ymax * aspect;
    
            return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );
    
        },
    
        makeOrthographic: function ( left, right, top, bottom, near, far ) {
    
            var te = this.elements;
            var w = right - left;
            var h = top - bottom;
            var p = far - near;
    
            var x = ( right + left ) / w;
            var y = ( top + bottom ) / h;
            var z = ( far + near ) / p;
    
            te[ 0 ] = 2 / w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
            te[ 1 ] = 0;	te[ 5 ] = 2 / h;	te[ 9 ] = 0;	te[ 13 ] = - y;
            te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 / p;	te[ 14 ] = - z;
            te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
    
            return this;
    
        },
    
        fromArray: function ( array ) {
    
            this.elements.set( array );
    
            return this;
    
        },
    
        toArray: function () {
    
            var te = this.elements;
    
            return [
                te[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],
                te[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],
                te[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],
                te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]
            ];
    
        },
    
        clone: function () {
    
            return new THREE.Matrix4().fromArray( this.elements );
    
        }
    
    };
    
    // File:src/math/Ray.js
    
    /**
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Ray = function ( origin, direction ) {
    
        this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
        this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();
    
    };
    
    THREE.Ray.prototype = {
    
        constructor: THREE.Ray,
    
        set: function ( origin, direction ) {
    
            this.origin.copy( origin );
            this.direction.copy( direction );
    
            return this;
    
        },
    
        copy: function ( ray ) {
    
            this.origin.copy( ray.origin );
            this.direction.copy( ray.direction );
    
            return this;
    
        },
    
        at: function ( t, optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
    
            return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );
    
        },
    
        recast: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( t ) {
    
                this.origin.copy( this.at( t, v1 ) );
    
                return this;
    
            };
    
        }(),
    
        closestPointToPoint: function ( point, optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
            result.subVectors( point, this.origin );
            var directionDistance = result.dot( this.direction );
    
            if ( directionDistance < 0 ) {
    
                return result.copy( this.origin );
    
            }
    
            return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
    
        },
    
        distanceToPoint: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( point ) {
    
                var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );
    
                // point behind the ray
    
                if ( directionDistance < 0 ) {
    
                    return this.origin.distanceTo( point );
    
                }
    
                v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
    
                return v1.distanceTo( point );
    
            };
    
        }(),
    
        distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
    
            // from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp
            // It returns the min distance between the ray and the segment
            // defined by v0 and v1
            // It can also set two optional targets :
            // - The closest point on the ray
            // - The closest point on the segment
    
            var segCenter = v0.clone().add( v1 ).multiplyScalar( 0.5 );
            var segDir = v1.clone().sub( v0 ).normalize();
            var segExtent = v0.distanceTo( v1 ) * 0.5;
            var diff = this.origin.clone().sub( segCenter );
            var a01 = - this.direction.dot( segDir );
            var b0 = diff.dot( this.direction );
            var b1 = - diff.dot( segDir );
            var c = diff.lengthSq();
            var det = Math.abs( 1 - a01 * a01 );
            var s0, s1, sqrDist, extDet;
    
            if ( det >= 0 ) {
    
                // The ray and segment are not parallel.
    
                s0 = a01 * b1 - b0;
                s1 = a01 * b0 - b1;
                extDet = segExtent * det;
    
                if ( s0 >= 0 ) {
    
                    if ( s1 >= - extDet ) {
    
                        if ( s1 <= extDet ) {
    
                            // region 0
                            // Minimum at interior points of ray and segment.
    
                            var invDet = 1 / det;
                            s0 *= invDet;
                            s1 *= invDet;
                            sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
    
                        } else {
    
                            // region 1
    
                            s1 = segExtent;
                            s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                            sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                        }
    
                    } else {
    
                        // region 5
    
                        s1 = - segExtent;
                        s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                        sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                    }
    
                } else {
    
                    if ( s1 <= - extDet ) {
    
                        // region 4
    
                        s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
                        s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
                        sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                    } else if ( s1 <= extDet ) {
    
                        // region 3
    
                        s0 = 0;
                        s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
                        sqrDist = s1 * ( s1 + 2 * b1 ) + c;
    
                    } else {
    
                        // region 2
    
                        s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
                        s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
                        sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
                    }
    
                }
    
            } else {
    
                // Ray and segment are parallel.
    
                s1 = ( a01 > 0 ) ? - segExtent : segExtent;
                s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
                sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
    
            }
    
            if ( optionalPointOnRay ) {
    
                optionalPointOnRay.copy( this.direction.clone().multiplyScalar( s0 ).add( this.origin ) );
    
            }
    
            if ( optionalPointOnSegment ) {
    
                optionalPointOnSegment.copy( segDir.clone().multiplyScalar( s1 ).add( segCenter ) );
    
            }
    
            return sqrDist;
    
        },
    
        isIntersectionSphere: function ( sphere ) {
    
            return this.distanceToPoint( sphere.center ) <= sphere.radius;
    
        },
    
        intersectSphere: function () {
    
            // from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-sphere-intersection/
    
            var v1 = new THREE.Vector3();
    
            return function ( sphere, optionalTarget ) {
    
                v1.subVectors( sphere.center, this.origin );
    
                var tca = v1.dot( this.direction );
    
                var d2 = v1.dot( v1 ) - tca * tca;
    
                var radius2 = sphere.radius * sphere.radius;
    
                if ( d2 > radius2 ) return null;
    
                var thc = Math.sqrt( radius2 - d2 );
    
                // t0 = first intersect point - entrance on front of sphere
                var t0 = tca - thc;
    
                // t1 = second intersect point - exit point on back of sphere
                var t1 = tca + thc;
    
                // test to see if both t0 and t1 are behind the ray - if so, return null
                if ( t0 < 0 && t1 < 0 ) return null;
    
                // test to see if t0 is behind the ray:
                // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
                // in order to always return an intersect point that is in front of the ray.
                if ( t0 < 0 ) return this.at( t1, optionalTarget );
    
                // else t0 is in front of the ray, so return the first collision point scaled by t0 
                return this.at( t0, optionalTarget );
    
            }
    
        }(),
    
        isIntersectionPlane: function ( plane ) {
    
            // check if the ray lies on the plane first
    
            var distToPoint = plane.distanceToPoint( this.origin );
    
            if ( distToPoint === 0 ) {
    
                return true;
    
            }
    
            var denominator = plane.normal.dot( this.direction );
    
            if ( denominator * distToPoint < 0 ) {
    
                return true;
    
            }
    
            // ray origin is behind the plane (and is pointing behind it)
    
            return false;
    
        },
    
        distanceToPlane: function ( plane ) {
    
            var denominator = plane.normal.dot( this.direction );
            if ( denominator == 0 ) {
    
                // line is coplanar, return origin
                if ( plane.distanceToPoint( this.origin ) == 0 ) {
    
                    return 0;
    
                }
    
                // Null is preferable to undefined since undefined means.... it is undefined
    
                return null;
    
            }
    
            var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
    
            // Return if the ray never intersects the plane
    
            return t >= 0 ? t :  null;
    
        },
    
        intersectPlane: function ( plane, optionalTarget ) {
    
            var t = this.distanceToPlane( plane );
    
            if ( t === null ) {
    
                return null;
            }
    
            return this.at( t, optionalTarget );
    
        },
    
        isIntersectionBox: function () {
    
            var v = new THREE.Vector3();
    
            return function ( box ) {
    
                return this.intersectBox( box, v ) !== null;
    
            };
    
        }(),
    
        intersectBox: function ( box , optionalTarget ) {
    
            // http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
    
            var tmin,tmax,tymin,tymax,tzmin,tzmax;
    
            var invdirx = 1 / this.direction.x,
                invdiry = 1 / this.direction.y,
                invdirz = 1 / this.direction.z;
    
            var origin = this.origin;
    
            if ( invdirx >= 0 ) {
    
                tmin = ( box.min.x - origin.x ) * invdirx;
                tmax = ( box.max.x - origin.x ) * invdirx;
    
            } else {
    
                tmin = ( box.max.x - origin.x ) * invdirx;
                tmax = ( box.min.x - origin.x ) * invdirx;
            }
    
            if ( invdiry >= 0 ) {
    
                tymin = ( box.min.y - origin.y ) * invdiry;
                tymax = ( box.max.y - origin.y ) * invdiry;
    
            } else {
    
                tymin = ( box.max.y - origin.y ) * invdiry;
                tymax = ( box.min.y - origin.y ) * invdiry;
            }
    
            if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
    
            // These lines also handle the case where tmin or tmax is NaN
            // (result of 0 * Infinity). x !== x returns true if x is NaN
    
            if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
    
            if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
    
            if ( invdirz >= 0 ) {
    
                tzmin = ( box.min.z - origin.z ) * invdirz;
                tzmax = ( box.max.z - origin.z ) * invdirz;
    
            } else {
    
                tzmin = ( box.max.z - origin.z ) * invdirz;
                tzmax = ( box.min.z - origin.z ) * invdirz;
            }
    
            if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
    
            if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
    
            if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
    
            //return point closest to the ray (positive side)
    
            if ( tmax < 0 ) return null;
    
            return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );
    
        },
    
        intersectTriangle: function () {
    
            // Compute the offset origin, edges, and normal.
            var diff = new THREE.Vector3();
            var edge1 = new THREE.Vector3();
            var edge2 = new THREE.Vector3();
            var normal = new THREE.Vector3();
    
            return function ( a, b, c, backfaceCulling, optionalTarget ) {
    
                // from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp
    
                edge1.subVectors( b, a );
                edge2.subVectors( c, a );
                normal.crossVectors( edge1, edge2 );
    
                // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
                // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
                //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
                //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
                //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
                var DdN = this.direction.dot( normal );
                var sign;
    
                if ( DdN > 0 ) {
    
                    if ( backfaceCulling ) return null;
                    sign = 1;
    
                } else if ( DdN < 0 ) {
    
                    sign = - 1;
                    DdN = - DdN;
    
                } else {
    
                    return null;
    
                }
    
                diff.subVectors( this.origin, a );
                var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );
    
                // b1 < 0, no intersection
                if ( DdQxE2 < 0 ) {
    
                    return null;
    
                }
    
                var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );
    
                // b2 < 0, no intersection
                if ( DdE1xQ < 0 ) {
    
                    return null;
    
                }
    
                // b1+b2 > 1, no intersection
                if ( DdQxE2 + DdE1xQ > DdN ) {
    
                    return null;
    
                }
    
                // Line intersects triangle, check if ray does.
                var QdN = - sign * diff.dot( normal );
    
                // t < 0, no intersection
                if ( QdN < 0 ) {
    
                    return null;
    
                }
    
                // Ray intersects triangle.
                return this.at( QdN / DdN, optionalTarget );
    
            };
    
        }(),
    
        applyMatrix4: function ( matrix4 ) {
    
            this.direction.add( this.origin ).applyMatrix4( matrix4 );
            this.origin.applyMatrix4( matrix4 );
            this.direction.sub( this.origin );
            this.direction.normalize();
    
            return this;
        },
    
        equals: function ( ray ) {
    
            return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
    
        },
    
        clone: function () {
    
            return new THREE.Ray().copy( this );
    
        }
    
    };
    
    // File:src/math/Sphere.js
    
    /**
     * @author bhouston / http://exocortex.com
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Sphere = function ( center, radius ) {
    
        this.center = ( center !== undefined ) ? center : new THREE.Vector3();
        this.radius = ( radius !== undefined ) ? radius : 0;
    
    };
    
    THREE.Sphere.prototype = {
    
        constructor: THREE.Sphere,
    
        set: function ( center, radius ) {
    
            this.center.copy( center );
            this.radius = radius;
    
            return this;
        },
    
        setFromPoints: function () {
    
            var box = new THREE.Box3();
    
            return function ( points, optionalCenter )  {
    
                var center = this.center;
    
                if ( optionalCenter !== undefined ) {
    
                    center.copy( optionalCenter );
    
                } else {
    
                    box.setFromPoints( points ).center( center );
    
                }
    
                var maxRadiusSq = 0;
    
                for ( var i = 0, il = points.length; i < il; i ++ ) {
    
                    maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
    
                }
    
                this.radius = Math.sqrt( maxRadiusSq );
    
                return this;
    
             };
    
        }(),
    
        copy: function ( sphere ) {
    
            this.center.copy( sphere.center );
            this.radius = sphere.radius;
    
            return this;
    
        },
    
        empty: function () {
    
            return ( this.radius <= 0 );
    
        },
    
        containsPoint: function ( point ) {
    
            return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
    
        },
    
        distanceToPoint: function ( point ) {
    
            return ( point.distanceTo( this.center ) - this.radius );
    
        },
    
        intersectsSphere: function ( sphere ) {
    
            var radiusSum = this.radius + sphere.radius;
    
            return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
    
        },
    
        clampPoint: function ( point, optionalTarget ) {
    
            var deltaLengthSq = this.center.distanceToSquared( point );
    
            var result = optionalTarget || new THREE.Vector3();
            result.copy( point );
    
            if ( deltaLengthSq > ( this.radius * this.radius ) ) {
    
                result.sub( this.center ).normalize();
                result.multiplyScalar( this.radius ).add( this.center );
    
            }
    
            return result;
    
        },
    
        getBoundingBox: function ( optionalTarget ) {
    
            var box = optionalTarget || new THREE.Box3();
    
            box.set( this.center, this.center );
            box.expandByScalar( this.radius );
    
            return box;
    
        },
    
        applyMatrix4: function ( matrix ) {
    
            this.center.applyMatrix4( matrix );
            this.radius = this.radius * matrix.getMaxScaleOnAxis();
    
            return this;
    
        },
    
        translate: function ( offset ) {
    
            this.center.add( offset );
    
            return this;
    
        },
    
        equals: function ( sphere ) {
    
            return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
    
        },
    
        clone: function () {
    
            return new THREE.Sphere().copy( this );
    
        }
    
    };
    
    // File:src/math/Frustum.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {
    
        this.planes = [
    
            ( p0 !== undefined ) ? p0 : new THREE.Plane(),
            ( p1 !== undefined ) ? p1 : new THREE.Plane(),
            ( p2 !== undefined ) ? p2 : new THREE.Plane(),
            ( p3 !== undefined ) ? p3 : new THREE.Plane(),
            ( p4 !== undefined ) ? p4 : new THREE.Plane(),
            ( p5 !== undefined ) ? p5 : new THREE.Plane()
    
        ];
    
    };
    
    THREE.Frustum.prototype = {
    
        constructor: THREE.Frustum,
    
        set: function ( p0, p1, p2, p3, p4, p5 ) {
    
            var planes = this.planes;
    
            planes[ 0 ].copy( p0 );
            planes[ 1 ].copy( p1 );
            planes[ 2 ].copy( p2 );
            planes[ 3 ].copy( p3 );
            planes[ 4 ].copy( p4 );
            planes[ 5 ].copy( p5 );
    
            return this;
    
        },
    
        copy: function ( frustum ) {
    
            var planes = this.planes;
    
            for ( var i = 0; i < 6; i ++ ) {
    
                planes[ i ].copy( frustum.planes[ i ] );
    
            }
    
            return this;
    
        },
    
        setFromMatrix: function ( m ) {
    
            var planes = this.planes;
            var me = m.elements;
            var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
            var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
            var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
            var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
    
            planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
            planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
            planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
            planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
            planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
            planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
    
            return this;
    
        },
    
        intersectsObject: function () {
    
            var sphere = new THREE.Sphere();
    
            return function ( object ) {
    
                var geometry = object.geometry;
    
                if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
    
                sphere.copy( geometry.boundingSphere );
                sphere.applyMatrix4( object.matrixWorld );
    
                return this.intersectsSphere( sphere );
    
            };
    
        }(),
    
        intersectsSphere: function ( sphere ) {
    
            var planes = this.planes;
            var center = sphere.center;
            var negRadius = - sphere.radius;
    
            for ( var i = 0; i < 6; i ++ ) {
    
                var distance = planes[ i ].distanceToPoint( center );
    
                if ( distance < negRadius ) {
    
                    return false;
    
                }
    
            }
    
            return true;
    
        },
    
        intersectsBox: function () {
    
            var p1 = new THREE.Vector3(),
                p2 = new THREE.Vector3();
    
            return function ( box ) {
    
                var planes = this.planes;
    
                for ( var i = 0; i < 6 ; i ++ ) {
    
                    var plane = planes[ i ];
    
                    p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
                    p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
                    p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
                    p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
                    p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
                    p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;
    
                    var d1 = plane.distanceToPoint( p1 );
                    var d2 = plane.distanceToPoint( p2 );
    
                    // if both outside plane, no intersection
    
                    if ( d1 < 0 && d2 < 0 ) {
    
                        return false;
    
                    }
                }
    
                return true;
            };
    
        }(),
    
    
        containsPoint: function ( point ) {
    
            var planes = this.planes;
    
            for ( var i = 0; i < 6; i ++ ) {
    
                if ( planes[ i ].distanceToPoint( point ) < 0 ) {
    
                    return false;
    
                }
    
            }
    
            return true;
    
        },
    
        clone: function () {
    
            return new THREE.Frustum().copy( this );
    
        }
    
    };
    
    // File:src/math/Plane.js
    
    /**
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Plane = function ( normal, constant ) {
    
        this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
        this.constant = ( constant !== undefined ) ? constant : 0;
    
    };
    
    THREE.Plane.prototype = {
    
        constructor: THREE.Plane,
    
        set: function ( normal, constant ) {
    
            this.normal.copy( normal );
            this.constant = constant;
    
            return this;
    
        },
    
        setComponents: function ( x, y, z, w ) {
    
            this.normal.set( x, y, z );
            this.constant = w;
    
            return this;
    
        },
    
        setFromNormalAndCoplanarPoint: function ( normal, point ) {
    
            this.normal.copy( normal );
            this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized
    
            return this;
    
        },
    
        setFromCoplanarPoints: function () {
    
            var v1 = new THREE.Vector3();
            var v2 = new THREE.Vector3();
    
            return function ( a, b, c ) {
    
                var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();
    
                // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
    
                this.setFromNormalAndCoplanarPoint( normal, a );
    
                return this;
    
            };
    
        }(),
    
    
        copy: function ( plane ) {
    
            this.normal.copy( plane.normal );
            this.constant = plane.constant;
    
            return this;
    
        },
    
        normalize: function () {
    
            // Note: will lead to a divide by zero if the plane is invalid.
    
            var inverseNormalLength = 1.0 / this.normal.length();
            this.normal.multiplyScalar( inverseNormalLength );
            this.constant *= inverseNormalLength;
    
            return this;
    
        },
    
        negate: function () {
    
            this.constant *= - 1;
            this.normal.negate();
    
            return this;
    
        },
    
        distanceToPoint: function ( point ) {
    
            return this.normal.dot( point ) + this.constant;
    
        },
    
        distanceToSphere: function ( sphere ) {
    
            return this.distanceToPoint( sphere.center ) - sphere.radius;
    
        },
    
        projectPoint: function ( point, optionalTarget ) {
    
            return this.orthoPoint( point, optionalTarget ).sub( point ).negate();
    
        },
    
        orthoPoint: function ( point, optionalTarget ) {
    
            var perpendicularMagnitude = this.distanceToPoint( point );
    
            var result = optionalTarget || new THREE.Vector3();
            return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );
    
        },
    
        isIntersectionLine: function ( line ) {
    
            // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
    
            var startSign = this.distanceToPoint( line.start );
            var endSign = this.distanceToPoint( line.end );
    
            return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
    
        },
    
        intersectLine: function () {
    
            var v1 = new THREE.Vector3();
    
            return function ( line, optionalTarget ) {
    
                var result = optionalTarget || new THREE.Vector3();
    
                var direction = line.delta( v1 );
    
                var denominator = this.normal.dot( direction );
    
                if ( denominator == 0 ) {
    
                    // line is coplanar, return origin
                    if ( this.distanceToPoint( line.start ) == 0 ) {
    
                        return result.copy( line.start );
    
                    }
    
                    // Unsure if this is the correct method to handle this case.
                    return undefined;
    
                }
    
                var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
    
                if ( t < 0 || t > 1 ) {
    
                    return undefined;
    
                }
    
                return result.copy( direction ).multiplyScalar( t ).add( line.start );
    
            };
    
        }(),
    
    
        coplanarPoint: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
            return result.copy( this.normal ).multiplyScalar( - this.constant );
    
        },
    
        applyMatrix4: function () {
    
            var v1 = new THREE.Vector3();
            var v2 = new THREE.Vector3();
            var m1 = new THREE.Matrix3();
    
            return function ( matrix, optionalNormalMatrix ) {
    
                // compute new normal based on theory here:
                // http://www.songho.ca/opengl/gl_normaltransform.html
                var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
                var newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );
    
                var newCoplanarPoint = this.coplanarPoint( v2 );
                newCoplanarPoint.applyMatrix4( matrix );
    
                this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );
    
                return this;
    
            };
    
        }(),
    
        translate: function ( offset ) {
    
            this.constant = this.constant - offset.dot( this.normal );
    
            return this;
    
        },
    
        equals: function ( plane ) {
    
            return plane.normal.equals( this.normal ) && ( plane.constant == this.constant );
    
        },
    
        clone: function () {
    
            return new THREE.Plane().copy( this );
    
        }
    
    };
    
    // File:src/math/Math.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Math = {
    
        generateUUID: function () {
    
            // http://www.broofa.com/Tools/Math.uuid.htm
    
            var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
            var uuid = new Array( 36 );
            var rnd = 0, r;
    
            return function () {
    
                for ( var i = 0; i < 36; i ++ ) {
    
                    if ( i == 8 || i == 13 || i == 18 || i == 23 ) {
    
                        uuid[ i ] = '-';
    
                    } else if ( i == 14 ) {
    
                        uuid[ i ] = '4';
    
                    } else {
    
                        if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
                        r = rnd & 0xf;
                        rnd = rnd >> 4;
                        uuid[ i ] = chars[ ( i == 19 ) ? ( r & 0x3 ) | 0x8 : r ];
    
                    }
                }
    
                return uuid.join( '' );
    
            };
    
        }(),
    
        // Clamp value to range <a, b>
    
        clamp: function ( x, a, b ) {
    
            return ( x < a ) ? a : ( ( x > b ) ? b : x );
    
        },
    
        // Clamp value to range <a, inf)
    
        clampBottom: function ( x, a ) {
    
            return x < a ? a : x;
    
        },
    
        // Linear mapping from range <a1, a2> to range <b1, b2>
    
        mapLinear: function ( x, a1, a2, b1, b2 ) {
    
            return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
    
        },
    
        // http://en.wikipedia.org/wiki/Smoothstep
    
        smoothstep: function ( x, min, max ) {
    
            if ( x <= min ) return 0;
            if ( x >= max ) return 1;
    
            x = ( x - min ) / ( max - min );
    
            return x * x * ( 3 - 2 * x );
    
        },
    
        smootherstep: function ( x, min, max ) {
    
            if ( x <= min ) return 0;
            if ( x >= max ) return 1;
    
            x = ( x - min ) / ( max - min );
    
            return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
    
        },
    
        // Random float from <0, 1> with 16 bits of randomness
        // (standard Math.random() creates repetitive patterns when applied over larger space)
    
        random16: function () {
    
            return ( 65280 * Math.random() + 255 * Math.random() ) / 65535;
    
        },
    
        // Random integer from <low, high> interval
    
        randInt: function ( low, high ) {
    
            return low + Math.floor( Math.random() * ( high - low + 1 ) );
    
        },
    
        // Random float from <low, high> interval
    
        randFloat: function ( low, high ) {
    
            return low + Math.random() * ( high - low );
    
        },
    
        // Random float from <-range/2, range/2> interval
    
        randFloatSpread: function ( range ) {
    
            return range * ( 0.5 - Math.random() );
    
        },
    
        degToRad: function () {
    
            var degreeToRadiansFactor = Math.PI / 180;
    
            return function ( degrees ) {
    
                return degrees * degreeToRadiansFactor;
    
            };
    
        }(),
    
        radToDeg: function () {
    
            var radianToDegreesFactor = 180 / Math.PI;
    
            return function ( radians ) {
    
                return radians * radianToDegreesFactor;
    
            };
    
        }(),
    
        isPowerOfTwo: function ( value ) {
    
            return ( value & ( value - 1 ) ) === 0 && value !== 0;
    
        }
    
    };
    
    // File:src/math/Spline.js
    
    /**
     * Spline from Tween.js, slightly optimized (and trashed)
     * http://sole.github.com/tween.js/examples/05_spline.html
     *
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Spline = function ( points ) {
    
        this.points = points;
    
        var c = [], v3 = { x: 0, y: 0, z: 0 },
        point, intPoint, weight, w2, w3,
        pa, pb, pc, pd;
    
        this.initFromArray = function ( a ) {
    
            this.points = [];
    
            for ( var i = 0; i < a.length; i ++ ) {
    
                this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };
    
            }
    
        };
    
        this.getPoint = function ( k ) {
    
            point = ( this.points.length - 1 ) * k;
            intPoint = Math.floor( point );
            weight = point - intPoint;
    
            c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
            c[ 1 ] = intPoint;
            c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
            c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;
    
            pa = this.points[ c[ 0 ] ];
            pb = this.points[ c[ 1 ] ];
            pc = this.points[ c[ 2 ] ];
            pd = this.points[ c[ 3 ] ];
    
            w2 = weight * weight;
            w3 = weight * w2;
    
            v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
            v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
            v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );
    
            return v3;
    
        };
    
        this.getControlPointsArray = function () {
    
            var i, p, l = this.points.length,
                coords = [];
    
            for ( i = 0; i < l; i ++ ) {
    
                p = this.points[ i ];
                coords[ i ] = [ p.x, p.y, p.z ];
    
            }
    
            return coords;
    
        };
    
        // approximate length by summing linear segments
    
        this.getLength = function ( nSubDivisions ) {
    
            var i, index, nSamples, position,
                point = 0, intPoint = 0, oldIntPoint = 0,
                oldPosition = new THREE.Vector3(),
                tmpVec = new THREE.Vector3(),
                chunkLengths = [],
                totalLength = 0;
    
            // first point has 0 length
    
            chunkLengths[ 0 ] = 0;
    
            if ( ! nSubDivisions ) nSubDivisions = 100;
    
            nSamples = this.points.length * nSubDivisions;
    
            oldPosition.copy( this.points[ 0 ] );
    
            for ( i = 1; i < nSamples; i ++ ) {
    
                index = i / nSamples;
    
                position = this.getPoint( index );
                tmpVec.copy( position );
    
                totalLength += tmpVec.distanceTo( oldPosition );
    
                oldPosition.copy( position );
    
                point = ( this.points.length - 1 ) * index;
                intPoint = Math.floor( point );
    
                if ( intPoint != oldIntPoint ) {
    
                    chunkLengths[ intPoint ] = totalLength;
                    oldIntPoint = intPoint;
    
                }
    
            }
    
            // last point ends with total length
    
            chunkLengths[ chunkLengths.length ] = totalLength;
    
            return { chunks: chunkLengths, total: totalLength };
    
        };
    
        this.reparametrizeByArcLength = function ( samplingCoef ) {
    
            var i, j,
                index, indexCurrent, indexNext,
                linearDistance, realDistance,
                sampling, position,
                newpoints = [],
                tmpVec = new THREE.Vector3(),
                sl = this.getLength();
    
            newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );
    
            for ( i = 1; i < this.points.length; i ++ ) {
    
                //tmpVec.copy( this.points[ i - 1 ] );
                //linearDistance = tmpVec.distanceTo( this.points[ i ] );
    
                realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];
    
                sampling = Math.ceil( samplingCoef * realDistance / sl.total );
    
                indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
                indexNext = i / ( this.points.length - 1 );
    
                for ( j = 1; j < sampling - 1; j ++ ) {
    
                    index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );
    
                    position = this.getPoint( index );
                    newpoints.push( tmpVec.copy( position ).clone() );
    
                }
    
                newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );
    
            }
    
            this.points = newpoints;
    
        };
    
        // Catmull-Rom
    
        function interpolate( p0, p1, p2, p3, t, t2, t3 ) {
    
            var v0 = ( p2 - p0 ) * 0.5,
                v1 = ( p3 - p1 ) * 0.5;
    
            return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;
    
        };
    
    };
    
    // File:src/math/Triangle.js
    
    /**
     * @author bhouston / http://exocortex.com
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Triangle = function ( a, b, c ) {
    
        this.a = ( a !== undefined ) ? a : new THREE.Vector3();
        this.b = ( b !== undefined ) ? b : new THREE.Vector3();
        this.c = ( c !== undefined ) ? c : new THREE.Vector3();
    
    };
    
    THREE.Triangle.normal = function () {
    
        var v0 = new THREE.Vector3();
    
        return function ( a, b, c, optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
    
            result.subVectors( c, b );
            v0.subVectors( a, b );
            result.cross( v0 );
    
            var resultLengthSq = result.lengthSq();
            if ( resultLengthSq > 0 ) {
    
                return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );
    
            }
    
            return result.set( 0, 0, 0 );
    
        };
    
    }();
    
    // static/instance method to calculate barycoordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    THREE.Triangle.barycoordFromPoint = function () {
    
        var v0 = new THREE.Vector3();
        var v1 = new THREE.Vector3();
        var v2 = new THREE.Vector3();
    
        return function ( point, a, b, c, optionalTarget ) {
    
            v0.subVectors( c, a );
            v1.subVectors( b, a );
            v2.subVectors( point, a );
    
            var dot00 = v0.dot( v0 );
            var dot01 = v0.dot( v1 );
            var dot02 = v0.dot( v2 );
            var dot11 = v1.dot( v1 );
            var dot12 = v1.dot( v2 );
    
            var denom = ( dot00 * dot11 - dot01 * dot01 );
    
            var result = optionalTarget || new THREE.Vector3();
    
            // colinear or singular triangle
            if ( denom == 0 ) {
                // arbitrary location outside of triangle?
                // not sure if this is the best idea, maybe should be returning undefined
                return result.set( - 2, - 1, - 1 );
            }
    
            var invDenom = 1 / denom;
            var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
            var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
    
            // barycoordinates must always sum to 1
            return result.set( 1 - u - v, v, u );
    
        };
    
    }();
    
    THREE.Triangle.containsPoint = function () {
    
        var v1 = new THREE.Vector3();
    
        return function ( point, a, b, c ) {
    
            var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );
    
            return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );
    
        };
    
    }();
    
    THREE.Triangle.prototype = {
    
        constructor: THREE.Triangle,
    
        set: function ( a, b, c ) {
    
            this.a.copy( a );
            this.b.copy( b );
            this.c.copy( c );
    
            return this;
    
        },
    
        setFromPointsAndIndices: function ( points, i0, i1, i2 ) {
    
            this.a.copy( points[ i0 ] );
            this.b.copy( points[ i1 ] );
            this.c.copy( points[ i2 ] );
    
            return this;
    
        },
    
        copy: function ( triangle ) {
    
            this.a.copy( triangle.a );
            this.b.copy( triangle.b );
            this.c.copy( triangle.c );
    
            return this;
    
        },
    
        area: function () {
    
            var v0 = new THREE.Vector3();
            var v1 = new THREE.Vector3();
    
            return function () {
    
                v0.subVectors( this.c, this.b );
                v1.subVectors( this.a, this.b );
    
                return v0.cross( v1 ).length() * 0.5;
    
            };
    
        }(),
    
        midpoint: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
            return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
    
        },
    
        normal: function ( optionalTarget ) {
    
            return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );
    
        },
    
        plane: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Plane();
    
            return result.setFromCoplanarPoints( this.a, this.b, this.c );
    
        },
    
        barycoordFromPoint: function ( point, optionalTarget ) {
    
            return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );
    
        },
    
        containsPoint: function ( point ) {
    
            return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );
    
        },
    
        equals: function ( triangle ) {
    
            return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
    
        },
    
        clone: function () {
    
            return new THREE.Triangle().copy( this );
    
        }
    
    };
    
    // File:src/core/Clock.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Clock = function ( autoStart ) {
    
        this.autoStart = ( autoStart !== undefined ) ? autoStart : true;
    
        this.startTime = 0;
        this.oldTime = 0;
        this.elapsedTime = 0;
    
        this.running = false;
    
    };
    
    THREE.Clock.prototype = {
    
        constructor: THREE.Clock,
    
        start: function () {
    
            this.startTime = self.performance !== undefined && self.performance.now !== undefined
                         ? self.performance.now()
                         : Date.now();
    
            this.oldTime = this.startTime;
            this.running = true;
        },
    
        stop: function () {
    
            this.getElapsedTime();
            this.running = false;
    
        },
    
        getElapsedTime: function () {
    
            this.getDelta();
            return this.elapsedTime;
    
        },
    
        getDelta: function () {
    
            var diff = 0;
    
            if ( this.autoStart && ! this.running ) {
    
                this.start();
    
            }
    
            if ( this.running ) {
    
                var newTime = self.performance !== undefined && self.performance.now !== undefined
                         ? self.performance.now()
                         : Date.now();
    
                diff = 0.001 * ( newTime - this.oldTime );
                this.oldTime = newTime;
    
                this.elapsedTime += diff;
    
            }
    
            return diff;
    
        }
    
    };
    
    // File:src/core/EventDispatcher.js
    
    /**
     * https://github.com/mrdoob/eventdispatcher.js/
     */
    
    THREE.EventDispatcher = function () {}
    
    THREE.EventDispatcher.prototype = {
    
        constructor: THREE.EventDispatcher,
    
        apply: function ( object ) {
    
            object.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
            object.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
            object.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
            object.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;
    
        },
    
        addEventListener: function ( type, listener ) {
    
            if ( this._listeners === undefined ) this._listeners = {};
    
            var listeners = this._listeners;
    
            if ( listeners[ type ] === undefined ) {
    
                listeners[ type ] = [];
    
            }
    
            if ( listeners[ type ].indexOf( listener ) === - 1 ) {
    
                listeners[ type ].push( listener );
    
            }
    
        },
    
        hasEventListener: function ( type, listener ) {
    
            if ( this._listeners === undefined ) return false;
    
            var listeners = this._listeners;
    
            if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {
    
                return true;
    
            }
    
            return false;
    
        },
    
        removeEventListener: function ( type, listener ) {
    
            if ( this._listeners === undefined ) return;
    
            var listeners = this._listeners;
            var listenerArray = listeners[ type ];
    
            if ( listenerArray !== undefined ) {
    
                var index = listenerArray.indexOf( listener );
    
                if ( index !== - 1 ) {
    
                    listenerArray.splice( index, 1 );
    
                }
    
            }
    
        },
    
        dispatchEvent: function ( event ) {
    
            if ( this._listeners === undefined ) return;
    
            var listeners = this._listeners;
            var listenerArray = listeners[ event.type ];
    
            if ( listenerArray !== undefined ) {
    
                event.target = this;
    
                var array = [];
                var length = listenerArray.length;
    
                for ( var i = 0; i < length; i ++ ) {
    
                    array[ i ] = listenerArray[ i ];
    
                }
    
                for ( var i = 0; i < length; i ++ ) {
    
                    array[ i ].call( this, event );
    
                }
    
            }
    
        }
    
    };
    
    // File:src/core/Raycaster.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author bhouston / http://exocortex.com/
     * @author stephomi / http://stephaneginier.com/
     */
    
    ( function ( THREE ) {
    
        THREE.Raycaster = function ( origin, direction, near, far ) {
    
            this.ray = new THREE.Ray( origin, direction );
            // direction is assumed to be normalized (for accurate distance calculations)
    
            this.near = near || 0;
            this.far = far || Infinity;
    
            this.params = {
                Sprite: {},
                Mesh: {},
                PointCloud: { threshold: 1 },
                LOD: {},
                Line: {}
            };
    
        };
    
        var descSort = function ( a, b ) {
    
            return a.distance - b.distance;
    
        };
    
        var intersectObject = function ( object, raycaster, intersects, recursive ) {
    
            object.raycast( raycaster, intersects );
    
            if ( recursive === true ) {
    
                var children = object.children;
    
                for ( var i = 0, l = children.length; i < l; i ++ ) {
    
                    intersectObject( children[ i ], raycaster, intersects, true );
    
                }
    
            }
    
        };
    
        //
    
        THREE.Raycaster.prototype = {
    
            constructor: THREE.Raycaster,
    
            precision: 0.0001,
            linePrecision: 1,
    
            set: function ( origin, direction ) {
    
                this.ray.set( origin, direction );
                // direction is assumed to be normalized (for accurate distance calculations)
    
            },
    
            intersectObject: function ( object, recursive ) {
    
                var intersects = [];
    
                intersectObject( object, this, intersects, recursive );
    
                intersects.sort( descSort );
    
                return intersects;
    
            },
    
            intersectObjects: function ( objects, recursive ) {
    
                var intersects = [];
    
                if ( objects instanceof Array === false ) {
    
                    console.log( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
                    return intersects;
    
                }
    
                for ( var i = 0, l = objects.length; i < l; i ++ ) {
    
                    intersectObject( objects[ i ], this, intersects, recursive );
    
                }
    
                intersects.sort( descSort );
    
                return intersects;
    
            }
    
        };
    
    }( THREE ) );
    
    // File:src/core/Object3D.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     * @author WestLangley / http://github.com/WestLangley
     */
    
    THREE.Object3D = function () {
    
        Object.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );
    
        this.uuid = THREE.Math.generateUUID();
    
        this.name = '';
        this.type = 'Object3D';
    
        this.parent = undefined;
        this.children = [];
    
        this.up = THREE.Object3D.DefaultUp.clone();
    
        var scope = this;
    
        var position = new THREE.Vector3();
        var rotation = new THREE.Euler();
        var quaternion = new THREE.Quaternion();
        var scale = new THREE.Vector3( 1, 1, 1 );
    
        var onRotationChange = function () {
            quaternion.setFromEuler( rotation, false );
        };
    
        var onQuaternionChange = function () {
            rotation.setFromQuaternion( quaternion, undefined, false );
        };
    
        rotation.onChange( onRotationChange );
        quaternion.onChange( onQuaternionChange );
    
        Object.defineProperties( this, {
            position: {
                enumerable: true,
                value: position
            },
            rotation: {
                enumerable: true,
                value: rotation
            },
            quaternion: {
                enumerable: true,
                value: quaternion
            },
            scale: {
                enumerable: true,
                value: scale
            },
        } );
    
        this.renderDepth = null;
    
        this.rotationAutoUpdate = true;
    
        this.matrix = new THREE.Matrix4();
        this.matrixWorld = new THREE.Matrix4();
    
        this.matrixAutoUpdate = true;
        this.matrixWorldNeedsUpdate = false;
    
        this.visible = true;
    
        this.castShadow = false;
        this.receiveShadow = false;
    
        this.frustumCulled = true;
    
        this.userData = {};
    
    };
    
    THREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );
    
    THREE.Object3D.prototype = {
    
        constructor: THREE.Object3D,
    
        get eulerOrder () {
    
            console.warn( 'THREE.Object3D: .eulerOrder has been moved to .rotation.order.' );
    
            return this.rotation.order;
    
        },
    
        set eulerOrder ( value ) {
    
            console.warn( 'THREE.Object3D: .eulerOrder has been moved to .rotation.order.' );
    
            this.rotation.order = value;
    
        },
    
        get useQuaternion () {
    
            console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
    
        },
    
        set useQuaternion ( value ) {
    
            console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
    
        },
    
        applyMatrix: function ( matrix ) {
    
            this.matrix.multiplyMatrices( matrix, this.matrix );
    
            this.matrix.decompose( this.position, this.quaternion, this.scale );
    
        },
    
        setRotationFromAxisAngle: function ( axis, angle ) {
    
            // assumes axis is normalized
    
            this.quaternion.setFromAxisAngle( axis, angle );
    
        },
    
        setRotationFromEuler: function ( euler ) {
    
            this.quaternion.setFromEuler( euler, true );
    
        },
    
        setRotationFromMatrix: function ( m ) {
    
            // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
    
            this.quaternion.setFromRotationMatrix( m );
    
        },
    
        setRotationFromQuaternion: function ( q ) {
    
            // assumes q is normalized
    
            this.quaternion.copy( q );
    
        },
    
        rotateOnAxis: function () {
    
            // rotate object on axis in object space
            // axis is assumed to be normalized
    
            var q1 = new THREE.Quaternion();
    
            return function ( axis, angle ) {
    
                q1.setFromAxisAngle( axis, angle );
    
                this.quaternion.multiply( q1 );
    
                return this;
    
            }
    
        }(),
    
        rotateX: function () {
    
            var v1 = new THREE.Vector3( 1, 0, 0 );
    
            return function ( angle ) {
    
                return this.rotateOnAxis( v1, angle );
    
            };
    
        }(),
    
        rotateY: function () {
    
            var v1 = new THREE.Vector3( 0, 1, 0 );
    
            return function ( angle ) {
    
                return this.rotateOnAxis( v1, angle );
    
            };
    
        }(),
    
        rotateZ: function () {
    
            var v1 = new THREE.Vector3( 0, 0, 1 );
    
            return function ( angle ) {
    
                return this.rotateOnAxis( v1, angle );
    
            };
    
        }(),
    
        translateOnAxis: function () {
    
            // translate object by distance along axis in object space
            // axis is assumed to be normalized
    
            var v1 = new THREE.Vector3();
    
            return function ( axis, distance ) {
    
                v1.copy( axis ).applyQuaternion( this.quaternion );
    
                this.position.add( v1.multiplyScalar( distance ) );
    
                return this;
    
            }
    
        }(),
    
        translate: function ( distance, axis ) {
    
            console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
            return this.translateOnAxis( axis, distance );
    
        },
    
        translateX: function () {
    
            var v1 = new THREE.Vector3( 1, 0, 0 );
    
            return function ( distance ) {
    
                return this.translateOnAxis( v1, distance );
    
            };
    
        }(),
    
        translateY: function () {
    
            var v1 = new THREE.Vector3( 0, 1, 0 );
    
            return function ( distance ) {
    
                return this.translateOnAxis( v1, distance );
    
            };
    
        }(),
    
        translateZ: function () {
    
            var v1 = new THREE.Vector3( 0, 0, 1 );
    
            return function ( distance ) {
    
                return this.translateOnAxis( v1, distance );
    
            };
    
        }(),
    
        localToWorld: function ( vector ) {
    
            return vector.applyMatrix4( this.matrixWorld );
    
        },
    
        worldToLocal: function () {
    
            var m1 = new THREE.Matrix4();
    
            return function ( vector ) {
    
                return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );
    
            };
    
        }(),
    
        lookAt: function () {
    
            // This routine does not support objects with rotated and/or translated parent(s)
    
            var m1 = new THREE.Matrix4();
    
            return function ( vector ) {
    
                m1.lookAt( vector, this.position, this.up );
    
                this.quaternion.setFromRotationMatrix( m1 );
    
            };
    
        }(),
    
        add: function ( object ) {
    
            if ( arguments.length > 1 ) {
    
                for ( var i = 0; i < arguments.length; i++ ) {
    
                    this.add( arguments[ i ] );
    
                }
    
                return this;
    
            };
    
            if ( object === this ) {
    
                console.error( "THREE.Object3D.add:", object, "can't be added as a child of itself." );
                return this;
    
            }
    
            if ( object instanceof THREE.Object3D ) {
    
                if ( object.parent !== undefined ) {
    
                    object.parent.remove( object );
    
                }
    
                object.parent = this;
                object.dispatchEvent( { type: 'added' } );
    
                this.children.push( object );
    
            } else {
    
                console.error( "THREE.Object3D.add:", object, "is not an instance of THREE.Object3D." );
    
            }
    
            return this;
    
        },
    
        remove: function ( object ) {
    
            if ( arguments.length > 1 ) {
    
                for ( var i = 0; i < arguments.length; i++ ) {
    
                    this.remove( arguments[ i ] );
    
                }
    
            };
    
            var index = this.children.indexOf( object );
    
            if ( index !== - 1 ) {
    
                object.parent = undefined;
    
                object.dispatchEvent( { type: 'removed' } );
    
                this.children.splice( index, 1 );
    
            }
    
        },
    
        getChildByName: function ( name, recursive ) {
    
            console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
            return this.getObjectByName( name, recursive );
    
        },
    
        getObjectById: function ( id, recursive ) {
    
            if ( this.id === id ) return this;
    
            for ( var i = 0, l = this.children.length; i < l; i ++ ) {
    
                var child = this.children[ i ];
                var object = child.getObjectById( id, recursive );
    
                if ( object !== undefined ) {
    
                    return object;
    
                }
    
            }
    
            return undefined;
    
        },
    
        getObjectByName: function ( name, recursive ) {
    
            if ( this.name === name ) return this;
    
            for ( var i = 0, l = this.children.length; i < l; i ++ ) {
    
                var child = this.children[ i ];
                var object = child.getObjectByName( name, recursive );
    
                if ( object !== undefined ) {
    
                    return object;
    
                }
    
            }
    
            return undefined;
    
        },
    
        getWorldPosition: function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
    
            this.updateMatrixWorld( true );
    
            return result.setFromMatrixPosition( this.matrixWorld );
    
        },
    
        getWorldQuaternion: function () {
    
            var position = new THREE.Vector3();
            var scale = new THREE.Vector3();
    
            return function ( optionalTarget ) {
    
                var result = optionalTarget || new THREE.Quaternion();
    
                this.updateMatrixWorld( true );
    
                this.matrixWorld.decompose( position, result, scale );
    
                return result;
    
            }
    
        }(),
    
        getWorldRotation: function () {
    
            var quaternion = new THREE.Quaternion();
    
            return function ( optionalTarget ) {
    
                var result = optionalTarget || new THREE.Euler();
    
                this.getWorldQuaternion( quaternion );
    
                return result.setFromQuaternion( quaternion, this.rotation.order, false );
    
            }
    
        }(),
    
        getWorldScale: function () {
    
            var position = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
    
            return function ( optionalTarget ) {
    
                var result = optionalTarget || new THREE.Vector3();
    
                this.updateMatrixWorld( true );
    
                this.matrixWorld.decompose( position, quaternion, result );
    
                return result;
    
            }
    
        }(),
    
        getWorldDirection: function () {
    
            var quaternion = new THREE.Quaternion();
    
            return function ( optionalTarget ) {
    
                var result = optionalTarget || new THREE.Vector3();
    
                this.getWorldQuaternion( quaternion );
    
                return result.set( 0, 0, 1 ).applyQuaternion( quaternion );
    
            }
    
        }(),
    
        raycast: function () {},
    
        traverse: function ( callback ) {
    
            callback( this );
    
            for ( var i = 0, l = this.children.length; i < l; i ++ ) {
    
                this.children[ i ].traverse( callback );
    
            }
    
        },
    
        traverseVisible: function ( callback ) {
    
            if ( this.visible === false ) return;
    
            callback( this );
    
            for ( var i = 0, l = this.children.length; i < l; i ++ ) {
    
                this.children[ i ].traverseVisible( callback );
    
            }
    
        },
    
        updateMatrix: function () {
    
            this.matrix.compose( this.position, this.quaternion, this.scale );
    
            this.matrixWorldNeedsUpdate = true;
    
        },
    
        updateMatrixWorld: function ( force ) {
    
            if ( this.matrixAutoUpdate === true ) this.updateMatrix();
    
            if ( this.matrixWorldNeedsUpdate === true || force === true ) {
    
                if ( this.parent === undefined ) {
    
                    this.matrixWorld.copy( this.matrix );
    
                } else {
    
                    this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
    
                }
    
                this.matrixWorldNeedsUpdate = false;
    
                force = true;
    
            }
    
            // update children
    
            for ( var i = 0, l = this.children.length; i < l; i ++ ) {
    
                this.children[ i ].updateMatrixWorld( force );
    
            }
    
        },
    
        toJSON: function () {
    
            var output = {
                metadata: {
                    version: 4.3,
                    type: 'Object',
                    generator: 'ObjectExporter'
                }
            };
    
            //
    
            var geometries = {};
    
            var parseGeometry = function ( geometry ) {
    
                if ( output.geometries === undefined ) {
    
                    output.geometries = [];
    
                }
    
                if ( geometries[ geometry.uuid ] === undefined ) {
    
                    var json = geometry.toJSON();
    
                    delete json.metadata;
    
                    geometries[ geometry.uuid ] = json;
    
                    output.geometries.push( json );
    
                }
    
                return geometry.uuid;
    
            };
    
            //
    
            var materials = {};
    
            var parseMaterial = function ( material ) {
    
                if ( output.materials === undefined ) {
    
                    output.materials = [];
    
                }
    
                if ( materials[ material.uuid ] === undefined ) {
    
                    var json = material.toJSON();
    
                    delete json.metadata;
    
                    materials[ material.uuid ] = json;
    
                    output.materials.push( json );
    
                }
    
                return material.uuid;
    
            };
    
            //
    
            var parseObject = function ( object ) {
    
                var data = {};
    
                data.uuid = object.uuid;
                data.type = object.type;
    
                if ( object.name !== '' ) data.name = object.name;
                if ( JSON.stringify( object.userData ) !== '{}' ) data.userData = object.userData;
                if ( object.visible !== true ) data.visible = object.visible;
    
                if ( object instanceof THREE.PerspectiveCamera ) {
    
                    data.fov = object.fov;
                    data.aspect = object.aspect;
                    data.near = object.near;
                    data.far = object.far;
    
                } else if ( object instanceof THREE.OrthographicCamera ) {
    
                    data.left = object.left;
                    data.right = object.right;
                    data.top = object.top;
                    data.bottom = object.bottom;
                    data.near = object.near;
                    data.far = object.far;
    
                } else if ( object instanceof THREE.AmbientLight ) {
    
                    data.color = object.color.getHex();
    
                } else if ( object instanceof THREE.DirectionalLight ) {
    
                    data.color = object.color.getHex();
                    data.intensity = object.intensity;
    
                } else if ( object instanceof THREE.PointLight ) {
    
                    data.color = object.color.getHex();
                    data.intensity = object.intensity;
                    data.distance = object.distance;
    
                } else if ( object instanceof THREE.SpotLight ) {
    
                    data.color = object.color.getHex();
                    data.intensity = object.intensity;
                    data.distance = object.distance;
                    data.angle = object.angle;
                    data.exponent = object.exponent;
    
                } else if ( object instanceof THREE.HemisphereLight ) {
    
                    data.color = object.color.getHex();
                    data.groundColor = object.groundColor.getHex();
    
                } else if ( object instanceof THREE.Mesh ) {
    
                    data.geometry = parseGeometry( object.geometry );
                    data.material = parseMaterial( object.material );
    
                } else if ( object instanceof THREE.Line ) {
    
                    data.geometry = parseGeometry( object.geometry );
                    data.material = parseMaterial( object.material );
    
                } else if ( object instanceof THREE.Sprite ) {
    
                    data.material = parseMaterial( object.material );
    
                }
    
                data.matrix = object.matrix.toArray();
    
                if ( object.children.length > 0 ) {
    
                    data.children = [];
    
                    for ( var i = 0; i < object.children.length; i ++ ) {
    
                        data.children.push( parseObject( object.children[ i ] ) );
    
                    }
    
                }
    
                return data;
    
            }
    
            output.object = parseObject( this );
    
            return output;
    
        },
    
        clone: function ( object, recursive ) {
    
            if ( object === undefined ) object = new THREE.Object3D();
            if ( recursive === undefined ) recursive = true;
    
            object.name = this.name;
    
            object.up.copy( this.up );
    
            object.position.copy( this.position );
            object.quaternion.copy( this.quaternion );
            object.scale.copy( this.scale );
    
            object.renderDepth = this.renderDepth;
    
            object.rotationAutoUpdate = this.rotationAutoUpdate;
    
            object.matrix.copy( this.matrix );
            object.matrixWorld.copy( this.matrixWorld );
    
            object.matrixAutoUpdate = this.matrixAutoUpdate;
            object.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;
    
            object.visible = this.visible;
    
            object.castShadow = this.castShadow;
            object.receiveShadow = this.receiveShadow;
    
            object.frustumCulled = this.frustumCulled;
    
            object.userData = JSON.parse( JSON.stringify( this.userData ) );
    
            if ( recursive === true ) {
    
                for ( var i = 0; i < this.children.length; i ++ ) {
    
                    var child = this.children[ i ];
                    object.add( child.clone() );
    
                }
    
            }
    
            return object;
    
        }
    
    };
    
    THREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );
    
    THREE.Object3DIdCount = 0;
    
    // File:src/core/Projector.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Projector = function () {
    
        console.warn( 'THREE.Projector has been moved to /examples/renderers/Projector.js.' );
    
        this.projectVector = function ( vector, camera ) {
    
            console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
            vector.project( camera );
    
        };
    
        this.unprojectVector = function ( vector, camera ) {
    
            console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
            vector.unproject( camera );
    
        };
    
        this.pickingRay = function ( vector, camera ) {
    
            console.error( 'THREE.Projector: .pickingRay() has been removed.' );
    
        };
    
    };
    
    // File:src/core/Face3.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {
    
        this.a = a;
        this.b = b;
        this.c = c;
    
        this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
        this.vertexNormals = normal instanceof Array ? normal : [];
    
        this.color = color instanceof THREE.Color ? color : new THREE.Color();
        this.vertexColors = color instanceof Array ? color : [];
    
        this.vertexTangents = [];
    
        this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
    
    };
    
    THREE.Face3.prototype = {
    
        constructor: THREE.Face3,
    
        clone: function () {
    
            var face = new THREE.Face3( this.a, this.b, this.c );
    
            face.normal.copy( this.normal );
            face.color.copy( this.color );
    
            face.materialIndex = this.materialIndex;
    
            for ( var i = 0, il = this.vertexNormals.length; i < il; i ++ ) {
    
                face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();
    
            }
    
            for ( var i = 0, il = this.vertexColors.length; i < il; i ++ ) {
    
                face.vertexColors[ i ] = this.vertexColors[ i ].clone();
    
            }
    
            for ( var i = 0, il = this.vertexTangents.length; i < il; i ++ ) {
    
                face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();
    
            }
    
            return face;
    
        }
    
    };
    
    // File:src/core/Face4.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {
    
        console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' )
        return new THREE.Face3( a, b, c, normal, color, materialIndex );
    
    };
    
    // File:src/core/BufferAttribute.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.BufferAttribute = function ( array, itemSize ) {
    
        this.array = array;
        this.itemSize = itemSize;
    
        this.needsUpdate = false;
    
    };
    
    THREE.BufferAttribute.prototype = {
    
        constructor: THREE.BufferAttribute,
    
        get length () {
    
            return this.array.length;
    
        },
    
        copyAt: function ( index1, attribute, index2 ) {
    
            index1 *= this.itemSize;
            index2 *= attribute.itemSize;
    
            for ( var i = 0, l = this.itemSize; i < l; i ++ ) {
    
                this.array[ index1 + i ] = attribute.array[ index2 + i ];
    
            }
    
        },
    
        set: function ( value ) {
    
            this.array.set( value );
    
            return this;
    
        },
    
        setX: function ( index, x ) {
    
            this.array[ index * this.itemSize ] = x;
    
            return this;
    
        },
    
        setY: function ( index, y ) {
    
            this.array[ index * this.itemSize + 1 ] = y;
    
            return this;
    
        },
    
        setZ: function ( index, z ) {
    
            this.array[ index * this.itemSize + 2 ] = z;
    
            return this;
    
        },
    
        setXY: function ( index, x, y ) {
    
            index *= this.itemSize;
    
            this.array[ index     ] = x;
            this.array[ index + 1 ] = y;
    
            return this;
    
        },
    
        setXYZ: function ( index, x, y, z ) {
    
            index *= this.itemSize;
    
            this.array[ index     ] = x;
            this.array[ index + 1 ] = y;
            this.array[ index + 2 ] = z;
    
            return this;
    
        },
    
        setXYZW: function ( index, x, y, z, w ) {
    
            index *= this.itemSize;
    
            this.array[ index     ] = x;
            this.array[ index + 1 ] = y;
            this.array[ index + 2 ] = z;
            this.array[ index + 3 ] = w;
    
            return this;
    
        },
    
        clone: function () {
    
            return new THREE.BufferAttribute( new this.array.constructor( this.array ), this.itemSize );
    
        }
    
    };
    
    //
    
    THREE.Int8Attribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    };
    
    THREE.Uint8Attribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    };
    
    THREE.Uint8ClampedAttribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    
    };
    
    THREE.Int16Attribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    };
    
    THREE.Uint16Attribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    };
    
    THREE.Int32Attribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    };
    
    THREE.Uint32Attribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    };
    
    THREE.Float32Attribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    };
    
    THREE.Float64Attribute = function ( data, itemSize ) {
    
        console.warn( 'THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
        return new THREE.BufferAttribute( data, itemSize );
    
    };
    
    // File:src/core/BufferGeometry.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.BufferGeometry = function () {
    
        Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );
    
        this.uuid = THREE.Math.generateUUID();
    
        this.name = '';
        this.type = 'BufferGeometry';
    
        this.attributes = {};
        this.attributesKeys = [];
    
        this.drawcalls = [];
        this.offsets = this.drawcalls; // backwards compatibility
    
        this.boundingBox = null;
        this.boundingSphere = null;
    
    };
    
    THREE.BufferGeometry.prototype = {
    
        constructor: THREE.BufferGeometry,
    
        addAttribute: function ( name, attribute ) {
    
            if ( attribute instanceof THREE.BufferAttribute === false ) {
    
                console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );
    
                this.attributes[ name ] = { array: arguments[ 1 ], itemSize: arguments[ 2 ] };
    
                return;
    
            }
    
            this.attributes[ name ] = attribute;
            this.attributesKeys = Object.keys( this.attributes );
    
        },
    
        getAttribute: function ( name ) {
    
            return this.attributes[ name ];
    
        },
    
        addDrawCall: function ( start, count, indexOffset ) {
    
            this.drawcalls.push( {
    
                start: start,
                count: count,
                index: indexOffset !== undefined ? indexOffset : 0
    
            } );
    
        },
    
        applyMatrix: function ( matrix ) {
    
            var position = this.attributes.position;
    
            if ( position !== undefined ) {
    
                matrix.applyToVector3Array( position.array );
                position.needsUpdate = true;
    
            }
    
            var normal = this.attributes.normal;
    
            if ( normal !== undefined ) {
    
                var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
    
                normalMatrix.applyToVector3Array( normal.array );
                normal.needsUpdate = true;
    
            }
    
        },
    
        center: function () {
    
            // TODO
    
        },
    
        fromGeometry: function ( geometry, settings ) {
    
            settings = settings || { 'vertexColors': THREE.NoColors };
    
            var vertices = geometry.vertices;
            var faces = geometry.faces;
            var faceVertexUvs = geometry.faceVertexUvs;
            var vertexColors = settings.vertexColors;
            var hasFaceVertexUv = faceVertexUvs[ 0 ].length > 0;
            var hasFaceVertexNormals = faces[ 0 ].vertexNormals.length == 3;
    
            var positions = new Float32Array( faces.length * 3 * 3 );
            this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
    
            var normals = new Float32Array( faces.length * 3 * 3 );
            this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
    
            if ( vertexColors !== THREE.NoColors ) {
    
                var colors = new Float32Array( faces.length * 3 * 3 );
                this.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );
    
            }
    
            if ( hasFaceVertexUv === true ) {
    
                var uvs = new Float32Array( faces.length * 3 * 2 );
                this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
    
            }
    
            for ( var i = 0, i2 = 0, i3 = 0; i < faces.length; i ++, i2 += 6, i3 += 9 ) {
    
                var face = faces[ i ];
    
                var a = vertices[ face.a ];
                var b = vertices[ face.b ];
                var c = vertices[ face.c ];
    
                positions[ i3     ] = a.x;
                positions[ i3 + 1 ] = a.y;
                positions[ i3 + 2 ] = a.z;
    
                positions[ i3 + 3 ] = b.x;
                positions[ i3 + 4 ] = b.y;
                positions[ i3 + 5 ] = b.z;
    
                positions[ i3 + 6 ] = c.x;
                positions[ i3 + 7 ] = c.y;
                positions[ i3 + 8 ] = c.z;
    
                if ( hasFaceVertexNormals === true ) {
    
                    var na = face.vertexNormals[ 0 ];
                    var nb = face.vertexNormals[ 1 ];
                    var nc = face.vertexNormals[ 2 ];
    
                    normals[ i3     ] = na.x;
                    normals[ i3 + 1 ] = na.y;
                    normals[ i3 + 2 ] = na.z;
    
                    normals[ i3 + 3 ] = nb.x;
                    normals[ i3 + 4 ] = nb.y;
                    normals[ i3 + 5 ] = nb.z;
    
                    normals[ i3 + 6 ] = nc.x;
                    normals[ i3 + 7 ] = nc.y;
                    normals[ i3 + 8 ] = nc.z;
    
                } else {
    
                    var n = face.normal;
    
                    normals[ i3     ] = n.x;
                    normals[ i3 + 1 ] = n.y;
                    normals[ i3 + 2 ] = n.z;
    
                    normals[ i3 + 3 ] = n.x;
                    normals[ i3 + 4 ] = n.y;
                    normals[ i3 + 5 ] = n.z;
    
                    normals[ i3 + 6 ] = n.x;
                    normals[ i3 + 7 ] = n.y;
                    normals[ i3 + 8 ] = n.z;
    
                }
    
                if ( vertexColors === THREE.FaceColors ) {
    
                    var fc = face.color;
    
                    colors[ i3     ] = fc.r;
                    colors[ i3 + 1 ] = fc.g;
                    colors[ i3 + 2 ] = fc.b;
    
                    colors[ i3 + 3 ] = fc.r;
                    colors[ i3 + 4 ] = fc.g;
                    colors[ i3 + 5 ] = fc.b;
    
                    colors[ i3 + 6 ] = fc.r;
                    colors[ i3 + 7 ] = fc.g;
                    colors[ i3 + 8 ] = fc.b;
    
                } else if ( vertexColors === THREE.VertexColors ) {
    
                    var vca = face.vertexColors[ 0 ];
                    var vcb = face.vertexColors[ 1 ];
                    var vcc = face.vertexColors[ 2 ];
    
                    colors[ i3     ] = vca.r;
                    colors[ i3 + 1 ] = vca.g;
                    colors[ i3 + 2 ] = vca.b;
    
                    colors[ i3 + 3 ] = vcb.r;
                    colors[ i3 + 4 ] = vcb.g;
                    colors[ i3 + 5 ] = vcb.b;
    
                    colors[ i3 + 6 ] = vcc.r;
                    colors[ i3 + 7 ] = vcc.g;
                    colors[ i3 + 8 ] = vcc.b;
    
                }
    
                if ( hasFaceVertexUv === true ) {
    
                    var uva = faceVertexUvs[ 0 ][ i ][ 0 ];
                    var uvb = faceVertexUvs[ 0 ][ i ][ 1 ];
                    var uvc = faceVertexUvs[ 0 ][ i ][ 2 ];
    
                    uvs[ i2     ] = uva.x;
                    uvs[ i2 + 1 ] = uva.y;
    
                    uvs[ i2 + 2 ] = uvb.x;
                    uvs[ i2 + 3 ] = uvb.y;
    
                    uvs[ i2 + 4 ] = uvc.x;
                    uvs[ i2 + 5 ] = uvc.y;
    
                }
    
            }
    
            this.computeBoundingSphere()
    
            return this;
    
        },
    
        computeBoundingBox: function () {
    
            var vector = new THREE.Vector3();
    
            return function () {
    
                if ( this.boundingBox === null ) {
    
                    this.boundingBox = new THREE.Box3();
    
                }
    
                var positions = this.attributes.position.array;
    
                if ( positions ) {
    
                    var bb = this.boundingBox;
                    bb.makeEmpty();
    
                    for ( var i = 0, il = positions.length; i < il; i += 3 ) {
    
                        vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
                        bb.expandByPoint( vector );
    
                    }
    
                }
    
                if ( positions === undefined || positions.length === 0 ) {
    
                    this.boundingBox.min.set( 0, 0, 0 );
                    this.boundingBox.max.set( 0, 0, 0 );
    
                }
    
                if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
    
                    console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.' );
    
                }
    
            }
    
        }(),
    
        computeBoundingSphere: function () {
    
            var box = new THREE.Box3();
            var vector = new THREE.Vector3();
    
            return function () {
    
                if ( this.boundingSphere === null ) {
    
                    this.boundingSphere = new THREE.Sphere();
    
                }
    
                var positions = this.attributes.position.array;
    
                if ( positions ) {
    
                    box.makeEmpty();
    
                    var center = this.boundingSphere.center;
    
                    for ( var i = 0, il = positions.length; i < il; i += 3 ) {
    
                        vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
                        box.expandByPoint( vector );
    
                    }
    
                    box.center( center );
    
                    // hoping to find a boundingSphere with a radius smaller than the
                    // boundingSphere of the boundingBox:  sqrt(3) smaller in the best case
    
                    var maxRadiusSq = 0;
    
                    for ( var i = 0, il = positions.length; i < il; i += 3 ) {
    
                        vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
                        maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );
    
                    }
    
                    this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
    
                    if ( isNaN( this.boundingSphere.radius ) ) {
    
                        console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.' );
    
                    }
    
                }
    
            }
    
        }(),
    
        computeFaceNormals: function () {
    
            // backwards compatibility
    
        },
    
        computeVertexNormals: function () {
    
            var attributes = this.attributes;
    
            if ( attributes.position ) {
    
                var positions = attributes.position.array;
    
                if ( attributes.normal === undefined ) {
    
                    this.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );
    
                } else {
    
                    // reset existing normals to zero
    
                    var normals = attributes.normal.array;
    
                    for ( var i = 0, il = normals.length; i < il; i ++ ) {
    
                        normals[ i ] = 0;
    
                    }
    
                }
    
                var normals = attributes.normal.array;
    
                var vA, vB, vC,
    
                pA = new THREE.Vector3(),
                pB = new THREE.Vector3(),
                pC = new THREE.Vector3(),
    
                cb = new THREE.Vector3(),
                ab = new THREE.Vector3();
    
                // indexed elements
    
                if ( attributes.index ) {
    
                    var indices = attributes.index.array;
    
                    var offsets = ( this.offsets.length > 0 ? this.offsets : [ { start: 0, count: indices.length, index: 0 } ] );
    
                    for ( var j = 0, jl = offsets.length; j < jl; ++ j ) {
    
                        var start = offsets[ j ].start;
                        var count = offsets[ j ].count;
                        var index = offsets[ j ].index;
    
                        for ( var i = start, il = start + count; i < il; i += 3 ) {
    
                            vA = ( index + indices[ i     ] ) * 3;
                            vB = ( index + indices[ i + 1 ] ) * 3;
                            vC = ( index + indices[ i + 2 ] ) * 3;
    
                            pA.fromArray( positions, vA );
                            pB.fromArray( positions, vB );
                            pC.fromArray( positions, vC );
    
                            cb.subVectors( pC, pB );
                            ab.subVectors( pA, pB );
                            cb.cross( ab );
    
                            normals[ vA     ] += cb.x;
                            normals[ vA + 1 ] += cb.y;
                            normals[ vA + 2 ] += cb.z;
    
                            normals[ vB     ] += cb.x;
                            normals[ vB + 1 ] += cb.y;
                            normals[ vB + 2 ] += cb.z;
    
                            normals[ vC     ] += cb.x;
                            normals[ vC + 1 ] += cb.y;
                            normals[ vC + 2 ] += cb.z;
    
                        }
    
                    }
    
                } else {
    
                    // non-indexed elements (unconnected triangle soup)
    
                    for ( var i = 0, il = positions.length; i < il; i += 9 ) {
    
                        pA.fromArray( positions, i );
                        pB.fromArray( positions, i + 3 );
                        pC.fromArray( positions, i + 6 );
    
                        cb.subVectors( pC, pB );
                        ab.subVectors( pA, pB );
                        cb.cross( ab );
    
                        normals[ i     ] = cb.x;
                        normals[ i + 1 ] = cb.y;
                        normals[ i + 2 ] = cb.z;
    
                        normals[ i + 3 ] = cb.x;
                        normals[ i + 4 ] = cb.y;
                        normals[ i + 5 ] = cb.z;
    
                        normals[ i + 6 ] = cb.x;
                        normals[ i + 7 ] = cb.y;
                        normals[ i + 8 ] = cb.z;
    
                    }
    
                }
    
                this.normalizeNormals();
    
                attributes.normal.needsUpdate = true;
    
            }
    
        },
    
        computeTangents: function () {
    
            // based on http://www.terathon.com/code/tangent.html
            // (per vertex tangents)
    
            if ( this.attributes.index === undefined ||
                 this.attributes.position === undefined ||
                 this.attributes.normal === undefined ||
                 this.attributes.uv === undefined ) {
    
                console.warn( 'Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );
                return;
    
            }
    
            var indices = this.attributes.index.array;
            var positions = this.attributes.position.array;
            var normals = this.attributes.normal.array;
            var uvs = this.attributes.uv.array;
    
            var nVertices = positions.length / 3;
    
            if ( this.attributes.tangent === undefined ) {
    
                this.addAttribute( 'tangent', new THREE.BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );
    
            }
    
            var tangents = this.attributes.tangent.array;
    
            var tan1 = [], tan2 = [];
    
            for ( var k = 0; k < nVertices; k ++ ) {
    
                tan1[ k ] = new THREE.Vector3();
                tan2[ k ] = new THREE.Vector3();
    
            }
    
            var vA = new THREE.Vector3(),
                vB = new THREE.Vector3(),
                vC = new THREE.Vector3(),
    
                uvA = new THREE.Vector2(),
                uvB = new THREE.Vector2(),
                uvC = new THREE.Vector2(),
    
                x1, x2, y1, y2, z1, z2,
                s1, s2, t1, t2, r;
    
            var sdir = new THREE.Vector3(), tdir = new THREE.Vector3();
    
            function handleTriangle( a, b, c ) {
    
                vA.fromArray( positions, a * 3 );
                vB.fromArray( positions, b * 3 );
                vC.fromArray( positions, c * 3 );
    
                uvA.fromArray( uvs, a * 2 );
                uvB.fromArray( uvs, b * 2 );
                uvC.fromArray( uvs, c * 2 );
    
                x1 = vB.x - vA.x;
                x2 = vC.x - vA.x;
    
                y1 = vB.y - vA.y;
                y2 = vC.y - vA.y;
    
                z1 = vB.z - vA.z;
                z2 = vC.z - vA.z;
    
                s1 = uvB.x - uvA.x;
                s2 = uvC.x - uvA.x;
    
                t1 = uvB.y - uvA.y;
                t2 = uvC.y - uvA.y;
    
                r = 1.0 / ( s1 * t2 - s2 * t1 );
    
                sdir.set(
                    ( t2 * x1 - t1 * x2 ) * r,
                    ( t2 * y1 - t1 * y2 ) * r,
                    ( t2 * z1 - t1 * z2 ) * r
                );
    
                tdir.set(
                    ( s1 * x2 - s2 * x1 ) * r,
                    ( s1 * y2 - s2 * y1 ) * r,
                    ( s1 * z2 - s2 * z1 ) * r
                );
    
                tan1[ a ].add( sdir );
                tan1[ b ].add( sdir );
                tan1[ c ].add( sdir );
    
                tan2[ a ].add( tdir );
                tan2[ b ].add( tdir );
                tan2[ c ].add( tdir );
    
            }
    
            var i, il;
            var j, jl;
            var iA, iB, iC;
    
            if ( this.drawcalls.length === 0 ) {
    
                this.addDrawCall( 0, indices.length, 0 );
    
            }
    
            var drawcalls = this.drawcalls;
    
            for ( j = 0, jl = drawcalls.length; j < jl; ++ j ) {
    
                var start = drawcalls[ j ].start;
                var count = drawcalls[ j ].count;
                var index = drawcalls[ j ].index;
    
                for ( i = start, il = start + count; i < il; i += 3 ) {
    
                    iA = index + indices[ i ];
                    iB = index + indices[ i + 1 ];
                    iC = index + indices[ i + 2 ];
    
                    handleTriangle( iA, iB, iC );
    
                }
    
            }
    
            var tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();
            var n = new THREE.Vector3(), n2 = new THREE.Vector3();
            var w, t, test;
    
            function handleVertex( v ) {
    
                n.fromArray( normals, v * 3 );
                n2.copy( n );
    
                t = tan1[ v ];
    
                // Gram-Schmidt orthogonalize
    
                tmp.copy( t );
                tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();
    
                // Calculate handedness
    
                tmp2.crossVectors( n2, t );
                test = tmp2.dot( tan2[ v ] );
                w = ( test < 0.0 ) ? - 1.0 : 1.0;
    
                tangents[ v * 4     ] = tmp.x;
                tangents[ v * 4 + 1 ] = tmp.y;
                tangents[ v * 4 + 2 ] = tmp.z;
                tangents[ v * 4 + 3 ] = w;
    
            }
    
            for ( j = 0, jl = drawcalls.length; j < jl; ++ j ) {
    
                var start = drawcalls[ j ].start;
                var count = drawcalls[ j ].count;
                var index = drawcalls[ j ].index;
    
                for ( i = start, il = start + count; i < il; i += 3 ) {
    
                    iA = index + indices[ i ];
                    iB = index + indices[ i + 1 ];
                    iC = index + indices[ i + 2 ];
    
                    handleVertex( iA );
                    handleVertex( iB );
                    handleVertex( iC );
    
                }
    
            }
    
        },
    
        /*
            computeOffsets
            Compute the draw offset for large models by chunking the index buffer into chunks of 65k addressable vertices.
            This method will effectively rewrite the index buffer and remap all attributes to match the new indices.
            WARNING: This method will also expand the vertex count to prevent sprawled triangles across draw offsets.
            indexBufferSize - Defaults to 65535, but allows for larger or smaller chunks.
        */
        computeOffsets: function ( indexBufferSize ) {
    
            var size = indexBufferSize;
            if ( indexBufferSize === undefined )
                size = 65535; //WebGL limits type of index buffer values to 16-bit.
    
            var s = Date.now();
    
            var indices = this.attributes.index.array;
            var vertices = this.attributes.position.array;
    
            var verticesCount = ( vertices.length / 3 );
            var facesCount = ( indices.length / 3 );
    
            /*
            console.log("Computing buffers in offsets of "+size+" -> indices:"+indices.length+" vertices:"+vertices.length);
            console.log("Faces to process: "+(indices.length/3));
            console.log("Reordering "+verticesCount+" vertices.");
            */
    
            var sortedIndices = new Uint16Array( indices.length ); //16-bit buffers
            var indexPtr = 0;
            var vertexPtr = 0;
    
            var offsets = [ { start:0, count:0, index:0 } ];
            var offset = offsets[ 0 ];
    
            var duplicatedVertices = 0;
            var newVerticeMaps = 0;
            var faceVertices = new Int32Array( 6 );
            var vertexMap = new Int32Array( vertices.length );
            var revVertexMap = new Int32Array( vertices.length );
            for ( var j = 0; j < vertices.length; j ++ ) { vertexMap[ j ] = - 1; revVertexMap[ j ] = - 1; }
    
            /*
                Traverse every face and reorder vertices in the proper offsets of 65k.
                We can have more than 65k entries in the index buffer per offset, but only reference 65k values.
            */
            for ( var findex = 0; findex < facesCount; findex ++ ) {
                newVerticeMaps = 0;
    
                for ( var vo = 0; vo < 3; vo ++ ) {
                    var vid = indices[ findex * 3 + vo ];
                    if ( vertexMap[ vid ] == - 1 ) {
                        //Unmapped vertice
                        faceVertices[ vo * 2 ] = vid;
                        faceVertices[ vo * 2 + 1 ] = - 1;
                        newVerticeMaps ++;
                    } else if ( vertexMap[ vid ] < offset.index ) {
                        //Reused vertices from previous block (duplicate)
                        faceVertices[ vo * 2 ] = vid;
                        faceVertices[ vo * 2 + 1 ] = - 1;
                        duplicatedVertices ++;
                    } else {
                        //Reused vertice in the current block
                        faceVertices[ vo * 2 ] = vid;
                        faceVertices[ vo * 2 + 1 ] = vertexMap[ vid ];
                    }
                }
    
                var faceMax = vertexPtr + newVerticeMaps;
                if ( faceMax > ( offset.index + size ) ) {
                    var new_offset = { start:indexPtr, count:0, index:vertexPtr };
                    offsets.push( new_offset );
                    offset = new_offset;
    
                    //Re-evaluate reused vertices in light of new offset.
                    for ( var v = 0; v < 6; v += 2 ) {
                        var new_vid = faceVertices[ v + 1 ];
                        if ( new_vid > - 1 && new_vid < offset.index )
                            faceVertices[ v + 1 ] = - 1;
                    }
                }
    
                //Reindex the face.
                for ( var v = 0; v < 6; v += 2 ) {
                    var vid = faceVertices[ v ];
                    var new_vid = faceVertices[ v + 1 ];
    
                    if ( new_vid === - 1 )
                        new_vid = vertexPtr ++;
    
                    vertexMap[ vid ] = new_vid;
                    revVertexMap[ new_vid ] = vid;
                    sortedIndices[ indexPtr ++ ] = new_vid - offset.index; //XXX overflows at 16bit
                    offset.count ++;
                }
            }
    
            /* Move all attribute values to map to the new computed indices , also expand the vertice stack to match our new vertexPtr. */
            this.reorderBuffers( sortedIndices, revVertexMap, vertexPtr );
            this.offsets = offsets;
    
            /*
            var orderTime = Date.now();
            console.log("Reorder time: "+(orderTime-s)+"ms");
            console.log("Duplicated "+duplicatedVertices+" vertices.");
            console.log("Compute Buffers time: "+(Date.now()-s)+"ms");
            console.log("Draw offsets: "+offsets.length);
            */
    
            return offsets;
        },
    
        merge: function () {
    
            console.log( 'BufferGeometry.merge(): TODO' );
    
        },
    
        normalizeNormals: function () {
    
            var normals = this.attributes.normal.array;
    
            var x, y, z, n;
    
            for ( var i = 0, il = normals.length; i < il; i += 3 ) {
    
                x = normals[ i ];
                y = normals[ i + 1 ];
                z = normals[ i + 2 ];
    
                n = 1.0 / Math.sqrt( x * x + y * y + z * z );
    
                normals[ i     ] *= n;
                normals[ i + 1 ] *= n;
                normals[ i + 2 ] *= n;
    
            }
    
        },
    
        /*
            reoderBuffers:
            Reorder attributes based on a new indexBuffer and indexMap.
            indexBuffer - Uint16Array of the new ordered indices.
            indexMap - Int32Array where the position is the new vertex ID and the value the old vertex ID for each vertex.
            vertexCount - Amount of total vertices considered in this reordering (in case you want to grow the vertice stack).
        */
        reorderBuffers: function ( indexBuffer, indexMap, vertexCount ) {
    
            /* Create a copy of all attributes for reordering. */
            var sortedAttributes = {};
            for ( var attr in this.attributes ) {
                if ( attr == 'index' )
                    continue;
                var sourceArray = this.attributes[ attr ].array;
                sortedAttributes[ attr ] = new sourceArray.constructor( this.attributes[ attr ].itemSize * vertexCount );
            }
    
            /* Move attribute positions based on the new index map */
            for ( var new_vid = 0; new_vid < vertexCount; new_vid ++ ) {
                var vid = indexMap[ new_vid ];
                for ( var attr in this.attributes ) {
                    if ( attr == 'index' )
                        continue;
                    var attrArray = this.attributes[ attr ].array;
                    var attrSize = this.attributes[ attr ].itemSize;
                    var sortedAttr = sortedAttributes[ attr ];
                    for ( var k = 0; k < attrSize; k ++ )
                        sortedAttr[ new_vid * attrSize + k ] = attrArray[ vid * attrSize + k ];
                }
            }
    
            /* Carry the new sorted buffers locally */
            this.attributes[ 'index' ].array = indexBuffer;
            for ( var attr in this.attributes ) {
                if ( attr == 'index' )
                    continue;
                this.attributes[ attr ].array = sortedAttributes[ attr ];
                this.attributes[ attr ].numItems = this.attributes[ attr ].itemSize * vertexCount;
            }
        },
    
        toJSON: function () {
    
            var output = {
                metadata: {
                    version: 4.0,
                    type: 'BufferGeometry',
                    generator: 'BufferGeometryExporter'
                },
                uuid: this.uuid,
                type: this.type,
                data: {
                    attributes: {}
                }
            };
    
            var attributes = this.attributes;
            var offsets = this.offsets;
            var boundingSphere = this.boundingSphere;
    
            for ( var key in attributes ) {
    
                var attribute = attributes[ key ];
    
                var array = [], typeArray = attribute.array;
    
                for ( var i = 0, l = typeArray.length; i < l; i ++ ) {
    
                    array[ i ] = typeArray[ i ];
    
                }
    
                output.data.attributes[ key ] = {
                    itemSize: attribute.itemSize,
                    type: attribute.array.constructor.name,
                    array: array
                }
    
            }
    
            if ( offsets.length > 0 ) {
    
                output.data.offsets = JSON.parse( JSON.stringify( offsets ) );
    
            }
    
            if ( boundingSphere !== null ) {
    
                output.data.boundingSphere = {
                    center: boundingSphere.center.toArray(),
                    radius: boundingSphere.radius
                }
    
            }
    
            return output;
    
        },
    
        clone: function () {
    
            var geometry = new THREE.BufferGeometry();
    
            for ( var attr in this.attributes ) {
    
                var sourceAttr = this.attributes[ attr ];
                geometry.addAttribute( attr, sourceAttr.clone() );
    
            }
    
            for ( var i = 0, il = this.offsets.length; i < il; i ++ ) {
    
                var offset = this.offsets[ i ];
    
                geometry.offsets.push( {
    
                    start: offset.start,
                    index: offset.index,
                    count: offset.count
    
                } );
    
            }
    
            return geometry;
    
        },
    
        dispose: function () {
    
            this.dispatchEvent( { type: 'dispose' } );
    
        }
    
    };
    
    THREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );
    
    // File:src/core/Geometry.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author kile / http://kile.stravaganza.org/
     * @author alteredq / http://alteredqualia.com/
     * @author mikael emtinger / http://gomo.se/
     * @author zz85 / http://www.lab4games.net/zz85/blog
     * @author bhouston / http://exocortex.com
     */
    
    THREE.Geometry = function () {
    
        Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );
    
        this.uuid = THREE.Math.generateUUID();
    
        this.name = '';
        this.type = 'Geometry';
    
        this.vertices = [];
        this.colors = [];  // one-to-one vertex colors, used in Points and Line
    
        this.faces = [];
    
        this.faceVertexUvs = [ [] ];
    
        this.morphTargets = [];
        this.morphColors = [];
        this.morphNormals = [];
    
        this.skinWeights = [];
        this.skinIndices = [];
    
        this.lineDistances = [];
    
        this.boundingBox = null;
        this.boundingSphere = null;
    
        this.hasTangents = false;
    
        this.dynamic = true; // the intermediate typed arrays will be deleted when set to false
    
        // update flags
    
        this.verticesNeedUpdate = false;
        this.elementsNeedUpdate = false;
        this.uvsNeedUpdate = false;
        this.normalsNeedUpdate = false;
        this.tangentsNeedUpdate = false;
        this.colorsNeedUpdate = false;
        this.lineDistancesNeedUpdate = false;
    
        this.groupsNeedUpdate = false;
    
    };
    
    THREE.Geometry.prototype = {
    
        constructor: THREE.Geometry,
    
        applyMatrix: function ( matrix ) {
    
            var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
    
            for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {
    
                var vertex = this.vertices[ i ];
                vertex.applyMatrix4( matrix );
    
            }
    
            for ( var i = 0, il = this.faces.length; i < il; i ++ ) {
    
                var face = this.faces[ i ];
                face.normal.applyMatrix3( normalMatrix ).normalize();
    
                for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
    
                    face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();
    
                }
    
            }
    
            if ( this.boundingBox instanceof THREE.Box3 ) {
    
                this.computeBoundingBox();
    
            }
    
            if ( this.boundingSphere instanceof THREE.Sphere ) {
    
                this.computeBoundingSphere();
    
            }
    
        },
    
        fromBufferGeometry: function ( geometry ) {
    
            var scope = this;
    
            var attributes = geometry.attributes;
    
            var vertices = attributes.position.array;
            var indices = attributes.index !== undefined ? attributes.index.array : undefined;
            var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
            var colors = attributes.color !== undefined ? attributes.color.array : undefined;
            var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
    
            var tempNormals = [];
            var tempUVs = [];
    
            for ( var i = 0, j = 0; i < vertices.length; i += 3, j += 2 ) {
    
                scope.vertices.push( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );
    
                if ( normals !== undefined ) {
    
                    tempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );
    
                }
    
                if ( colors !== undefined ) {
    
                    scope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );
    
                }
    
                if ( uvs !== undefined ) {
    
                    tempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );
    
                }
    
            }
    
            var addFace = function ( a, b, c ) {
    
                var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
                var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];
    
                scope.faces.push( new THREE.Face3( a, b, c, vertexNormals, vertexColors ) );
                scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ], tempUVs[ b ], tempUVs[ c ] ] );
    
            };
    
            if ( indices !== undefined ) {
    
                for ( var i = 0; i < indices.length; i += 3 ) {
    
                    addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );
    
                }
    
            } else {
    
                for ( var i = 0; i < vertices.length / 3; i += 3 ) {
    
                    addFace( i, i + 1, i + 2 );
    
                }
    
            }
            
            this.computeFaceNormals();
    
            if ( geometry.boundingBox !== null ) {
    
                this.boundingBox = geometry.boundingBox.clone();
    
            }
    
            if ( geometry.boundingSphere !== null ) {
    
                this.boundingSphere = geometry.boundingSphere.clone();
    
            }
    
            return this;
    
        },
    
        center: function () {
    
            this.computeBoundingBox();
    
            var offset = new THREE.Vector3();
    
            offset.addVectors( this.boundingBox.min, this.boundingBox.max );
            offset.multiplyScalar( - 0.5 );
    
            this.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );
            this.computeBoundingBox();
    
            return offset;
    
        },
    
        computeFaceNormals: function () {
    
            var cb = new THREE.Vector3(), ab = new THREE.Vector3();
    
            for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                var face = this.faces[ f ];
    
                var vA = this.vertices[ face.a ];
                var vB = this.vertices[ face.b ];
                var vC = this.vertices[ face.c ];
    
                cb.subVectors( vC, vB );
                ab.subVectors( vA, vB );
                cb.cross( ab );
    
                cb.normalize();
    
                face.normal.copy( cb );
    
            }
    
        },
    
        computeVertexNormals: function ( areaWeighted ) {
    
            var v, vl, f, fl, face, vertices;
    
            vertices = new Array( this.vertices.length );
    
            for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
    
                vertices[ v ] = new THREE.Vector3();
    
            }
    
            if ( areaWeighted ) {
    
                // vertex normals weighted by triangle areas
                // http://www.iquilezles.org/www/articles/normals/normals.htm
    
                var vA, vB, vC, vD;
                var cb = new THREE.Vector3(), ab = new THREE.Vector3(),
                    db = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();
    
                for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                    face = this.faces[ f ];
    
                    vA = this.vertices[ face.a ];
                    vB = this.vertices[ face.b ];
                    vC = this.vertices[ face.c ];
    
                    cb.subVectors( vC, vB );
                    ab.subVectors( vA, vB );
                    cb.cross( ab );
    
                    vertices[ face.a ].add( cb );
                    vertices[ face.b ].add( cb );
                    vertices[ face.c ].add( cb );
    
                }
    
            } else {
    
                for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                    face = this.faces[ f ];
    
                    vertices[ face.a ].add( face.normal );
                    vertices[ face.b ].add( face.normal );
                    vertices[ face.c ].add( face.normal );
    
                }
    
            }
    
            for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
    
                vertices[ v ].normalize();
    
            }
    
            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                face = this.faces[ f ];
    
                face.vertexNormals[ 0 ] = vertices[ face.a ].clone();
                face.vertexNormals[ 1 ] = vertices[ face.b ].clone();
                face.vertexNormals[ 2 ] = vertices[ face.c ].clone();
    
            }
    
        },
    
        computeMorphNormals: function () {
    
            var i, il, f, fl, face;
    
            // save original normals
            // - create temp variables on first access
            //   otherwise just copy (for faster repeated calls)
    
            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                face = this.faces[ f ];
    
                if ( ! face.__originalFaceNormal ) {
    
                    face.__originalFaceNormal = face.normal.clone();
    
                } else {
    
                    face.__originalFaceNormal.copy( face.normal );
    
                }
    
                if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];
    
                for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {
    
                    if ( ! face.__originalVertexNormals[ i ] ) {
    
                        face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();
    
                    } else {
    
                        face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );
    
                    }
    
                }
    
            }
    
            // use temp geometry to compute face and vertex normals for each morph
    
            var tmpGeo = new THREE.Geometry();
            tmpGeo.faces = this.faces;
    
            for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
    
                // create on first access
    
                if ( ! this.morphNormals[ i ] ) {
    
                    this.morphNormals[ i ] = {};
                    this.morphNormals[ i ].faceNormals = [];
                    this.morphNormals[ i ].vertexNormals = [];
    
                    var dstNormalsFace = this.morphNormals[ i ].faceNormals;
                    var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;
    
                    var faceNormal, vertexNormals;
    
                    for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                        faceNormal = new THREE.Vector3();
                        vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };
    
                        dstNormalsFace.push( faceNormal );
                        dstNormalsVertex.push( vertexNormals );
    
                    }
    
                }
    
                var morphNormals = this.morphNormals[ i ];
    
                // set vertices to morph target
    
                tmpGeo.vertices = this.morphTargets[ i ].vertices;
    
                // compute morph normals
    
                tmpGeo.computeFaceNormals();
                tmpGeo.computeVertexNormals();
    
                // store morph normals
    
                var faceNormal, vertexNormals;
    
                for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                    face = this.faces[ f ];
    
                    faceNormal = morphNormals.faceNormals[ f ];
                    vertexNormals = morphNormals.vertexNormals[ f ];
    
                    faceNormal.copy( face.normal );
    
                    vertexNormals.a.copy( face.vertexNormals[ 0 ] );
                    vertexNormals.b.copy( face.vertexNormals[ 1 ] );
                    vertexNormals.c.copy( face.vertexNormals[ 2 ] );
    
                }
    
            }
    
            // restore original normals
    
            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                face = this.faces[ f ];
    
                face.normal = face.__originalFaceNormal;
                face.vertexNormals = face.__originalVertexNormals;
    
            }
    
        },
    
        computeTangents: function () {
    
            // based on http://www.terathon.com/code/tangent.html
            // tangents go to vertices
    
            var f, fl, v, vl, i, il, vertexIndex,
                face, uv, vA, vB, vC, uvA, uvB, uvC,
                x1, x2, y1, y2, z1, z2,
                s1, s2, t1, t2, r, t, test,
                tan1 = [], tan2 = [],
                sdir = new THREE.Vector3(), tdir = new THREE.Vector3(),
                tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),
                n = new THREE.Vector3(), w;
    
            for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
    
                tan1[ v ] = new THREE.Vector3();
                tan2[ v ] = new THREE.Vector3();
    
            }
    
            function handleTriangle( context, a, b, c, ua, ub, uc ) {
    
                vA = context.vertices[ a ];
                vB = context.vertices[ b ];
                vC = context.vertices[ c ];
    
                uvA = uv[ ua ];
                uvB = uv[ ub ];
                uvC = uv[ uc ];
    
                x1 = vB.x - vA.x;
                x2 = vC.x - vA.x;
                y1 = vB.y - vA.y;
                y2 = vC.y - vA.y;
                z1 = vB.z - vA.z;
                z2 = vC.z - vA.z;
    
                s1 = uvB.x - uvA.x;
                s2 = uvC.x - uvA.x;
                t1 = uvB.y - uvA.y;
                t2 = uvC.y - uvA.y;
    
                r = 1.0 / ( s1 * t2 - s2 * t1 );
                sdir.set( ( t2 * x1 - t1 * x2 ) * r,
                          ( t2 * y1 - t1 * y2 ) * r,
                          ( t2 * z1 - t1 * z2 ) * r );
                tdir.set( ( s1 * x2 - s2 * x1 ) * r,
                          ( s1 * y2 - s2 * y1 ) * r,
                          ( s1 * z2 - s2 * z1 ) * r );
    
                tan1[ a ].add( sdir );
                tan1[ b ].add( sdir );
                tan1[ c ].add( sdir );
    
                tan2[ a ].add( tdir );
                tan2[ b ].add( tdir );
                tan2[ c ].add( tdir );
    
            }
    
            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                face = this.faces[ f ];
                uv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents
    
                handleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );
    
            }
    
            var faceIndex = [ 'a', 'b', 'c', 'd' ];
    
            for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
    
                face = this.faces[ f ];
    
                for ( i = 0; i < Math.min( face.vertexNormals.length, 3 ); i ++ ) {
    
                    n.copy( face.vertexNormals[ i ] );
    
                    vertexIndex = face[ faceIndex[ i ] ];
    
                    t = tan1[ vertexIndex ];
    
                    // Gram-Schmidt orthogonalize
    
                    tmp.copy( t );
                    tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();
    
                    // Calculate handedness
    
                    tmp2.crossVectors( face.vertexNormals[ i ], t );
                    test = tmp2.dot( tan2[ vertexIndex ] );
                    w = ( test < 0.0 ) ? - 1.0 : 1.0;
    
                    face.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );
    
                }
    
            }
    
            this.hasTangents = true;
    
        },
    
        computeLineDistances: function () {
    
            var d = 0;
            var vertices = this.vertices;
    
            for ( var i = 0, il = vertices.length; i < il; i ++ ) {
    
                if ( i > 0 ) {
    
                    d += vertices[ i ].distanceTo( vertices[ i - 1 ] );
    
                }
    
                this.lineDistances[ i ] = d;
    
            }
    
        },
    
        computeBoundingBox: function () {
    
            if ( this.boundingBox === null ) {
    
                this.boundingBox = new THREE.Box3();
    
            }
    
            this.boundingBox.setFromPoints( this.vertices );
    
        },
    
        computeBoundingSphere: function () {
    
            if ( this.boundingSphere === null ) {
    
                this.boundingSphere = new THREE.Sphere();
    
            }
    
            this.boundingSphere.setFromPoints( this.vertices );
    
        },
    
        merge: function ( geometry, matrix, materialIndexOffset ) {
    
            if ( geometry instanceof THREE.Geometry === false ) {
    
                console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
                return;
    
            }
    
            var normalMatrix,
            vertexOffset = this.vertices.length,
            vertices1 = this.vertices,
            vertices2 = geometry.vertices,
            faces1 = this.faces,
            faces2 = geometry.faces,
            uvs1 = this.faceVertexUvs[ 0 ],
            uvs2 = geometry.faceVertexUvs[ 0 ];
    
            if ( materialIndexOffset === undefined ) materialIndexOffset = 0;
    
            if ( matrix !== undefined ) {
    
                normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
    
            }
    
            // vertices
    
            for ( var i = 0, il = vertices2.length; i < il; i ++ ) {
    
                var vertex = vertices2[ i ];
    
                var vertexCopy = vertex.clone();
    
                if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );
    
                vertices1.push( vertexCopy );
    
            }
    
            // faces
    
            for ( i = 0, il = faces2.length; i < il; i ++ ) {
    
                var face = faces2[ i ], faceCopy, normal, color,
                faceVertexNormals = face.vertexNormals,
                faceVertexColors = face.vertexColors;
    
                faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
                faceCopy.normal.copy( face.normal );
    
                if ( normalMatrix !== undefined ) {
    
                    faceCopy.normal.applyMatrix3( normalMatrix ).normalize();
    
                }
    
                for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {
    
                    normal = faceVertexNormals[ j ].clone();
    
                    if ( normalMatrix !== undefined ) {
    
                        normal.applyMatrix3( normalMatrix ).normalize();
    
                    }
    
                    faceCopy.vertexNormals.push( normal );
    
                }
    
                faceCopy.color.copy( face.color );
    
                for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {
    
                    color = faceVertexColors[ j ];
                    faceCopy.vertexColors.push( color.clone() );
    
                }
    
                faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
    
                faces1.push( faceCopy );
    
            }
    
            // uvs
    
            for ( i = 0, il = uvs2.length; i < il; i ++ ) {
    
                var uv = uvs2[ i ], uvCopy = [];
    
                if ( uv === undefined ) {
    
                    continue;
    
                }
    
                for ( var j = 0, jl = uv.length; j < jl; j ++ ) {
    
                    uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );
    
                }
    
                uvs1.push( uvCopy );
    
            }
    
        },
    
        /*
         * Checks for duplicate vertices with hashmap.
         * Duplicated vertices are removed
         * and faces' vertices are updated.
         */
    
        mergeVertices: function () {
    
            var verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)
            var unique = [], changes = [];
    
            var v, key;
            var precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001
            var precision = Math.pow( 10, precisionPoints );
            var i,il, face;
            var indices, k, j, jl, u;
    
            for ( i = 0, il = this.vertices.length; i < il; i ++ ) {
    
                v = this.vertices[ i ];
                key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );
    
                if ( verticesMap[ key ] === undefined ) {
    
                    verticesMap[ key ] = i;
                    unique.push( this.vertices[ i ] );
                    changes[ i ] = unique.length - 1;
    
                } else {
    
                    //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
                    changes[ i ] = changes[ verticesMap[ key ] ];
    
                }
    
            };
    
    
            // if faces are completely degenerate after merging vertices, we
            // have to remove them from the geometry.
            var faceIndicesToRemove = [];
    
            for ( i = 0, il = this.faces.length; i < il; i ++ ) {
    
                face = this.faces[ i ];
    
                face.a = changes[ face.a ];
                face.b = changes[ face.b ];
                face.c = changes[ face.c ];
    
                indices = [ face.a, face.b, face.c ];
    
                var dupIndex = - 1;
    
                // if any duplicate vertices are found in a Face3
                // we have to remove the face as nothing can be saved
                for ( var n = 0; n < 3; n ++ ) {
                    if ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {
    
                        dupIndex = n;
                        faceIndicesToRemove.push( i );
                        break;
    
                    }
                }
    
            }
    
            for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
                var idx = faceIndicesToRemove[ i ];
    
                this.faces.splice( idx, 1 );
    
                for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {
    
                    this.faceVertexUvs[ j ].splice( idx, 1 );
    
                }
    
            }
    
            // Use unique set of vertices
    
            var diff = this.vertices.length - unique.length;
            this.vertices = unique;
            return diff;
    
        },
    
        toJSON: function () {
    
            var output = {
                metadata: {
                    version: 4.0,
                    type: 'BufferGeometry',
                    generator: 'BufferGeometryExporter'
                },
                uuid: this.uuid,
                type: this.type
            };
    
            if ( this.name !== "" ) output.name = this.name;
    
            if ( this.parameters !== undefined ) {
    
                var parameters = this.parameters;
    
                for ( var key in parameters ) {
    
                    if ( parameters[ key ] !== undefined ) output[ key ] = parameters[ key ];
    
                }
    
                return output;
    
            }
    
            var vertices = [];
    
            for ( var i = 0; i < this.vertices.length; i ++ ) {
    
                var vertex = this.vertices[ i ];
                vertices.push( vertex.x, vertex.y, vertex.z );
    
            }
    
            var faces = [];
            var normals = [];
            var normalsHash = {};
            var colors = [];
            var colorsHash = {};
            var uvs = [];
            var uvsHash = {};
    
            for ( var i = 0; i < this.faces.length; i ++ ) {
    
                var face = this.faces[ i ];
    
                var hasMaterial = false; // face.materialIndex !== undefined;
                var hasFaceUv = false; // deprecated
                var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
                var hasFaceNormal = face.normal.length() > 0;
                var hasFaceVertexNormal = face.vertexNormals.length > 0;
                var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
                var hasFaceVertexColor = face.vertexColors.length > 0;
    
                var faceType = 0;
    
                faceType = setBit( faceType, 0, 0 );
                faceType = setBit( faceType, 1, hasMaterial );
                faceType = setBit( faceType, 2, hasFaceUv );
                faceType = setBit( faceType, 3, hasFaceVertexUv );
                faceType = setBit( faceType, 4, hasFaceNormal );
                faceType = setBit( faceType, 5, hasFaceVertexNormal );
                faceType = setBit( faceType, 6, hasFaceColor );
                faceType = setBit( faceType, 7, hasFaceVertexColor );
    
                faces.push( faceType );
                faces.push( face.a, face.b, face.c );
    
    
                /*
                if ( hasMaterial ) {
    
                    faces.push( face.materialIndex );
    
                }
                */
    
                if ( hasFaceVertexUv ) {
    
                    var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];
    
                    faces.push(
                        getUvIndex( faceVertexUvs[ 0 ] ),
                        getUvIndex( faceVertexUvs[ 1 ] ),
                        getUvIndex( faceVertexUvs[ 2 ] )
                    );
    
                }
    
                if ( hasFaceNormal ) {
    
                    faces.push( getNormalIndex( face.normal ) );
    
                }
    
                if ( hasFaceVertexNormal ) {
    
                    var vertexNormals = face.vertexNormals;
    
                    faces.push(
                        getNormalIndex( vertexNormals[ 0 ] ),
                        getNormalIndex( vertexNormals[ 1 ] ),
                        getNormalIndex( vertexNormals[ 2 ] )
                    );
    
                }
    
                if ( hasFaceColor ) {
    
                    faces.push( getColorIndex( face.color ) );
    
                }
    
                if ( hasFaceVertexColor ) {
    
                    var vertexColors = face.vertexColors;
    
                    faces.push(
                        getColorIndex( vertexColors[ 0 ] ),
                        getColorIndex( vertexColors[ 1 ] ),
                        getColorIndex( vertexColors[ 2 ] )
                    );
    
                }
    
            }
    
            function setBit( value, position, enabled ) {
    
                return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position) );
    
            }
    
            function getNormalIndex( normal ) {
    
                var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
    
                if ( normalsHash[ hash ] !== undefined ) {
    
                    return normalsHash[ hash ];
    
                }
    
                normalsHash[ hash ] = normals.length / 3;
                normals.push( normal.x, normal.y, normal.z );
    
                return normalsHash[ hash ];
    
            }
    
            function getColorIndex( color ) {
    
                var hash = color.r.toString() + color.g.toString() + color.b.toString();
    
                if ( colorsHash[ hash ] !== undefined ) {
    
                    return colorsHash[ hash ];
    
                }
    
                colorsHash[ hash ] = colors.length;
                colors.push( color.getHex() );
    
                return colorsHash[ hash ];
    
            }
    
            function getUvIndex( uv ) {
    
                var hash = uv.x.toString() + uv.y.toString();
    
                if ( uvsHash[ hash ] !== undefined ) {
    
                    return uvsHash[ hash ];
    
                }
    
                uvsHash[ hash ] = uvs.length / 2;
                uvs.push( uv.x, uv.y );
    
                return uvsHash[ hash ];
    
            }
    
            output.data = {};
    
            output.data.vertices = vertices;
            output.data.normals = normals;
            if ( colors.length > 0 ) output.data.colors = colors;
            if ( uvs.length > 0 ) output.data.uvs = [ uvs ]; // temporal backward compatibility
            output.data.faces = faces;
    
            //
    
            return output;
    
        },
    
        clone: function () {
    
            var geometry = new THREE.Geometry();
    
            var vertices = this.vertices;
    
            for ( var i = 0, il = vertices.length; i < il; i ++ ) {
    
                geometry.vertices.push( vertices[ i ].clone() );
    
            }
    
            var faces = this.faces;
    
            for ( var i = 0, il = faces.length; i < il; i ++ ) {
    
                geometry.faces.push( faces[ i ].clone() );
    
            }
    
            var uvs = this.faceVertexUvs[ 0 ];
    
            for ( var i = 0, il = uvs.length; i < il; i ++ ) {
    
                var uv = uvs[ i ], uvCopy = [];
    
                for ( var j = 0, jl = uv.length; j < jl; j ++ ) {
    
                    uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );
    
                }
    
                geometry.faceVertexUvs[ 0 ].push( uvCopy );
    
            }
    
            return geometry;
    
        },
    
        dispose: function () {
    
            this.dispatchEvent( { type: 'dispose' } );
    
        }
    
    };
    
    THREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );
    
    THREE.GeometryIdCount = 0;
    
    // File:src/cameras/Camera.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author mikael emtinger / http://gomo.se/
     * @author WestLangley / http://github.com/WestLangley
    */
    
    THREE.Camera = function () {
    
        THREE.Object3D.call( this );
    
        this.type = 'Camera';
    
        this.matrixWorldInverse = new THREE.Matrix4();
        this.projectionMatrix = new THREE.Matrix4();
    
    };
    
    THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.Camera.prototype.getWorldDirection = function () {
    
        var quaternion = new THREE.Quaternion();
    
        return function ( optionalTarget ) {
    
            var result = optionalTarget || new THREE.Vector3();
    
            this.getWorldQuaternion( quaternion );
    
            return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );
    
        }
    
    }();
    
    THREE.Camera.prototype.lookAt = function () {
    
        // This routine does not support cameras with rotated and/or translated parent(s)
    
        var m1 = new THREE.Matrix4();
    
        return function ( vector ) {
    
            m1.lookAt( this.position, vector, this.up );
    
            this.quaternion.setFromRotationMatrix( m1 );
    
        };
    
    }();
    
    THREE.Camera.prototype.clone = function ( camera ) {
    
        if ( camera === undefined ) camera = new THREE.Camera();
    
        THREE.Object3D.prototype.clone.call( this, camera );
    
        camera.matrixWorldInverse.copy( this.matrixWorldInverse );
        camera.projectionMatrix.copy( this.projectionMatrix );
    
        return camera;
    };
    
    // File:src/cameras/CubeCamera.js
    
    /**
     * Camera for rendering cube maps
     *	- renders scene into axis-aligned cube
     *
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.CubeCamera = function ( near, far, cubeResolution ) {
    
        THREE.Object3D.call( this );
    
        this.type = 'CubeCamera';
    
        var fov = 90, aspect = 1;
    
        var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
        cameraPX.up.set( 0, - 1, 0 );
        cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
        this.add( cameraPX );
    
        var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
        cameraNX.up.set( 0, - 1, 0 );
        cameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );
        this.add( cameraNX );
    
        var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
        cameraPY.up.set( 0, 0, 1 );
        cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
        this.add( cameraPY );
    
        var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
        cameraNY.up.set( 0, 0, - 1 );
        cameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );
        this.add( cameraNY );
    
        var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
        cameraPZ.up.set( 0, - 1, 0 );
        cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
        this.add( cameraPZ );
    
        var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
        cameraNZ.up.set( 0, - 1, 0 );
        cameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );
        this.add( cameraNZ );
    
        this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );
    
        this.updateCubeMap = function ( renderer, scene ) {
    
            var renderTarget = this.renderTarget;
            var generateMipmaps = renderTarget.generateMipmaps;
    
            renderTarget.generateMipmaps = false;
    
            renderTarget.activeCubeFace = 0;
            renderer.render( scene, cameraPX, renderTarget );
    
            renderTarget.activeCubeFace = 1;
            renderer.render( scene, cameraNX, renderTarget );
    
            renderTarget.activeCubeFace = 2;
            renderer.render( scene, cameraPY, renderTarget );
    
            renderTarget.activeCubeFace = 3;
            renderer.render( scene, cameraNY, renderTarget );
    
            renderTarget.activeCubeFace = 4;
            renderer.render( scene, cameraPZ, renderTarget );
    
            renderTarget.generateMipmaps = generateMipmaps;
    
            renderTarget.activeCubeFace = 5;
            renderer.render( scene, cameraNZ, renderTarget );
    
        };
    
    };
    
    THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );
    
    // File:src/cameras/OrthographicCamera.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {
    
        THREE.Camera.call( this );
    
        this.type = 'OrthographicCamera';
    
        this.zoom = 1;
    
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
    
        this.near = ( near !== undefined ) ? near : 0.1;
        this.far = ( far !== undefined ) ? far : 2000;
    
        this.updateProjectionMatrix();
    
    };
    
    THREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );
    
    THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {
    
        var dx = ( this.right - this.left ) / ( 2 * this.zoom );
        var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
        var cx = ( this.right + this.left ) / 2;
        var cy = ( this.top + this.bottom ) / 2;
    
        this.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );
    
    };
    
    THREE.OrthographicCamera.prototype.clone = function () {
    
        var camera = new THREE.OrthographicCamera();
    
        THREE.Camera.prototype.clone.call( this, camera );
    
        camera.zoom = this.zoom;
    
        camera.left = this.left;
        camera.right = this.right;
        camera.top = this.top;
        camera.bottom = this.bottom;
    
        camera.near = this.near;
        camera.far = this.far;
    
        camera.projectionMatrix.copy( this.projectionMatrix );
    
        return camera;
    };
    
    // File:src/cameras/PerspectiveCamera.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author greggman / http://games.greggman.com/
     * @author zz85 / http://www.lab4games.net/zz85/blog
     */
    
    THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {
    
        THREE.Camera.call( this );
    
        this.type = 'PerspectiveCamera';
    
        this.zoom = 1;
    
        this.fov = fov !== undefined ? fov : 50;
        this.aspect = aspect !== undefined ? aspect : 1;
        this.near = near !== undefined ? near : 0.1;
        this.far = far !== undefined ? far : 2000;
    
        this.updateProjectionMatrix();
    
    };
    
    THREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );
    
    
    /**
     * Uses Focal Length (in mm) to estimate and set FOV
     * 35mm (fullframe) camera is used if frame size is not specified;
     * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
     */
    
    THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {
    
        if ( frameHeight === undefined ) frameHeight = 24;
    
        this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );
        this.updateProjectionMatrix();
    
    }
    
    
    /**
     * Sets an offset in a larger frustum. This is useful for multi-window or
     * multi-monitor/multi-machine setups.
     *
     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
     * the monitors are in grid like this
     *
     *   +---+---+---+
     *   | A | B | C |
     *   +---+---+---+
     *   | D | E | F |
     *   +---+---+---+
     *
     * then for each monitor you would call it like this
     *
     *   var w = 1920;
     *   var h = 1080;
     *   var fullWidth = w * 3;
     *   var fullHeight = h * 2;
     *
     *   --A--
     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
     *   --B--
     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
     *   --C--
     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
     *   --D--
     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
     *   --E--
     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
     *   --F--
     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
     *
     *   Note there is no reason monitors have to be the same size or in a grid.
     */
    
    THREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {
    
        this.fullWidth = fullWidth;
        this.fullHeight = fullHeight;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    
        this.updateProjectionMatrix();
    
    };
    
    
    THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {
    
        var fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );
    
        if ( this.fullWidth ) {
    
            var aspect = this.fullWidth / this.fullHeight;
            var top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;
            var bottom = - top;
            var left = aspect * bottom;
            var right = aspect * top;
            var width = Math.abs( right - left );
            var height = Math.abs( top - bottom );
    
            this.projectionMatrix.makeFrustum(
                left + this.x * width / this.fullWidth,
                left + ( this.x + this.width ) * width / this.fullWidth,
                top - ( this.y + this.height ) * height / this.fullHeight,
                top - this.y * height / this.fullHeight,
                this.near,
                this.far
            );
    
        } else {
    
            this.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );
    
        }
    
    };
    
    THREE.PerspectiveCamera.prototype.clone = function () {
    
        var camera = new THREE.PerspectiveCamera();
    
        THREE.Camera.prototype.clone.call( this, camera );
    
        camera.zoom = this.zoom;
    
        camera.fov = this.fov;
        camera.aspect = this.aspect;
        camera.near = this.near;
        camera.far = this.far;
    
        camera.projectionMatrix.copy( this.projectionMatrix );
    
        return camera;
    
    };
    
    // File:src/lights/Light.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Light = function ( color ) {
    
        THREE.Object3D.call( this );
    
        this.type = 'Light';
        
        this.color = new THREE.Color( color );
    
    };
    
    THREE.Light.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.Light.prototype.clone = function ( light ) {
    
        if ( light === undefined ) light = new THREE.Light();
    
        THREE.Object3D.prototype.clone.call( this, light );
    
        light.color.copy( this.color );
    
        return light;
    
    };
    
    // File:src/lights/AmbientLight.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.AmbientLight = function ( color ) {
    
        THREE.Light.call( this, color );
    
        this.type = 'AmbientLight';
    
    };
    
    THREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );
    
    THREE.AmbientLight.prototype.clone = function () {
    
        var light = new THREE.AmbientLight();
    
        THREE.Light.prototype.clone.call( this, light );
    
        return light;
    
    };
    
    // File:src/lights/AreaLight.js
    
    /**
     * @author MPanknin / http://www.redplant.de/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.AreaLight = function ( color, intensity ) {
    
        THREE.Light.call( this, color );
    
        this.type = 'AreaLight';
    
        this.normal = new THREE.Vector3( 0, - 1, 0 );
        this.right = new THREE.Vector3( 1, 0, 0 );
    
        this.intensity = ( intensity !== undefined ) ? intensity : 1;
    
        this.width = 1.0;
        this.height = 1.0;
    
        this.constantAttenuation = 1.5;
        this.linearAttenuation = 0.5;
        this.quadraticAttenuation = 0.1;
    
    };
    
    THREE.AreaLight.prototype = Object.create( THREE.Light.prototype );
    
    
    // File:src/lights/DirectionalLight.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.DirectionalLight = function ( color, intensity ) {
    
        THREE.Light.call( this, color );
    
        this.type = 'DirectionalLight';
    
        this.position.set( 0, 1, 0 );
        this.target = new THREE.Object3D();
    
        this.intensity = ( intensity !== undefined ) ? intensity : 1;
    
        this.castShadow = false;
        this.onlyShadow = false;
    
        //
    
        this.shadowCameraNear = 50;
        this.shadowCameraFar = 5000;
    
        this.shadowCameraLeft = - 500;
        this.shadowCameraRight = 500;
        this.shadowCameraTop = 500;
        this.shadowCameraBottom = - 500;
    
        this.shadowCameraVisible = false;
    
        this.shadowBias = 0;
        this.shadowDarkness = 0.5;
    
        this.shadowMapWidth = 512;
        this.shadowMapHeight = 512;
    
        //
    
        this.shadowCascade = false;
    
        this.shadowCascadeOffset = new THREE.Vector3( 0, 0, - 1000 );
        this.shadowCascadeCount = 2;
    
        this.shadowCascadeBias = [ 0, 0, 0 ];
        this.shadowCascadeWidth = [ 512, 512, 512 ];
        this.shadowCascadeHeight = [ 512, 512, 512 ];
    
        this.shadowCascadeNearZ = [ - 1.000, 0.990, 0.998 ];
        this.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];
    
        this.shadowCascadeArray = [];
    
        //
    
        this.shadowMap = null;
        this.shadowMapSize = null;
        this.shadowCamera = null;
        this.shadowMatrix = null;
    
    };
    
    THREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );
    
    THREE.DirectionalLight.prototype.clone = function () {
    
        var light = new THREE.DirectionalLight();
    
        THREE.Light.prototype.clone.call( this, light );
    
        light.target = this.target.clone();
    
        light.intensity = this.intensity;
    
        light.castShadow = this.castShadow;
        light.onlyShadow = this.onlyShadow;
    
        //
    
        light.shadowCameraNear = this.shadowCameraNear;
        light.shadowCameraFar = this.shadowCameraFar;
    
        light.shadowCameraLeft = this.shadowCameraLeft;
        light.shadowCameraRight = this.shadowCameraRight;
        light.shadowCameraTop = this.shadowCameraTop;
        light.shadowCameraBottom = this.shadowCameraBottom;
    
        light.shadowCameraVisible = this.shadowCameraVisible;
    
        light.shadowBias = this.shadowBias;
        light.shadowDarkness = this.shadowDarkness;
    
        light.shadowMapWidth = this.shadowMapWidth;
        light.shadowMapHeight = this.shadowMapHeight;
    
        //
    
        light.shadowCascade = this.shadowCascade;
    
        light.shadowCascadeOffset.copy( this.shadowCascadeOffset );
        light.shadowCascadeCount = this.shadowCascadeCount;
    
        light.shadowCascadeBias = this.shadowCascadeBias.slice( 0 );
        light.shadowCascadeWidth = this.shadowCascadeWidth.slice( 0 );
        light.shadowCascadeHeight = this.shadowCascadeHeight.slice( 0 );
    
        light.shadowCascadeNearZ = this.shadowCascadeNearZ.slice( 0 );
        light.shadowCascadeFarZ  = this.shadowCascadeFarZ.slice( 0 );
    
        return light;
    
    };
    
    // File:src/lights/HemisphereLight.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {
    
        THREE.Light.call( this, skyColor );
    
        this.type = 'HemisphereLight';
    
        this.position.set( 0, 100, 0 );
    
        this.groundColor = new THREE.Color( groundColor );
        this.intensity = ( intensity !== undefined ) ? intensity : 1;
    
    };
    
    THREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );
    
    THREE.HemisphereLight.prototype.clone = function () {
    
        var light = new THREE.HemisphereLight();
    
        THREE.Light.prototype.clone.call( this, light );
    
        light.groundColor.copy( this.groundColor );
        light.intensity = this.intensity;
    
        return light;
    
    };
    
    // File:src/lights/PointLight.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.PointLight = function ( color, intensity, distance ) {
    
        THREE.Light.call( this, color );
    
        this.type = 'PointLight';
    
        this.intensity = ( intensity !== undefined ) ? intensity : 1;
        this.distance = ( distance !== undefined ) ? distance : 0;
    
    };
    
    THREE.PointLight.prototype = Object.create( THREE.Light.prototype );
    
    THREE.PointLight.prototype.clone = function () {
    
        var light = new THREE.PointLight();
    
        THREE.Light.prototype.clone.call( this, light );
    
        light.intensity = this.intensity;
        light.distance = this.distance;
    
        return light;
    
    };
    
    // File:src/lights/SpotLight.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.SpotLight = function ( color, intensity, distance, angle, exponent ) {
    
        THREE.Light.call( this, color );
    
        this.type = 'SpotLight';
    
        this.position.set( 0, 1, 0 );
        this.target = new THREE.Object3D();
    
        this.intensity = ( intensity !== undefined ) ? intensity : 1;
        this.distance = ( distance !== undefined ) ? distance : 0;
        this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
        this.exponent = ( exponent !== undefined ) ? exponent : 10;
    
        this.castShadow = false;
        this.onlyShadow = false;
    
        //
    
        this.shadowCameraNear = 50;
        this.shadowCameraFar = 5000;
        this.shadowCameraFov = 50;
    
        this.shadowCameraVisible = false;
    
        this.shadowBias = 0;
        this.shadowDarkness = 0.5;
    
        this.shadowMapWidth = 512;
        this.shadowMapHeight = 512;
    
        //
    
        this.shadowMap = null;
        this.shadowMapSize = null;
        this.shadowCamera = null;
        this.shadowMatrix = null;
    
    };
    
    THREE.SpotLight.prototype = Object.create( THREE.Light.prototype );
    
    THREE.SpotLight.prototype.clone = function () {
    
        var light = new THREE.SpotLight();
    
        THREE.Light.prototype.clone.call( this, light );
    
        light.target = this.target.clone();
    
        light.intensity = this.intensity;
        light.distance = this.distance;
        light.angle = this.angle;
        light.exponent = this.exponent;
    
        light.castShadow = this.castShadow;
        light.onlyShadow = this.onlyShadow;
    
        //
    
        light.shadowCameraNear = this.shadowCameraNear;
        light.shadowCameraFar = this.shadowCameraFar;
        light.shadowCameraFov = this.shadowCameraFov;
    
        light.shadowCameraVisible = this.shadowCameraVisible;
    
        light.shadowBias = this.shadowBias;
        light.shadowDarkness = this.shadowDarkness;
    
        light.shadowMapWidth = this.shadowMapWidth;
        light.shadowMapHeight = this.shadowMapHeight;
    
        return light;
    
    };
    
    // File:src/loaders/Cache.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Cache = function () {
    
        this.files = {};
    
    };
    
    THREE.Cache.prototype = {
    
        constructor: THREE.Cache,
    
        add: function ( key, file ) {
    
            // console.log( 'THREE.Cache', 'Adding key:', key );
    
            this.files[ key ] = file;
    
        },
    
        get: function ( key ) {
    
            // console.log( 'THREE.Cache', 'Checking key:', key );
    
            return this.files[ key ];
    
        },
    
        remove: function ( key ) {
    
            delete this.files[ key ];
    
        },
    
        clear: function () {
    
            this.files = {}
    
        }
    
    };
    
    // File:src/loaders/Loader.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Loader = function ( showStatus ) {
    
        this.showStatus = showStatus;
        this.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;
    
        this.imageLoader = new THREE.ImageLoader();
    
        this.onLoadStart = function () {};
        this.onLoadProgress = function () {};
        this.onLoadComplete = function () {};
    
    };
    
    THREE.Loader.prototype = {
    
        constructor: THREE.Loader,
    
        crossOrigin: undefined,
    
        addStatusElement: function () {
    
            var e = document.createElement( 'div' );
    
            e.style.position = 'absolute';
            e.style.right = '0px';
            e.style.top = '0px';
            e.style.fontSize = '0.8em';
            e.style.textAlign = 'left';
            e.style.background = 'rgba(0,0,0,0.25)';
            e.style.color = '#fff';
            e.style.width = '120px';
            e.style.padding = '0.5em 0.5em 0.5em 0.5em';
            e.style.zIndex = 1000;
    
            e.innerHTML = 'Loading ...';
    
            return e;
    
        },
    
        updateProgress: function ( progress ) {
    
            var message = 'Loaded ';
    
            if ( progress.total ) {
    
                message += ( 100 * progress.loaded / progress.total ).toFixed( 0 ) + '%';
    
    
            } else {
    
                message += ( progress.loaded / 1024 ).toFixed( 2 ) + ' KB';
    
            }
    
            this.statusDomElement.innerHTML = message;
    
        },
    
        extractUrlBase: function ( url ) {
    
            var parts = url.split( '/' );
    
            if ( parts.length === 1 ) return './';
    
            parts.pop();
    
            return parts.join( '/' ) + '/';
    
        },
    
        initMaterials: function ( materials, texturePath ) {
    
            var array = [];
    
            for ( var i = 0; i < materials.length; ++ i ) {
    
                array[ i ] = this.createMaterial( materials[ i ], texturePath );
    
            }
    
            return array;
    
        },
    
        needsTangents: function ( materials ) {
    
            for ( var i = 0, il = materials.length; i < il; i ++ ) {
    
                var m = materials[ i ];
    
                if ( m instanceof THREE.ShaderMaterial ) return true;
    
            }
    
            return false;
    
        },
    
        createMaterial: function ( m, texturePath ) {
    
            var scope = this;
    
            function nearest_pow2( n ) {
    
                var l = Math.log( n ) / Math.LN2;
                return Math.pow( 2, Math.round(  l ) );
    
            }
    
            function create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {
    
                var fullPath = texturePath + sourceFile;
    
                var texture;
    
                var loader = THREE.Loader.Handlers.get( fullPath );
    
                if ( loader !== null ) {
    
                    texture = loader.load( fullPath );
    
                } else {
    
                    texture = new THREE.Texture();
    
                    loader = scope.imageLoader;
                    loader.crossOrigin = scope.crossOrigin;
                    loader.load( fullPath, function ( image ) {
    
                        if ( THREE.Math.isPowerOfTwo( image.width ) === false ||
                             THREE.Math.isPowerOfTwo( image.height ) === false ) {
    
                            var width = nearest_pow2( image.width );
                            var height = nearest_pow2( image.height );
    
                            var canvas = document.createElement( 'canvas' );
                            canvas.width = width;
                            canvas.height = height;
    
                            var context = canvas.getContext( '2d' );
                            context.drawImage( image, 0, 0, width, height );
    
                            texture.image = canvas;
    
                        } else {
    
                            texture.image = image;
    
                        }
    
                        texture.needsUpdate = true;
    
                    } );
    
                }
    
                texture.sourceFile = sourceFile;
    
                if ( repeat ) {
    
                    texture.repeat.set( repeat[ 0 ], repeat[ 1 ] );
    
                    if ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
                    if ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;
    
                }
    
                if ( offset ) {
    
                    texture.offset.set( offset[ 0 ], offset[ 1 ] );
    
                }
    
                if ( wrap ) {
    
                    var wrapMap = {
                        'repeat': THREE.RepeatWrapping,
                        'mirror': THREE.MirroredRepeatWrapping
                    }
    
                    if ( wrapMap[ wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ wrap[ 0 ] ];
                    if ( wrapMap[ wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ wrap[ 1 ] ];
    
                }
    
                if ( anisotropy ) {
    
                    texture.anisotropy = anisotropy;
    
                }
    
                where[ name ] = texture;
    
            }
    
            function rgb2hex( rgb ) {
    
                return ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;
    
            }
    
            // defaults
    
            var mtype = 'MeshLambertMaterial';
            var mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };
    
            // parameters from model file
    
            if ( m.shading ) {
    
                var shading = m.shading.toLowerCase();
    
                if ( shading === 'phong' ) mtype = 'MeshPhongMaterial';
                else if ( shading === 'basic' ) mtype = 'MeshBasicMaterial';
    
            }
    
            if ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {
    
                mpars.blending = THREE[ m.blending ];
    
            }
    
            if ( m.transparent !== undefined || m.opacity < 1.0 ) {
    
                mpars.transparent = m.transparent;
    
            }
    
            if ( m.depthTest !== undefined ) {
    
                mpars.depthTest = m.depthTest;
    
            }
    
            if ( m.depthWrite !== undefined ) {
    
                mpars.depthWrite = m.depthWrite;
    
            }
    
            if ( m.visible !== undefined ) {
    
                mpars.visible = m.visible;
    
            }
    
            if ( m.flipSided !== undefined ) {
    
                mpars.side = THREE.BackSide;
    
            }
    
            if ( m.doubleSided !== undefined ) {
    
                mpars.side = THREE.DoubleSide;
    
            }
    
            if ( m.wireframe !== undefined ) {
    
                mpars.wireframe = m.wireframe;
    
            }
    
            if ( m.vertexColors !== undefined ) {
    
                if ( m.vertexColors === 'face' ) {
    
                    mpars.vertexColors = THREE.FaceColors;
    
                } else if ( m.vertexColors ) {
    
                    mpars.vertexColors = THREE.VertexColors;
    
                }
    
            }
    
            // colors
    
            if ( m.colorDiffuse ) {
    
                mpars.color = rgb2hex( m.colorDiffuse );
    
            } else if ( m.DbgColor ) {
    
                mpars.color = m.DbgColor;
    
            }
    
            if ( m.colorSpecular ) {
    
                mpars.specular = rgb2hex( m.colorSpecular );
    
            }
    
            if ( m.colorAmbient ) {
    
                mpars.ambient = rgb2hex( m.colorAmbient );
    
            }
    
            if ( m.colorEmissive ) {
    
                mpars.emissive = rgb2hex( m.colorEmissive );
    
            }
    
            // modifiers
    
            if ( m.transparency ) {
    
                mpars.opacity = m.transparency;
    
            }
    
            if ( m.specularCoef ) {
    
                mpars.shininess = m.specularCoef;
    
            }
    
            // textures
    
            if ( m.mapDiffuse && texturePath ) {
    
                create_texture( mpars, 'map', m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
    
            }
    
            if ( m.mapLight && texturePath ) {
    
                create_texture( mpars, 'lightMap', m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
    
            }
    
            if ( m.mapBump && texturePath ) {
    
                create_texture( mpars, 'bumpMap', m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
    
            }
    
            if ( m.mapNormal && texturePath ) {
    
                create_texture( mpars, 'normalMap', m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
    
            }
    
            if ( m.mapSpecular && texturePath ) {
    
                create_texture( mpars, 'specularMap', m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
    
            }
    
            if ( m.mapAlpha && texturePath ) {
    
                create_texture( mpars, 'alphaMap', m.mapAlpha, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
    
            }
    
            //
    
            if ( m.mapBumpScale ) {
    
                mpars.bumpScale = m.mapBumpScale;
    
            }
    
            // special case for normal mapped material
    
            if ( m.mapNormal ) {
    
                var shader = THREE.ShaderLib[ 'normalmap' ];
                var uniforms = THREE.UniformsUtils.clone( shader.uniforms );
    
                uniforms[ 'tNormal' ].value = mpars.normalMap;
    
                if ( m.mapNormalFactor ) {
    
                    uniforms[ 'uNormalScale' ].value.set( m.mapNormalFactor, m.mapNormalFactor );
    
                }
    
                if ( mpars.map ) {
    
                    uniforms[ 'tDiffuse' ].value = mpars.map;
                    uniforms[ 'enableDiffuse' ].value = true;
    
                }
    
                if ( mpars.specularMap ) {
    
                    uniforms[ 'tSpecular' ].value = mpars.specularMap;
                    uniforms[ 'enableSpecular' ].value = true;
    
                }
    
                if ( mpars.lightMap ) {
    
                    uniforms[ 'tAO' ].value = mpars.lightMap;
                    uniforms[ 'enableAO' ].value = true;
    
                }
    
                // for the moment don't handle displacement texture
    
                uniforms[ 'diffuse' ].value.setHex( mpars.color );
                uniforms[ 'specular' ].value.setHex( mpars.specular );
                uniforms[ 'ambient' ].value.setHex( mpars.ambient );
    
                uniforms[ 'shininess' ].value = mpars.shininess;
    
                if ( mpars.opacity !== undefined ) {
    
                    uniforms[ 'opacity' ].value = mpars.opacity;
    
                }
    
                var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };
                var material = new THREE.ShaderMaterial( parameters );
    
                if ( mpars.transparent ) {
    
                    material.transparent = true;
    
                }
    
            } else {
    
                var material = new THREE[ mtype ]( mpars );
    
            }
    
            if ( m.DbgName !== undefined ) material.name = m.DbgName;
    
            return material;
    
        }
    
    };
    
    THREE.Loader.Handlers = {
    
        handlers: [],
    
        add: function ( regex, loader ) {
    
            this.handlers.push( regex, loader );
    
        },
    
        get: function ( file ) {
    
            for ( var i = 0, l = this.handlers.length; i < l; i += 2 ) {
    
                var regex = this.handlers[ i ];
                var loader  = this.handlers[ i + 1 ];
    
                if ( regex.test( file ) ) {
    
                    return loader;
    
                }
    
            }
    
            return null;
    
        }
    
    };
    
    // File:src/loaders/XHRLoader.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.XHRLoader = function ( manager ) {
    
        this.cache = new THREE.Cache();
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
    };
    
    THREE.XHRLoader.prototype = {
    
        constructor: THREE.XHRLoader,
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var cached = scope.cache.get( url );
    
            if ( cached !== undefined ) {
    
                if ( onLoad ) onLoad( cached );
                return;
    
            }
    
            var request = new XMLHttpRequest();
            request.open( 'GET', url, true );
    
            request.addEventListener( 'load', function ( event ) {
    
                scope.cache.add( url, this.response );
    
                if ( onLoad ) onLoad( this.response );
    
                scope.manager.itemEnd( url );
    
            }, false );
    
            if ( onProgress !== undefined ) {
    
                request.addEventListener( 'progress', function ( event ) {
    
                    onProgress( event );
    
                }, false );
    
            }
    
            if ( onError !== undefined ) {
    
                request.addEventListener( 'error', function ( event ) {
    
                    onError( event );
    
                }, false );
    
            }
    
            if ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;
            if ( this.responseType !== undefined ) request.responseType = this.responseType;
    
            request.send( null );
    
            scope.manager.itemStart( url );
    
        },
    
        setResponseType: function ( value ) {
    
            this.responseType = value;
    
        },
    
        setCrossOrigin: function ( value ) {
    
            this.crossOrigin = value;
    
        }
    
    };
    
    // File:src/loaders/ImageLoader.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.ImageLoader = function ( manager ) {
    
        this.cache = new THREE.Cache();
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
    };
    
    THREE.ImageLoader.prototype = {
    
        constructor: THREE.ImageLoader,
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var cached = scope.cache.get( url );
    
            if ( cached !== undefined ) {
    
                onLoad( cached );
                return;
    
            }
    
            var image = document.createElement( 'img' );
    
            if ( onLoad !== undefined ) {
    
                image.addEventListener( 'load', function ( event ) {
    
                    scope.cache.add( url, this );
    
                    onLoad( this );
                    scope.manager.itemEnd( url );
    
                }, false );
    
            }
    
            if ( onProgress !== undefined ) {
    
                image.addEventListener( 'progress', function ( event ) {
    
                    onProgress( event );
    
                }, false );
    
            }
    
            if ( onError !== undefined ) {
    
                image.addEventListener( 'error', function ( event ) {
    
                    onError( event );
    
                }, false );
    
            }
    
            if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;
    
            image.src = url;
    
            scope.manager.itemStart( url );
    
            return image;
    
        },
    
        setCrossOrigin: function ( value ) {
    
            this.crossOrigin = value;
    
        }
    
    }
    
    // File:src/loaders/JSONLoader.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.JSONLoader = function ( showStatus ) {
    
        THREE.Loader.call( this, showStatus );
    
        this.withCredentials = false;
    
    };
    
    THREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );
    
    THREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {
    
        var scope = this;
    
        // todo: unify load API to for easier SceneLoader use
    
        texturePath = texturePath && ( typeof texturePath === 'string' ) ? texturePath : this.extractUrlBase( url );
    
        this.onLoadStart();
        this.loadAjaxJSON( this, url, callback, texturePath );
    
    };
    
    THREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {
    
        var xhr = new XMLHttpRequest();
    
        var length = 0;
    
        xhr.onreadystatechange = function () {
    
            if ( xhr.readyState === xhr.DONE ) {
    
                if ( xhr.status === 200 || xhr.status === 0 ) {
    
                    if ( xhr.responseText ) {
    
                        var json = JSON.parse( xhr.responseText );
    
                        if ( json.metadata !== undefined && json.metadata.type === 'scene' ) {
    
                            console.error( 'THREE.JSONLoader: "' + url + '" seems to be a Scene. Use THREE.SceneLoader instead.' );
                            return;
    
                        }
    
                        var result = context.parse( json, texturePath );
                        callback( result.geometry, result.materials );
    
                    } else {
    
                        console.error( 'THREE.JSONLoader: "' + url + '" seems to be unreachable or the file is empty.' );
    
                    }
    
                    // in context of more complex asset initialization
                    // do not block on single failed file
                    // maybe should go even one more level up
    
                    context.onLoadComplete();
    
                } else {
    
                    console.error( 'THREE.JSONLoader: Couldn\'t load "' + url + '" (' + xhr.status + ')' );
    
                }
    
            } else if ( xhr.readyState === xhr.LOADING ) {
    
                if ( callbackProgress ) {
    
                    if ( length === 0 ) {
    
                        length = xhr.getResponseHeader( 'Content-Length' );
    
                    }
    
                    callbackProgress( { total: length, loaded: xhr.responseText.length } );
    
                }
    
            } else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {
    
                if ( callbackProgress !== undefined ) {
    
                    length = xhr.getResponseHeader( 'Content-Length' );
    
                }
    
            }
    
        };
    
        xhr.open( 'GET', url, true );
        xhr.withCredentials = this.withCredentials;
        xhr.send( null );
    
    };
    
    THREE.JSONLoader.prototype.parse = function ( json, texturePath ) {
    
        var scope = this,
        geometry = new THREE.Geometry(),
        scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;
    
        parseModel( scale );
    
        parseSkin();
        parseMorphing( scale );
    
        geometry.computeFaceNormals();
        geometry.computeBoundingSphere();
    
        function parseModel( scale ) {
    
            function isBitSet( value, position ) {
    
                return value & ( 1 << position );
    
            }
    
            var i, j, fi,
    
            offset, zLength,
    
            colorIndex, normalIndex, uvIndex, materialIndex,
    
            type,
            isQuad,
            hasMaterial,
            hasFaceVertexUv,
            hasFaceNormal, hasFaceVertexNormal,
            hasFaceColor, hasFaceVertexColor,
    
            vertex, face, faceA, faceB, color, hex, normal,
    
            uvLayer, uv, u, v,
    
            faces = json.faces,
            vertices = json.vertices,
            normals = json.normals,
            colors = json.colors,
    
            nUvLayers = 0;
    
            if ( json.uvs !== undefined ) {
    
                // disregard empty arrays
    
                for ( i = 0; i < json.uvs.length; i ++ ) {
    
                    if ( json.uvs[ i ].length ) nUvLayers ++;
    
                }
    
                for ( i = 0; i < nUvLayers; i ++ ) {
    
                    geometry.faceVertexUvs[ i ] = [];
    
                }
    
            }
    
            offset = 0;
            zLength = vertices.length;
    
            while ( offset < zLength ) {
    
                vertex = new THREE.Vector3();
    
                vertex.x = vertices[ offset ++ ] * scale;
                vertex.y = vertices[ offset ++ ] * scale;
                vertex.z = vertices[ offset ++ ] * scale;
    
                geometry.vertices.push( vertex );
    
            }
    
            offset = 0;
            zLength = faces.length;
    
            while ( offset < zLength ) {
    
                type = faces[ offset ++ ];
    
    
                isQuad              = isBitSet( type, 0 );
                hasMaterial         = isBitSet( type, 1 );
                hasFaceVertexUv     = isBitSet( type, 3 );
                hasFaceNormal       = isBitSet( type, 4 );
                hasFaceVertexNormal = isBitSet( type, 5 );
                hasFaceColor	     = isBitSet( type, 6 );
                hasFaceVertexColor  = isBitSet( type, 7 );
    
                // console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);
    
                if ( isQuad ) {
    
                    faceA = new THREE.Face3();
                    faceA.a = faces[ offset ];
                    faceA.b = faces[ offset + 1 ];
                    faceA.c = faces[ offset + 3 ];
    
                    faceB = new THREE.Face3();
                    faceB.a = faces[ offset + 1 ];
                    faceB.b = faces[ offset + 2 ];
                    faceB.c = faces[ offset + 3 ];
    
                    offset += 4;
    
                    if ( hasMaterial ) {
    
                        materialIndex = faces[ offset ++ ];
                        faceA.materialIndex = materialIndex;
                        faceB.materialIndex = materialIndex;
    
                    }
    
                    // to get face <=> uv index correspondence
    
                    fi = geometry.faces.length;
    
                    if ( hasFaceVertexUv ) {
    
                        for ( i = 0; i < nUvLayers; i ++ ) {
    
                            uvLayer = json.uvs[ i ];
    
                            geometry.faceVertexUvs[ i ][ fi ] = [];
                            geometry.faceVertexUvs[ i ][ fi + 1 ] = []
    
                            for ( j = 0; j < 4; j ++ ) {
    
                                uvIndex = faces[ offset ++ ];
    
                                u = uvLayer[ uvIndex * 2 ];
                                v = uvLayer[ uvIndex * 2 + 1 ];
    
                                uv = new THREE.Vector2( u, v );
    
                                if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
                                if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );
    
                            }
    
                        }
    
                    }
    
                    if ( hasFaceNormal ) {
    
                        normalIndex = faces[ offset ++ ] * 3;
    
                        faceA.normal.set(
                            normals[ normalIndex ++ ],
                            normals[ normalIndex ++ ],
                            normals[ normalIndex ]
                        );
    
                        faceB.normal.copy( faceA.normal );
    
                    }
    
                    if ( hasFaceVertexNormal ) {
    
                        for ( i = 0; i < 4; i ++ ) {
    
                            normalIndex = faces[ offset ++ ] * 3;
    
                            normal = new THREE.Vector3(
                                normals[ normalIndex ++ ],
                                normals[ normalIndex ++ ],
                                normals[ normalIndex ]
                            );
    
    
                            if ( i !== 2 ) faceA.vertexNormals.push( normal );
                            if ( i !== 0 ) faceB.vertexNormals.push( normal );
    
                        }
    
                    }
    
    
                    if ( hasFaceColor ) {
    
                        colorIndex = faces[ offset ++ ];
                        hex = colors[ colorIndex ];
    
                        faceA.color.setHex( hex );
                        faceB.color.setHex( hex );
    
                    }
    
    
                    if ( hasFaceVertexColor ) {
    
                        for ( i = 0; i < 4; i ++ ) {
    
                            colorIndex = faces[ offset ++ ];
                            hex = colors[ colorIndex ];
    
                            if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
                            if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );
    
                        }
    
                    }
    
                    geometry.faces.push( faceA );
                    geometry.faces.push( faceB );
    
                } else {
    
                    face = new THREE.Face3();
                    face.a = faces[ offset ++ ];
                    face.b = faces[ offset ++ ];
                    face.c = faces[ offset ++ ];
    
                    if ( hasMaterial ) {
    
                        materialIndex = faces[ offset ++ ];
                        face.materialIndex = materialIndex;
    
                    }
    
                    // to get face <=> uv index correspondence
    
                    fi = geometry.faces.length;
    
                    if ( hasFaceVertexUv ) {
    
                        for ( i = 0; i < nUvLayers; i ++ ) {
    
                            uvLayer = json.uvs[ i ];
    
                            geometry.faceVertexUvs[ i ][ fi ] = [];
    
                            for ( j = 0; j < 3; j ++ ) {
    
                                uvIndex = faces[ offset ++ ];
    
                                u = uvLayer[ uvIndex * 2 ];
                                v = uvLayer[ uvIndex * 2 + 1 ];
    
                                uv = new THREE.Vector2( u, v );
    
                                geometry.faceVertexUvs[ i ][ fi ].push( uv );
    
                            }
    
                        }
    
                    }
    
                    if ( hasFaceNormal ) {
    
                        normalIndex = faces[ offset ++ ] * 3;
    
                        face.normal.set(
                            normals[ normalIndex ++ ],
                            normals[ normalIndex ++ ],
                            normals[ normalIndex ]
                        );
    
                    }
    
                    if ( hasFaceVertexNormal ) {
    
                        for ( i = 0; i < 3; i ++ ) {
    
                            normalIndex = faces[ offset ++ ] * 3;
    
                            normal = new THREE.Vector3(
                                normals[ normalIndex ++ ],
                                normals[ normalIndex ++ ],
                                normals[ normalIndex ]
                            );
    
                            face.vertexNormals.push( normal );
    
                        }
    
                    }
    
    
                    if ( hasFaceColor ) {
    
                        colorIndex = faces[ offset ++ ];
                        face.color.setHex( colors[ colorIndex ] );
    
                    }
    
    
                    if ( hasFaceVertexColor ) {
    
                        for ( i = 0; i < 3; i ++ ) {
    
                            colorIndex = faces[ offset ++ ];
                            face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );
    
                        }
    
                    }
    
                    geometry.faces.push( face );
    
                }
    
            }
    
        };
    
        function parseSkin() {
            var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;
    
            if ( json.skinWeights ) {
    
                for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {
    
                    var x =                               json.skinWeights[ i     ];
                    var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
                    var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
                    var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;
    
                    geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );
    
                }
    
            }
    
            if ( json.skinIndices ) {
    
                for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {
    
                    var a =                               json.skinIndices[ i     ];
                    var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
                    var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
                    var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;
    
                    geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );
    
                }
    
            }
    
            geometry.bones = json.bones;
    
            if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {
    
                    console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
                        geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );
    
            }
    
    
            // could change this to json.animations[0] or remove completely
    
            geometry.animation = json.animation;
            geometry.animations = json.animations;
    
        };
    
        function parseMorphing( scale ) {
    
            if ( json.morphTargets !== undefined ) {
    
                var i, l, v, vl, dstVertices, srcVertices;
    
                for ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {
    
                    geometry.morphTargets[ i ] = {};
                    geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
                    geometry.morphTargets[ i ].vertices = [];
    
                    dstVertices = geometry.morphTargets[ i ].vertices;
                    srcVertices = json.morphTargets [ i ].vertices;
    
                    for ( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {
    
                        var vertex = new THREE.Vector3();
                        vertex.x = srcVertices[ v ] * scale;
                        vertex.y = srcVertices[ v + 1 ] * scale;
                        vertex.z = srcVertices[ v + 2 ] * scale;
    
                        dstVertices.push( vertex );
    
                    }
    
                }
    
            }
    
            if ( json.morphColors !== undefined ) {
    
                var i, l, c, cl, dstColors, srcColors, color;
    
                for ( i = 0, l = json.morphColors.length; i < l; i ++ ) {
    
                    geometry.morphColors[ i ] = {};
                    geometry.morphColors[ i ].name = json.morphColors[ i ].name;
                    geometry.morphColors[ i ].colors = [];
    
                    dstColors = geometry.morphColors[ i ].colors;
                    srcColors = json.morphColors [ i ].colors;
    
                    for ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {
    
                        color = new THREE.Color( 0xffaa00 );
                        color.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );
                        dstColors.push( color );
    
                    }
    
                }
    
            }
    
        };
    
        if ( json.materials === undefined || json.materials.length === 0 ) {
    
            return { geometry: geometry };
    
        } else {
    
            var materials = this.initMaterials( json.materials, texturePath );
    
            if ( this.needsTangents( materials ) ) {
    
                geometry.computeTangents();
    
            }
    
            return { geometry: geometry, materials: materials };
    
        }
    
    };
    
    // File:src/loaders/LoadingManager.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.LoadingManager = function ( onLoad, onProgress, onError ) {
    
        var scope = this;
    
        var loaded = 0, total = 0;
    
        this.onLoad = onLoad;
        this.onProgress = onProgress;
        this.onError = onError;
    
        this.itemStart = function ( url ) {
    
            total ++;
    
        };
    
        this.itemEnd = function ( url ) {
    
            loaded ++;
    
            if ( scope.onProgress !== undefined ) {
    
                scope.onProgress( url, loaded, total );
    
            }
    
            if ( loaded === total && scope.onLoad !== undefined ) {
    
                scope.onLoad();
    
            }
    
        };
    
    };
    
    THREE.DefaultLoadingManager = new THREE.LoadingManager();
    
    // File:src/loaders/BufferGeometryLoader.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.BufferGeometryLoader = function ( manager ) {
    
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
    };
    
    THREE.BufferGeometryLoader.prototype = {
    
        constructor: THREE.BufferGeometryLoader,
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var loader = new THREE.XHRLoader();
            loader.setCrossOrigin( this.crossOrigin );
            loader.load( url, function ( text ) {
    
                onLoad( scope.parse( JSON.parse( text ) ) );
    
            }, onProgress, onError );
    
        },
    
        setCrossOrigin: function ( value ) {
    
            this.crossOrigin = value;
    
        },
    
        parse: function ( json ) {
    
            var geometry = new THREE.BufferGeometry();
    
            var attributes = json.attributes;
    
            for ( var key in attributes ) {
    
                var attribute = attributes[ key ];
                var typedArray = new self[ attribute.type ]( attribute.array );
    
                geometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );
    
            }
    
            var offsets = json.offsets;
    
            if ( offsets !== undefined ) {
    
                geometry.offsets = JSON.parse( JSON.stringify( offsets ) );
    
            }
    
            var boundingSphere = json.boundingSphere;
    
            if ( boundingSphere !== undefined ) {
    
                var center = new THREE.Vector3();
    
                if ( boundingSphere.center !== undefined ) {
    
                    center.fromArray( boundingSphere.center );
    
                }
    
                geometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );
    
            }
    
            return geometry;
    
        }
    
    };
    
    // File:src/loaders/MaterialLoader.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.MaterialLoader = function ( manager ) {
    
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
    };
    
    THREE.MaterialLoader.prototype = {
    
        constructor: THREE.MaterialLoader,
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var loader = new THREE.XHRLoader();
            loader.setCrossOrigin( this.crossOrigin );
            loader.load( url, function ( text ) {
    
                onLoad( scope.parse( JSON.parse( text ) ) );
    
            }, onProgress, onError );
    
        },
    
        setCrossOrigin: function ( value ) {
    
            this.crossOrigin = value;
    
        },
    
        parse: function ( json ) {
    
            var material = new THREE[ json.type ];
    
            if ( json.color !== undefined ) material.color.setHex( json.color );
            if ( json.ambient !== undefined ) material.ambient.setHex( json.ambient );
            if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
            if ( json.specular !== undefined ) material.specular.setHex( json.specular );
            if ( json.shininess !== undefined ) material.shininess = json.shininess;
            if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
            if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
            if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;		
            if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
            if ( json.shading !== undefined ) material.shading = json.shading;
            if ( json.blending !== undefined ) material.blending = json.blending;
            if ( json.side !== undefined ) material.side = json.side;
            if ( json.opacity !== undefined ) material.opacity = json.opacity;
            if ( json.transparent !== undefined ) material.transparent = json.transparent;
            if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
    
            if ( json.materials !== undefined ) {
    
                for ( var i = 0, l = json.materials.length; i < l; i ++ ) {
    
                    material.materials.push( this.parse( json.materials[ i ] ) );
    
                }
    
            }
    
            return material;
    
        }
    
    };
    
    // File:src/loaders/ObjectLoader.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.ObjectLoader = function ( manager ) {
    
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
    };
    
    THREE.ObjectLoader.prototype = {
    
        constructor: THREE.ObjectLoader,
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var loader = new THREE.XHRLoader( scope.manager );
            loader.setCrossOrigin( this.crossOrigin );
            loader.load( url, function ( text ) {
    
                onLoad( scope.parse( JSON.parse( text ) ) );
    
            }, onProgress, onError );
    
        },
    
        setCrossOrigin: function ( value ) {
    
            this.crossOrigin = value;
    
        },
    
        parse: function ( json ) {
    
            var geometries = this.parseGeometries( json.geometries );
            var materials = this.parseMaterials( json.materials );
            var object = this.parseObject( json.object, geometries, materials );
    
            return object;
    
        },
    
        parseGeometries: function ( json ) {
    
            var geometries = {};
    
            if ( json !== undefined ) {
    
                var geometryLoader = new THREE.JSONLoader();
                var bufferGeometryLoader = new THREE.BufferGeometryLoader();
    
                for ( var i = 0, l = json.length; i < l; i ++ ) {
    
                    var geometry;
                    var data = json[ i ];
    
                    switch ( data.type ) {
    
                        case 'PlaneGeometry':
    
                            geometry = new THREE.PlaneGeometry(
                                data.width,
                                data.height,
                                data.widthSegments,
                                data.heightSegments
                            );
    
                            break;
    
                        case 'BoxGeometry':
                        case 'CubeGeometry': // backwards compatible
    
                            geometry = new THREE.BoxGeometry(
                                data.width,
                                data.height,
                                data.depth,
                                data.widthSegments,
                                data.heightSegments,
                                data.depthSegments
                            );
    
                            break;
    
                        case 'CircleGeometry':
    
                            geometry = new THREE.CircleGeometry(
                                data.radius,
                                data.segments
                            );
    
                            break;
    
                        case 'CylinderGeometry':
    
                            geometry = new THREE.CylinderGeometry(
                                data.radiusTop,
                                data.radiusBottom,
                                data.height,
                                data.radialSegments,
                                data.heightSegments,
                                data.openEnded
                            );
    
                            break;
    
                        case 'SphereGeometry':
    
                            geometry = new THREE.SphereGeometry(
                                data.radius,
                                data.widthSegments,
                                data.heightSegments,
                                data.phiStart,
                                data.phiLength,
                                data.thetaStart,
                                data.thetaLength
                            );
    
                            break;
    
                        case 'IcosahedronGeometry':
    
                            geometry = new THREE.IcosahedronGeometry(
                                data.radius,
                                data.detail
                            );
    
                            break;
    
                        case 'TorusGeometry':
    
                            geometry = new THREE.TorusGeometry(
                                data.radius,
                                data.tube,
                                data.radialSegments,
                                data.tubularSegments,
                                data.arc
                            );
    
                            break;
    
                        case 'TorusKnotGeometry':
    
                            geometry = new THREE.TorusKnotGeometry(
                                data.radius,
                                data.tube,
                                data.radialSegments,
                                data.tubularSegments,
                                data.p,
                                data.q,
                                data.heightScale
                            );
    
                            break;
    
                        case 'BufferGeometry':
    
                            geometry = bufferGeometryLoader.parse( data.data );
    
                            break;
    
                        case 'Geometry':
    
                            geometry = geometryLoader.parse( data.data ).geometry;
    
                            break;
    
                    }
    
                    geometry.uuid = data.uuid;
    
                    if ( data.name !== undefined ) geometry.name = data.name;
    
                    geometries[ data.uuid ] = geometry;
    
                }
    
            }
    
            return geometries;
    
        },
    
        parseMaterials: function ( json ) {
    
            var materials = {};
    
            if ( json !== undefined ) {
    
                var loader = new THREE.MaterialLoader();
    
                for ( var i = 0, l = json.length; i < l; i ++ ) {
    
                    var data = json[ i ];
                    var material = loader.parse( data );
    
                    material.uuid = data.uuid;
    
                    if ( data.name !== undefined ) material.name = data.name;
    
                    materials[ data.uuid ] = material;
    
                }
    
            }
    
            return materials;
    
        },
    
        parseObject: function () {
    
            var matrix = new THREE.Matrix4();
    
            return function ( data, geometries, materials ) {
    
                var object;
    
                switch ( data.type ) {
    
                    case 'Scene':
    
                        object = new THREE.Scene();
    
                        break;
    
                    case 'PerspectiveCamera':
    
                        object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
    
                        break;
    
                    case 'OrthographicCamera':
    
                        object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
    
                        break;
    
                    case 'AmbientLight':
    
                        object = new THREE.AmbientLight( data.color );
    
                        break;
    
                    case 'DirectionalLight':
    
                        object = new THREE.DirectionalLight( data.color, data.intensity );
    
                        break;
    
                    case 'PointLight':
    
                        object = new THREE.PointLight( data.color, data.intensity, data.distance );
    
                        break;
    
                    case 'SpotLight':
    
                        object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent );
    
                        break;
    
                    case 'HemisphereLight':
    
                        object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );
    
                        break;
    
                    case 'Mesh':
    
                        var geometry = geometries[ data.geometry ];
                        var material = materials[ data.material ];
    
                        if ( geometry === undefined ) {
    
                            console.warn( 'THREE.ObjectLoader: Undefined geometry', data.geometry );
    
                        }
    
                        if ( material === undefined ) {
    
                            console.warn( 'THREE.ObjectLoader: Undefined material', data.material );
    
                        }
    
                        object = new THREE.Mesh( geometry, material );
    
                        break;
    
                    case 'Line':
    
                        var geometry = geometries[ data.geometry ];
                        var material = materials[ data.material ];
    
                        if ( geometry === undefined ) {
    
                            console.warn( 'THREE.ObjectLoader: Undefined geometry', data.geometry );
    
                        }
    
                        if ( material === undefined ) {
    
                            console.warn( 'THREE.ObjectLoader: Undefined material', data.material );
    
                        }
    
                        object = new THREE.Line( geometry, material );
    
                        break;
    
                    case 'Sprite':
    
                        var material = materials[ data.material ];
    
                        if ( material === undefined ) {
    
                            console.warn( 'THREE.ObjectLoader: Undefined material', data.material );
    
                        }
    
                        object = new THREE.Sprite( material );
    
                        break;
    
                    case 'Group':
    
                        object = new THREE.Group();
    
                        break;
    
                    default:
    
                        object = new THREE.Object3D();
    
                }
    
                object.uuid = data.uuid;
    
                if ( data.name !== undefined ) object.name = data.name;
                if ( data.matrix !== undefined ) {
    
                    matrix.fromArray( data.matrix );
                    matrix.decompose( object.position, object.quaternion, object.scale );
    
                } else {
    
                    if ( data.position !== undefined ) object.position.fromArray( data.position );
                    if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
                    if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
    
                }
    
                if ( data.visible !== undefined ) object.visible = data.visible;
                if ( data.userData !== undefined ) object.userData = data.userData;
    
                if ( data.children !== undefined ) {
    
                    for ( var child in data.children ) {
    
                        object.add( this.parseObject( data.children[ child ], geometries, materials ) );
    
                    }
    
                }
    
                return object;
    
            }
    
        }()
    
    };
    
    // File:src/loaders/TextureLoader.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.TextureLoader = function ( manager ) {
    
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
    };
    
    THREE.TextureLoader.prototype = {
    
        constructor: THREE.TextureLoader,
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var loader = new THREE.ImageLoader( scope.manager );
            loader.setCrossOrigin( this.crossOrigin );
            loader.load( url, function ( image ) {
    
                var texture = new THREE.Texture( image );
                texture.needsUpdate = true;
    
                if ( onLoad !== undefined ) {
    
                    onLoad( texture );
    
                }
    
            }, onProgress, onError );
    
        },
    
        setCrossOrigin: function ( value ) {
    
            this.crossOrigin = value;
    
        }
    
    };
    
    // File:src/loaders/CompressedTextureLoader.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     *
     * Abstract Base class to block based textures loader (dds, pvr, ...)
     */
    
    THREE.CompressedTextureLoader = function () {
    
        // override in sub classes
        this._parser = null;
    
    };
    
    
    THREE.CompressedTextureLoader.prototype = {
    
        constructor: THREE.CompressedTextureLoader,
    
        load: function ( url, onLoad, onError ) {
    
            var scope = this;
    
            var images = [];
    
            var texture = new THREE.CompressedTexture();
            texture.image = images;
    
            var loader = new THREE.XHRLoader();
            loader.setResponseType( 'arraybuffer' );
    
            if ( url instanceof Array ) {
    
                var loaded = 0;
    
                var loadTexture = function ( i ) {
    
                    loader.load( url[ i ], function ( buffer ) {
    
                        var texDatas = scope._parser( buffer, true );
    
                        images[ i ] = {
                            width: texDatas.width,
                            height: texDatas.height,
                            format: texDatas.format,
                            mipmaps: texDatas.mipmaps
                        };
    
                        loaded += 1;
    
                        if ( loaded === 6 ) {
    
                             if (texDatas.mipmapCount == 1)
                                 texture.minFilter = THREE.LinearFilter;
    
                            texture.format = texDatas.format;
                            texture.needsUpdate = true;
    
                            if ( onLoad ) onLoad( texture );
    
                        }
    
                    } );
    
                };
    
                for ( var i = 0, il = url.length; i < il; ++ i ) {
    
                    loadTexture( i );
    
                }
    
            } else {
    
                // compressed cubemap texture stored in a single DDS file
    
                loader.load( url, function ( buffer ) {
    
                    var texDatas = scope._parser( buffer, true );
    
                    if ( texDatas.isCubemap ) {
    
                        var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
    
                        for ( var f = 0; f < faces; f ++ ) {
    
                            images[ f ] = { mipmaps : [] };
    
                            for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {
    
                                images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
                                images[ f ].format = texDatas.format;
                                images[ f ].width = texDatas.width;
                                images[ f ].height = texDatas.height;
    
                            }
    
                        }
    
                    } else {
    
                        texture.image.width = texDatas.width;
                        texture.image.height = texDatas.height;
                        texture.mipmaps = texDatas.mipmaps;
    
                    }
    
                    if ( texDatas.mipmapCount === 1 ) {
    
                        texture.minFilter = THREE.LinearFilter;
    
                    }
    
                    texture.format = texDatas.format;
                    texture.needsUpdate = true;
    
                    if ( onLoad ) onLoad( texture );
    
                } );
    
            }
    
            return texture;
    
        }
    
    };
    
    // File:src/materials/Material.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Material = function () {
    
        Object.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );
    
        this.uuid = THREE.Math.generateUUID();
    
        this.name = '';
        this.type = 'Material';
    
        this.side = THREE.FrontSide;
    
        this.opacity = 1;
        this.transparent = false;
    
        this.blending = THREE.NormalBlending;
    
        this.blendSrc = THREE.SrcAlphaFactor;
        this.blendDst = THREE.OneMinusSrcAlphaFactor;
        this.blendEquation = THREE.AddEquation;
    
        this.depthTest = true;
        this.depthWrite = true;
    
        this.polygonOffset = false;
        this.polygonOffsetFactor = 0;
        this.polygonOffsetUnits = 0;
    
        this.alphaTest = 0;
    
        this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer
    
        this.visible = true;
    
        this.needsUpdate = true;
    
    };
    
    THREE.Material.prototype = {
    
        constructor: THREE.Material,
    
        setValues: function ( values ) {
    
            if ( values === undefined ) return;
    
            for ( var key in values ) {
    
                var newValue = values[ key ];
    
                if ( newValue === undefined ) {
    
                    console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
                    continue;
    
                }
    
                if ( key in this ) {
    
                    var currentValue = this[ key ];
    
                    if ( currentValue instanceof THREE.Color ) {
    
                        currentValue.set( newValue );
    
                    } else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {
    
                        currentValue.copy( newValue );
    
                    } else if ( key == 'overdraw' ) {
    
                        // ensure overdraw is backwards-compatable with legacy boolean type
                        this[ key ] = Number( newValue );
    
                    } else {
    
                        this[ key ] = newValue;
    
                    }
    
                }
    
            }
    
        },
    
        toJSON: function () {
    
            var output = {
                metadata: {
                    version: 4.2,
                    type: 'material',
                    generator: 'MaterialExporter'
                },
                uuid: this.uuid,
                type: this.type
            };
    
            if ( this.name !== "" ) output.name = this.name;
    
            if ( this instanceof THREE.MeshBasicMaterial ) {
    
                output.color = this.color.getHex();
                if ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;
                if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
                if ( this.side !== THREE.FrontSide ) output.side = this.side;
    
            } else if ( this instanceof THREE.MeshLambertMaterial ) {
    
                output.color = this.color.getHex();
                output.ambient = this.ambient.getHex();
                output.emissive = this.emissive.getHex();
                if ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;
                if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
                if ( this.side !== THREE.FrontSide ) output.side = this.side;
    
            } else if ( this instanceof THREE.MeshPhongMaterial ) {
    
                output.color = this.color.getHex();
                output.ambient = this.ambient.getHex();
                output.emissive = this.emissive.getHex();
                output.specular = this.specular.getHex();
                output.shininess = this.shininess;
                if ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;
                if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
                if ( this.side !== THREE.FrontSide ) output.side = this.side;
    
            } else if ( this instanceof THREE.MeshNormalMaterial ) {
    
                if ( this.shading !== THREE.FlatShading ) output.shading = this.shading;
                if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
                if ( this.side !== THREE.FrontSide ) output.side = this.side;
    
            } else if ( this instanceof THREE.MeshDepthMaterial ) {
    
                if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
                if ( this.side !== THREE.FrontSide ) output.side = this.side;
    
            } else if ( this instanceof THREE.ShaderMaterial ) {
    
                output.uniforms = this.uniforms;
                output.vertexShader = this.vertexShader;
                output.fragmentShader = this.fragmentShader;
    
            } else if ( this instanceof THREE.SpriteMaterial ) {
    
                output.color = this.color.getHex();
    
            }
    
            if ( this.opacity < 1 ) output.opacity = this.opacity;
            if ( this.transparent !== false ) output.transparent = this.transparent;
            if ( this.wireframe !== false ) output.wireframe = this.wireframe;
    
            return output;
    
        },
    
        clone: function ( material ) {
    
            if ( material === undefined ) material = new THREE.Material();
    
            material.name = this.name;
    
            material.side = this.side;
    
            material.opacity = this.opacity;
            material.transparent = this.transparent;
    
            material.blending = this.blending;
    
            material.blendSrc = this.blendSrc;
            material.blendDst = this.blendDst;
            material.blendEquation = this.blendEquation;
    
            material.depthTest = this.depthTest;
            material.depthWrite = this.depthWrite;
    
            material.polygonOffset = this.polygonOffset;
            material.polygonOffsetFactor = this.polygonOffsetFactor;
            material.polygonOffsetUnits = this.polygonOffsetUnits;
    
            material.alphaTest = this.alphaTest;
    
            material.overdraw = this.overdraw;
    
            material.visible = this.visible;
    
            return material;
    
        },
    
        dispose: function () {
    
            this.dispatchEvent( { type: 'dispose' } );
    
        }
    
    };
    
    THREE.EventDispatcher.prototype.apply( THREE.Material.prototype );
    
    THREE.MaterialIdCount = 0;
    
    // File:src/materials/LineBasicMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  linewidth: <float>,
     *  linecap: "round",
     *  linejoin: "round",
     *
     *  vertexColors: <bool>
     *
     *  fog: <bool>
     * }
     */
    
    THREE.LineBasicMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'LineBasicMaterial';
    
        this.color = new THREE.Color( 0xffffff );
    
        this.linewidth = 1;
        this.linecap = 'round';
        this.linejoin = 'round';
    
        this.vertexColors = THREE.NoColors;
    
        this.fog = true;
    
        this.setValues( parameters );
    
    };
    
    THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.LineBasicMaterial.prototype.clone = function () {
    
        var material = new THREE.LineBasicMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.color.copy( this.color );
    
        material.linewidth = this.linewidth;
        material.linecap = this.linecap;
        material.linejoin = this.linejoin;
    
        material.vertexColors = this.vertexColors;
    
        material.fog = this.fog;
    
        return material;
    
    };
    
    // File:src/materials/LineDashedMaterial.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  linewidth: <float>,
     *
     *  scale: <float>,
     *  dashSize: <float>,
     *  gapSize: <float>,
     *
     *  vertexColors: <bool>
     *
     *  fog: <bool>
     * }
     */
    
    THREE.LineDashedMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'LineDashedMaterial';
    
        this.color = new THREE.Color( 0xffffff );
    
        this.linewidth = 1;
    
        this.scale = 1;
        this.dashSize = 3;
        this.gapSize = 1;
    
        this.vertexColors = false;
    
        this.fog = true;
    
        this.setValues( parameters );
    
    };
    
    THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.LineDashedMaterial.prototype.clone = function () {
    
        var material = new THREE.LineDashedMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.color.copy( this.color );
    
        material.linewidth = this.linewidth;
    
        material.scale = this.scale;
        material.dashSize = this.dashSize;
        material.gapSize = this.gapSize;
    
        material.vertexColors = this.vertexColors;
    
        material.fog = this.fog;
    
        return material;
    
    };
    
    // File:src/materials/MeshBasicMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.Multiply,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  shading: THREE.SmoothShading,
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *
     *  fog: <bool>
     * }
     */
    
    THREE.MeshBasicMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'MeshBasicMaterial';
    
        this.color = new THREE.Color( 0xffffff ); // emissive
    
        this.map = null;
    
        this.lightMap = null;
    
        this.specularMap = null;
    
        this.alphaMap = null;
    
        this.envMap = null;
        this.combine = THREE.MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
    
        this.fog = true;
    
        this.shading = THREE.SmoothShading;
    
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
    
        this.vertexColors = THREE.NoColors;
    
        this.skinning = false;
        this.morphTargets = false;
    
        this.setValues( parameters );
    
    };
    
    THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.MeshBasicMaterial.prototype.clone = function () {
    
        var material = new THREE.MeshBasicMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.color.copy( this.color );
    
        material.map = this.map;
    
        material.lightMap = this.lightMap;
    
        material.specularMap = this.specularMap;
    
        material.alphaMap = this.alphaMap;
    
        material.envMap = this.envMap;
        material.combine = this.combine;
        material.reflectivity = this.reflectivity;
        material.refractionRatio = this.refractionRatio;
    
        material.fog = this.fog;
    
        material.shading = this.shading;
    
        material.wireframe = this.wireframe;
        material.wireframeLinewidth = this.wireframeLinewidth;
        material.wireframeLinecap = this.wireframeLinecap;
        material.wireframeLinejoin = this.wireframeLinejoin;
    
        material.vertexColors = this.vertexColors;
    
        material.skinning = this.skinning;
        material.morphTargets = this.morphTargets;
    
        return material;
    
    };
    
    // File:src/materials/MeshLambertMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  color: <hex>,
     *  ambient: <hex>,
     *  emissive: <hex>,
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.Multiply,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  shading: THREE.SmoothShading,
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>,
     *
     *	fog: <bool>
     * }
     */
    
    THREE.MeshLambertMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'MeshLambertMaterial';
    
        this.color = new THREE.Color( 0xffffff ); // diffuse
        this.ambient = new THREE.Color( 0xffffff );
        this.emissive = new THREE.Color( 0x000000 );
    
        this.wrapAround = false;
        this.wrapRGB = new THREE.Vector3( 1, 1, 1 );
    
        this.map = null;
    
        this.lightMap = null;
    
        this.specularMap = null;
    
        this.alphaMap = null;
    
        this.envMap = null;
        this.combine = THREE.MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
    
        this.fog = true;
    
        this.shading = THREE.SmoothShading;
    
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
    
        this.vertexColors = THREE.NoColors;
    
        this.skinning = false;
        this.morphTargets = false;
        this.morphNormals = false;
    
        this.setValues( parameters );
    
    };
    
    THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.MeshLambertMaterial.prototype.clone = function () {
    
        var material = new THREE.MeshLambertMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.color.copy( this.color );
        material.ambient.copy( this.ambient );
        material.emissive.copy( this.emissive );
    
        material.wrapAround = this.wrapAround;
        material.wrapRGB.copy( this.wrapRGB );
    
        material.map = this.map;
    
        material.lightMap = this.lightMap;
    
        material.specularMap = this.specularMap;
    
        material.alphaMap = this.alphaMap;
    
        material.envMap = this.envMap;
        material.combine = this.combine;
        material.reflectivity = this.reflectivity;
        material.refractionRatio = this.refractionRatio;
    
        material.fog = this.fog;
    
        material.shading = this.shading;
    
        material.wireframe = this.wireframe;
        material.wireframeLinewidth = this.wireframeLinewidth;
        material.wireframeLinecap = this.wireframeLinecap;
        material.wireframeLinejoin = this.wireframeLinejoin;
    
        material.vertexColors = this.vertexColors;
    
        material.skinning = this.skinning;
        material.morphTargets = this.morphTargets;
        material.morphNormals = this.morphNormals;
    
        return material;
    
    };
    
    // File:src/materials/MeshPhongMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  color: <hex>,
     *  ambient: <hex>,
     *  emissive: <hex>,
     *  specular: <hex>,
     *  shininess: <float>,
     *  opacity: <float>,
     *
     *  map: new THREE.Texture( <Image> ),
     *
     *  lightMap: new THREE.Texture( <Image> ),
     *
     *  bumpMap: new THREE.Texture( <Image> ),
     *  bumpScale: <float>,
     *
     *  normalMap: new THREE.Texture( <Image> ),
     *  normalScale: <Vector2>,
     *
     *  specularMap: new THREE.Texture( <Image> ),
     *
     *  alphaMap: new THREE.Texture( <Image> ),
     *
     *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
     *  combine: THREE.Multiply,
     *  reflectivity: <float>,
     *  refractionRatio: <float>,
     *
     *  shading: THREE.SmoothShading,
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>,
     *
     *	fog: <bool>
     * }
     */
    
    THREE.MeshPhongMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'MeshPhongMaterial';
    
        this.color = new THREE.Color( 0xffffff ); // diffuse
        this.ambient = new THREE.Color( 0xffffff );
        this.emissive = new THREE.Color( 0x000000 );
        this.specular = new THREE.Color( 0x111111 );
        this.shininess = 30;
    
        this.metal = false;
    
        this.wrapAround = false;
        this.wrapRGB = new THREE.Vector3( 1, 1, 1 );
    
        this.map = null;
    
        this.lightMap = null;
    
        this.bumpMap = null;
        this.bumpScale = 1;
    
        this.normalMap = null;
        this.normalScale = new THREE.Vector2( 1, 1 );
    
        this.specularMap = null;
    
        this.alphaMap = null;
    
        this.envMap = null;
        this.combine = THREE.MultiplyOperation;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
    
        this.fog = true;
    
        this.shading = THREE.SmoothShading;
    
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
    
        this.vertexColors = THREE.NoColors;
    
        this.skinning = false;
        this.morphTargets = false;
        this.morphNormals = false;
    
        this.setValues( parameters );
    
    };
    
    THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.MeshPhongMaterial.prototype.clone = function () {
    
        var material = new THREE.MeshPhongMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.color.copy( this.color );
        material.ambient.copy( this.ambient );
        material.emissive.copy( this.emissive );
        material.specular.copy( this.specular );
        material.shininess = this.shininess;
    
        material.metal = this.metal;
    
        material.wrapAround = this.wrapAround;
        material.wrapRGB.copy( this.wrapRGB );
    
        material.map = this.map;
    
        material.lightMap = this.lightMap;
    
        material.bumpMap = this.bumpMap;
        material.bumpScale = this.bumpScale;
    
        material.normalMap = this.normalMap;
        material.normalScale.copy( this.normalScale );
    
        material.specularMap = this.specularMap;
    
        material.alphaMap = this.alphaMap;
    
        material.envMap = this.envMap;
        material.combine = this.combine;
        material.reflectivity = this.reflectivity;
        material.refractionRatio = this.refractionRatio;
    
        material.fog = this.fog;
    
        material.shading = this.shading;
    
        material.wireframe = this.wireframe;
        material.wireframeLinewidth = this.wireframeLinewidth;
        material.wireframeLinecap = this.wireframeLinecap;
        material.wireframeLinejoin = this.wireframeLinejoin;
    
        material.vertexColors = this.vertexColors;
    
        material.skinning = this.skinning;
        material.morphTargets = this.morphTargets;
        material.morphNormals = this.morphNormals;
    
        return material;
    
    };
    
    // File:src/materials/MeshDepthMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  opacity: <float>,
     *
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>
     * }
     */
    
    THREE.MeshDepthMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'MeshDepthMaterial';
    
        this.morphTargets = false;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
    
        this.setValues( parameters );
    
    };
    
    THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.MeshDepthMaterial.prototype.clone = function () {
    
        var material = new THREE.MeshDepthMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.wireframe = this.wireframe;
        material.wireframeLinewidth = this.wireframeLinewidth;
    
        return material;
    
    };
    
    // File:src/materials/MeshNormalMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     *
     * parameters = {
     *  opacity: <float>,
     *
     *  shading: THREE.FlatShading,
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>
     * }
     */
    
    THREE.MeshNormalMaterial = function ( parameters ) {
    
        THREE.Material.call( this, parameters );
    
        this.type = 'MeshNormalMaterial';
    
        this.shading = THREE.FlatShading;
    
        this.wireframe = false;
        this.wireframeLinewidth = 1;
    
        this.morphTargets = false;
    
        this.setValues( parameters );
    
    };
    
    THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.MeshNormalMaterial.prototype.clone = function () {
    
        var material = new THREE.MeshNormalMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.shading = this.shading;
    
        material.wireframe = this.wireframe;
        material.wireframeLinewidth = this.wireframeLinewidth;
    
        return material;
    
    };
    
    // File:src/materials/MeshFaceMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.MeshFaceMaterial = function ( materials ) {
    
        this.uuid = THREE.Math.generateUUID();
    
        this.type = 'MeshFaceMaterial';
        
        this.materials = materials instanceof Array ? materials : [];
    
    };
    
    THREE.MeshFaceMaterial.prototype = {
    
        constructor: THREE.MeshFaceMaterial,
    
        toJSON: function () {
    
            var output = {
                metadata: {
                    version: 4.2,
                    type: 'material',
                    generator: 'MaterialExporter'
                },
                uuid: this.uuid,
                type: this.type,
                materials: []
            };
    
            for ( var i = 0, l = this.materials.length; i < l; i ++ ) {
    
                output.materials.push( this.materials[ i ].toJSON() );
    
            }
    
            return output;
    
        },
    
        clone: function () {
    
            var material = new THREE.MeshFaceMaterial();
    
            for ( var i = 0; i < this.materials.length; i ++ ) {
    
                material.materials.push( this.materials[ i ].clone() );
    
            }
    
            return material;
    
        }
    
    };
    
    // File:src/materials/PointCloudMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *  map: new THREE.Texture( <Image> ),
     *
     *  size: <float>,
     *
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  vertexColors: <bool>,
     *
     *  fog: <bool>
     * }
     */
    
    THREE.PointCloudMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'PointCloudMaterial';
    
        this.color = new THREE.Color( 0xffffff );
    
        this.map = null;
    
        this.size = 1;
        this.sizeAttenuation = true;
    
        this.vertexColors = THREE.NoColors;
    
        this.fog = true;
    
        this.setValues( parameters );
    
    };
    
    THREE.PointCloudMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.PointCloudMaterial.prototype.clone = function () {
    
        var material = new THREE.PointCloudMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.color.copy( this.color );
    
        material.map = this.map;
    
        material.size = this.size;
        material.sizeAttenuation = this.sizeAttenuation;
    
        material.vertexColors = this.vertexColors;
    
        material.fog = this.fog;
    
        return material;
    
    };
    
    // backwards compatibility
    
    THREE.ParticleBasicMaterial = function ( parameters ) {
    
        console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.' );
        return new THREE.PointCloudMaterial( parameters );
    
    };
    
    THREE.ParticleSystemMaterial = function ( parameters ) {
    
        console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.' );
        return new THREE.PointCloudMaterial( parameters );
    
    };
    
    // File:src/materials/ShaderMaterial.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  defines: { "label" : "value" },
     *  uniforms: { "parameter1": { type: "f", value: 1.0 }, "parameter2": { type: "i" value2: 2 } },
     *
     *  fragmentShader: <string>,
     *  vertexShader: <string>,
     *
     *  shading: THREE.SmoothShading,
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *  wireframe: <boolean>,
     *  wireframeLinewidth: <float>,
     *
     *  lights: <bool>,
     *
     *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
     *
     *  skinning: <bool>,
     *  morphTargets: <bool>,
     *  morphNormals: <bool>,
     *
     *	fog: <bool>
     * }
     */
    
    THREE.ShaderMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'ShaderMaterial';
    
        this.defines = {};
        this.uniforms = {};
        this.attributes = null;
    
        this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
        this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';
    
        this.shading = THREE.SmoothShading;
    
        this.linewidth = 1;
    
        this.wireframe = false;
        this.wireframeLinewidth = 1;
    
        this.fog = false; // set to use scene fog
    
        this.lights = false; // set to use scene lights
    
        this.vertexColors = THREE.NoColors; // set to use "color" attribute stream
    
        this.skinning = false; // set to use skinning attribute streams
    
        this.morphTargets = false; // set to use morph targets
        this.morphNormals = false; // set to use morph normals
    
        // When rendered geometry doesn't include these attributes but the material does,
        // use these default values in WebGL. This avoids errors when buffer data is missing.
        this.defaultAttributeValues = {
            'color': [ 1, 1, 1 ],
            'uv': [ 0, 0 ],
            'uv2': [ 0, 0 ]
        };
    
        this.index0AttributeName = undefined;
    
        this.setValues( parameters );
    
    };
    
    THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.ShaderMaterial.prototype.clone = function () {
    
        var material = new THREE.ShaderMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.fragmentShader = this.fragmentShader;
        material.vertexShader = this.vertexShader;
    
        material.uniforms = THREE.UniformsUtils.clone( this.uniforms );
    
        material.attributes = this.attributes;
        material.defines = this.defines;
    
        material.shading = this.shading;
    
        material.wireframe = this.wireframe;
        material.wireframeLinewidth = this.wireframeLinewidth;
    
        material.fog = this.fog;
    
        material.lights = this.lights;
    
        material.vertexColors = this.vertexColors;
    
        material.skinning = this.skinning;
    
        material.morphTargets = this.morphTargets;
        material.morphNormals = this.morphNormals;
    
        return material;
    
    };
    
    // File:src/materials/RawShaderMaterial.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.RawShaderMaterial = function ( parameters ) {
    
        THREE.ShaderMaterial.call( this, parameters );
    
        this.type = 'RawShaderMaterial';
    
    };
    
    THREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );
    
    THREE.RawShaderMaterial.prototype.clone = function () {
    
        var material = new THREE.RawShaderMaterial();
    
        THREE.ShaderMaterial.prototype.clone.call( this, material );
    
        return material;
    
    };
    
    // File:src/materials/SpriteMaterial.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     *
     * parameters = {
     *  color: <hex>,
     *  opacity: <float>,
     *  map: new THREE.Texture( <Image> ),
     *
     *  blending: THREE.NormalBlending,
     *  depthTest: <bool>,
     *  depthWrite: <bool>,
     *
     *	uvOffset: new THREE.Vector2(),
     *	uvScale: new THREE.Vector2(),
     *
     *  fog: <bool>
     * }
     */
    
    THREE.SpriteMaterial = function ( parameters ) {
    
        THREE.Material.call( this );
    
        this.type = 'SpriteMaterial';
    
        this.color = new THREE.Color( 0xffffff );
        this.map = null;
    
        this.rotation = 0;
    
        this.fog = false;
    
        // set parameters
    
        this.setValues( parameters );
    
    };
    
    THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );
    
    THREE.SpriteMaterial.prototype.clone = function () {
    
        var material = new THREE.SpriteMaterial();
    
        THREE.Material.prototype.clone.call( this, material );
    
        material.color.copy( this.color );
        material.map = this.map;
    
        material.rotation = this.rotation;
    
        material.fog = this.fog;
    
        return material;
    
    };
    
    // File:src/textures/Texture.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     * @author szimek / https://github.com/szimek/
     */
    
    THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
    
        Object.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );
    
        this.uuid = THREE.Math.generateUUID();
    
        this.name = '';
    
        this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;
        this.mipmaps = [];
    
        this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;
    
        this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
        this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;
    
        this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
        this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;
    
        this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
    
        this.format = format !== undefined ? format : THREE.RGBAFormat;
        this.type = type !== undefined ? type : THREE.UnsignedByteType;
    
        this.offset = new THREE.Vector2( 0, 0 );
        this.repeat = new THREE.Vector2( 1, 1 );
    
        this.generateMipmaps = true;
        this.premultiplyAlpha = false;
        this.flipY = true;
        this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
    
        this._needsUpdate = false;
        this.onUpdate = null;
    
    };
    
    THREE.Texture.DEFAULT_IMAGE = undefined;
    THREE.Texture.DEFAULT_MAPPING = new THREE.UVMapping();
    
    THREE.Texture.prototype = {
    
        constructor: THREE.Texture,
    
        get needsUpdate () {
    
            return this._needsUpdate;
    
        },
    
        set needsUpdate ( value ) {
    
            if ( value === true ) this.update();
    
            this._needsUpdate = value;
    
        },
    
        clone: function ( texture ) {
    
            if ( texture === undefined ) texture = new THREE.Texture();
    
            texture.image = this.image;
            texture.mipmaps = this.mipmaps.slice( 0 );
    
            texture.mapping = this.mapping;
    
            texture.wrapS = this.wrapS;
            texture.wrapT = this.wrapT;
    
            texture.magFilter = this.magFilter;
            texture.minFilter = this.minFilter;
    
            texture.anisotropy = this.anisotropy;
    
            texture.format = this.format;
            texture.type = this.type;
    
            texture.offset.copy( this.offset );
            texture.repeat.copy( this.repeat );
    
            texture.generateMipmaps = this.generateMipmaps;
            texture.premultiplyAlpha = this.premultiplyAlpha;
            texture.flipY = this.flipY;
            texture.unpackAlignment = this.unpackAlignment;
    
            return texture;
    
        },
    
        update: function () {
    
            this.dispatchEvent( { type: 'update' } );
    
        },
    
        dispose: function () {
    
            this.dispatchEvent( { type: 'dispose' } );
    
        }
    
    };
    
    THREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );
    
    THREE.TextureIdCount = 0;
    
    // File:src/textures/CubeTexture.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
    
        THREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
    
        this.images = images;
    
    };
    
    THREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );
    
    THREE.CubeTexture.clone = function ( texture ) {
    
        if ( texture === undefined ) texture = new THREE.CubeTexture();
    
        THREE.Texture.prototype.clone.call( this, texture );
    
        texture.images = this.images;
    
        return texture;
    
    };
    
    // File:src/textures/CompressedTexture.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {
    
        THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
    
        this.image = { width: width, height: height };
        this.mipmaps = mipmaps;
    
        // no flipping for cube textures
        // (also flipping doesn't work for compressed textures )
    
        this.flipY = false;
    
        // can't generate mipmaps for compressed textures
        // mips must be embedded in DDS files
    
        this.generateMipmaps = false;
    
    };
    
    THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );
    
    THREE.CompressedTexture.prototype.clone = function () {
    
        var texture = new THREE.CompressedTexture();
    
        THREE.Texture.prototype.clone.call( this, texture );
    
        return texture;
    
    };
    
    // File:src/textures/DataTexture.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {
    
        THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
    
        this.image = { data: data, width: width, height: height };
    
    };
    
    THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );
    
    THREE.DataTexture.prototype.clone = function () {
    
        var texture = new THREE.DataTexture();
    
        THREE.Texture.prototype.clone.call( this, texture );
    
        return texture;
    
    };
    
    // File:src/textures/VideoTexture.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
    
        THREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
    
        this.generateMipmaps = false;
    
        var scope = this;
    
        var update = function () {
    
            requestAnimationFrame( update );
    
            if ( video.readyState === video.HAVE_ENOUGH_DATA ) {
    
                scope.needsUpdate = true;
    
            }
    
        };
    
        update();
    
    };
    
    THREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );
    
    // File:src/objects/Group.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Group = function () {
    
        THREE.Object3D.call( this );
    
        this.type = 'Group';
    
    };
    
    THREE.Group.prototype = Object.create( THREE.Object3D.prototype );
    
    // File:src/objects/PointCloud.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.PointCloud = function ( geometry, material ) {
    
        THREE.Object3D.call( this );
    
        this.type = 'PointCloud';
    
        this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
        this.material = material !== undefined ? material : new THREE.PointCloudMaterial( { color: Math.random() * 0xffffff } );
    
        this.sortParticles = false;
    
    };
    
    THREE.PointCloud.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.PointCloud.prototype.raycast = ( function () {
    
        var inverseMatrix = new THREE.Matrix4();
        var ray = new THREE.Ray();
    
        return function ( raycaster, intersects ) {
    
            var object = this;
            var geometry = object.geometry;
            var threshold = raycaster.params.PointCloud.threshold;
    
            inverseMatrix.getInverse( this.matrixWorld );
            ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
    
            if ( geometry.boundingBox !== null ) {
    
                if ( ray.isIntersectionBox( geometry.boundingBox ) === false ) {
    
                    return;
    
                }
    
            }
    
            var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
            var position = new THREE.Vector3();
    
            var testPoint = function ( point, index ) {
    
                var rayPointDistance = ray.distanceToPoint( point );
    
                if ( rayPointDistance < localThreshold ) {
    
                    var intersectPoint = ray.closestPointToPoint( point );
                    intersectPoint.applyMatrix4( object.matrixWorld );
    
                    var distance = raycaster.ray.origin.distanceTo( intersectPoint );
    
                    intersects.push( {
    
                        distance: distance,
                        distanceToRay: rayPointDistance,
                        point: intersectPoint.clone(),
                        index: index,
                        face: null,
                        object: object
    
                    } );
    
                }
    
            };
    
            if ( geometry instanceof THREE.BufferGeometry ) {
    
                var attributes = geometry.attributes;
                var positions = attributes.position.array;
    
                if ( attributes.index !== undefined ) {
    
                    var indices = attributes.index.array;
                    var offsets = geometry.offsets;
    
                    if ( offsets.length === 0 ) {
    
                        var offset = {
                            start: 0,
                            count: indices.length,
                            index: 0
                        };
    
                        offsets = [ offset ];
    
                    }
    
                    for ( var oi = 0, ol = offsets.length; oi < ol; ++oi ) {
    
                        var start = offsets[ oi ].start;
                        var count = offsets[ oi ].count;
                        var index = offsets[ oi ].index;
    
                        for ( var i = start, il = start + count; i < il; i ++ ) {
    
                            var a = index + indices[ i ];
    
                            position.fromArray( positions, a * 3 );
    
                            testPoint( position, a );
    
                        }
    
                    }
    
                } else {
    
                    var pointCount = positions.length / 3;
    
                    for ( var i = 0; i < pointCount; i ++ ) {
    
                        position.set(
                            positions[ 3 * i ],
                            positions[ 3 * i + 1 ],
                            positions[ 3 * i + 2 ]
                        );
    
                        testPoint( position, i );
    
                    }
    
                }
    
            } else {
    
                var vertices = this.geometry.vertices;
    
                for ( var i = 0; i < vertices.length; i ++ ) {
    
                    testPoint( vertices[ i ], i );
    
                }
    
            }
    
        };
    
    }() );
    
    THREE.PointCloud.prototype.clone = function ( object ) {
    
        if ( object === undefined ) object = new THREE.PointCloud( this.geometry, this.material );
    
        object.sortParticles = this.sortParticles;
    
        THREE.Object3D.prototype.clone.call( this, object );
    
        return object;
    
    };
    
    // Backwards compatibility
    
    THREE.ParticleSystem = function ( geometry, material ) {
    
        console.warn( 'THREE.ParticleSystem has been renamed to THREE.PointCloud.' );
        return new THREE.PointCloud( geometry, material );
    
    };
    
    // File:src/objects/Line.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Line = function ( geometry, material, mode ) {
    
        THREE.Object3D.call( this );
    
        this.type = 'Line';
    
        this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
        this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );
    
        this.mode = ( mode !== undefined ) ? mode : THREE.LineStrip;
    
    };
    
    THREE.LineStrip = 0;
    THREE.LinePieces = 1;
    
    THREE.Line.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.Line.prototype.raycast = ( function () {
    
        var inverseMatrix = new THREE.Matrix4();
        var ray = new THREE.Ray();
        var sphere = new THREE.Sphere();
    
        return function ( raycaster, intersects ) {
    
            var precision = raycaster.linePrecision;
            var precisionSq = precision * precision;
    
            var geometry = this.geometry;
    
            if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
    
            // Checking boundingSphere distance to ray
    
            sphere.copy( geometry.boundingSphere );
            sphere.applyMatrix4( this.matrixWorld );
    
            if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {
    
                return;
    
            }
    
            inverseMatrix.getInverse( this.matrixWorld );
            ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
    
            /* if ( geometry instanceof THREE.BufferGeometry ) {
    
            } else */ if ( geometry instanceof THREE.Geometry ) {
    
                var vertices = geometry.vertices;
                var nbVertices = vertices.length;
                var interSegment = new THREE.Vector3();
                var interRay = new THREE.Vector3();
                var step = this.mode === THREE.LineStrip ? 1 : 2;
    
                for ( var i = 0; i < nbVertices - 1; i = i + step ) {
    
                    var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );
    
                    if ( distSq > precisionSq ) continue;
    
                    var distance = ray.origin.distanceTo( interRay );
    
                    if ( distance < raycaster.near || distance > raycaster.far ) continue;
    
                    intersects.push( {
    
                        distance: distance,
                        // What do we want? intersection point on the ray or on the segment??
                        // point: raycaster.ray.at( distance ),
                        point: interSegment.clone().applyMatrix4( this.matrixWorld ),
                        face: null,
                        faceIndex: null,
                        object: this
    
                    } );
    
                }
    
            }
    
        };
    
    }() );
    
    THREE.Line.prototype.clone = function ( object ) {
    
        if ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.mode );
    
        THREE.Object3D.prototype.clone.call( this, object );
    
        return object;
    
    };
    
    // File:src/objects/Mesh.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     * @author mikael emtinger / http://gomo.se/
     * @author jonobr1 / http://jonobr1.com/
     */
    
    THREE.Mesh = function ( geometry, material ) {
    
        THREE.Object3D.call( this );
    
        this.type = 'Mesh';
        
        this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
        this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );
    
        this.updateMorphTargets();
    
    };
    
    THREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.Mesh.prototype.updateMorphTargets = function () {
    
        if ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {
    
            this.morphTargetBase = - 1;
            this.morphTargetForcedOrder = [];
            this.morphTargetInfluences = [];
            this.morphTargetDictionary = {};
    
            for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {
    
                this.morphTargetInfluences.push( 0 );
                this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;
    
            }
    
        }
    
    };
    
    THREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {
    
        if ( this.morphTargetDictionary[ name ] !== undefined ) {
    
            return this.morphTargetDictionary[ name ];
    
        }
    
        console.log( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );
    
        return 0;
    
    };
    
    
    THREE.Mesh.prototype.raycast = ( function () {
    
        var inverseMatrix = new THREE.Matrix4();
        var ray = new THREE.Ray();
        var sphere = new THREE.Sphere();
    
        var vA = new THREE.Vector3();
        var vB = new THREE.Vector3();
        var vC = new THREE.Vector3();
    
        return function ( raycaster, intersects ) {
    
            var geometry = this.geometry;
    
            // Checking boundingSphere distance to ray
    
            if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
    
            sphere.copy( geometry.boundingSphere );
            sphere.applyMatrix4( this.matrixWorld );
    
            if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {
    
                return;
    
            }
    
            // Check boundingBox before continuing
    
            inverseMatrix.getInverse( this.matrixWorld );
            ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
    
            if ( geometry.boundingBox !== null ) {
    
                if ( ray.isIntersectionBox( geometry.boundingBox ) === false )  {
    
                    return;
    
                }
    
            }
    
            if ( geometry instanceof THREE.BufferGeometry ) {
    
                var material = this.material;
    
                if ( material === undefined ) return;
    
                var attributes = geometry.attributes;
    
                var a, b, c;
                var precision = raycaster.precision;
    
                if ( attributes.index !== undefined ) {
    
                    var indices = attributes.index.array;
                    var positions = attributes.position.array;
                    var offsets = geometry.offsets;
    
                    if ( offsets.length === 0 ) {
    
                        offsets = [ { start: 0, count: indices.length, index: 0 } ];
    
                    }
    
                    for ( var oi = 0, ol = offsets.length; oi < ol; ++oi ) {
    
                        var start = offsets[ oi ].start;
                        var count = offsets[ oi ].count;
                        var index = offsets[ oi ].index;
    
                        for ( var i = start, il = start + count; i < il; i += 3 ) {
    
                            a = index + indices[ i ];
                            b = index + indices[ i + 1 ];
                            c = index + indices[ i + 2 ];
    
                            vA.fromArray( positions, a * 3 );
                            vB.fromArray( positions, b * 3 );
                            vC.fromArray( positions, c * 3 );
    
                            if ( material.side === THREE.BackSide ) {
    
                                var intersectionPoint = ray.intersectTriangle( vC, vB, vA, true );
    
                            } else {
    
                                var intersectionPoint = ray.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );
    
                            }
    
                            if ( intersectionPoint === null ) continue;
    
                            intersectionPoint.applyMatrix4( this.matrixWorld );
    
                            var distance = raycaster.ray.origin.distanceTo( intersectionPoint );
    
                            if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;
    
                            intersects.push( {
    
                                distance: distance,
                                point: intersectionPoint,
                                face: new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) ),
                                faceIndex: null,
                                object: this
    
                            } );
    
                        }
    
                    }
    
                } else {
    
                    var positions = attributes.position.array;
    
                    for ( var i = 0, j = 0, il = positions.length; i < il; i += 3, j += 9 ) {
    
                        a = i;
                        b = i + 1;
                        c = i + 2;
    
                        vA.fromArray( positions, j );
                        vB.fromArray( positions, j + 3 );
                        vC.fromArray( positions, j + 6 );
    
                        if ( material.side === THREE.BackSide ) {
    
                            var intersectionPoint = ray.intersectTriangle( vC, vB, vA, true );
    
                        } else {
    
                            var intersectionPoint = ray.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );
    
                        }
    
                        if ( intersectionPoint === null ) continue;
    
                        intersectionPoint.applyMatrix4( this.matrixWorld );
    
                        var distance = raycaster.ray.origin.distanceTo( intersectionPoint );
    
                        if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;
    
                        intersects.push( {
    
                            distance: distance,
                            point: intersectionPoint,
                            face: new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) ),
                            faceIndex: null,
                            object: this
    
                        } );
    
                    }
    
                }
    
            } else if ( geometry instanceof THREE.Geometry ) {
    
                var isFaceMaterial = this.material instanceof THREE.MeshFaceMaterial;
                var objectMaterials = isFaceMaterial === true ? this.material.materials : null;
    
                var a, b, c, d;
                var precision = raycaster.precision;
    
                var vertices = geometry.vertices;
    
                for ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {
    
                    var face = geometry.faces[ f ];
    
                    var material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : this.material;
    
                    if ( material === undefined ) continue;
    
                    a = vertices[ face.a ];
                    b = vertices[ face.b ];
                    c = vertices[ face.c ];
    
                    if ( material.morphTargets === true ) {
    
                        var morphTargets = geometry.morphTargets;
                        var morphInfluences = this.morphTargetInfluences;
    
                        vA.set( 0, 0, 0 );
                        vB.set( 0, 0, 0 );
                        vC.set( 0, 0, 0 );
    
                        for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {
    
                            var influence = morphInfluences[ t ];
    
                            if ( influence === 0 ) continue;
    
                            var targets = morphTargets[ t ].vertices;
    
                            vA.x += ( targets[ face.a ].x - a.x ) * influence;
                            vA.y += ( targets[ face.a ].y - a.y ) * influence;
                            vA.z += ( targets[ face.a ].z - a.z ) * influence;
    
                            vB.x += ( targets[ face.b ].x - b.x ) * influence;
                            vB.y += ( targets[ face.b ].y - b.y ) * influence;
                            vB.z += ( targets[ face.b ].z - b.z ) * influence;
    
                            vC.x += ( targets[ face.c ].x - c.x ) * influence;
                            vC.y += ( targets[ face.c ].y - c.y ) * influence;
                            vC.z += ( targets[ face.c ].z - c.z ) * influence;
    
                        }
    
                        vA.add( a );
                        vB.add( b );
                        vC.add( c );
    
                        a = vA;
                        b = vB;
                        c = vC;
    
                    }
    
                    if ( material.side === THREE.BackSide ) {
    
                        var intersectionPoint = ray.intersectTriangle( c, b, a, true );
    
                    } else {
    
                        var intersectionPoint = ray.intersectTriangle( a, b, c, material.side !== THREE.DoubleSide );
    
                    }
    
                    if ( intersectionPoint === null ) continue;
    
                    intersectionPoint.applyMatrix4( this.matrixWorld );
    
                    var distance = raycaster.ray.origin.distanceTo( intersectionPoint );
    
                    if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;
    
                    intersects.push( {
    
                        distance: distance,
                        point: intersectionPoint,
                        face: face,
                        faceIndex: f,
                        object: this
    
                    } );
    
                }
    
            }
    
        };
    
    }() );
    
    THREE.Mesh.prototype.clone = function ( object, recursive ) {
    
        if ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );
    
        THREE.Object3D.prototype.clone.call( this, object, recursive );
    
        return object;
    
    };
    
    // File:src/objects/Bone.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     * @author ikerr / http://verold.com
     */
    
    THREE.Bone = function ( belongsToSkin ) {
    
        THREE.Object3D.call( this );
    
        this.skin = belongsToSkin;
    
    };
    
    THREE.Bone.prototype = Object.create( THREE.Object3D.prototype );
    
    
    // File:src/objects/Skeleton.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     * @author michael guerrero / http://realitymeltdown.com
     * @author ikerr / http://verold.com
     */
    
    THREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {
    
        this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;
    
        this.identityMatrix = new THREE.Matrix4();
    
        // copy the bone array
    
        bones = bones || [];
    
        this.bones = bones.slice( 0 );
    
        // create a bone texture or an array of floats
    
        if ( this.useVertexTexture ) {
    
            // layout (1 matrix = 4 pixels)
            //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
            //  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)
            //       16x16 pixel texture max   64 bones (16 * 16 / 4)
            //       32x32 pixel texture max  256 bones (32 * 32 / 4)
            //       64x64 pixel texture max 1024 bones (64 * 64 / 4)
    
            var size;
    
            if ( this.bones.length > 256 )
                size = 64;
            else if ( this.bones.length > 64 )
                size = 32;
            else if ( this.bones.length > 16 )
                size = 16;
            else
                size = 8;
    
            this.boneTextureWidth = size;
            this.boneTextureHeight = size;
    
            this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
            this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );
            this.boneTexture.minFilter = THREE.NearestFilter;
            this.boneTexture.magFilter = THREE.NearestFilter;
            this.boneTexture.generateMipmaps = false;
            this.boneTexture.flipY = false;
    
        } else {
    
            this.boneMatrices = new Float32Array( 16 * this.bones.length );
    
        }
    
        // use the supplied bone inverses or calculate the inverses
    
        if ( boneInverses === undefined ) {
    
            this.calculateInverses();
    
        } else {
    
            if ( this.bones.length === boneInverses.length ) {
    
                this.boneInverses = boneInverses.slice( 0 );
    
            } else {
    
                console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );
    
                this.boneInverses = [];
    
                for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
    
                    this.boneInverses.push( new THREE.Matrix4() );
    
                }
    
            }
    
        }
    
    };
    
    THREE.Skeleton.prototype.calculateInverses = function () {
    
        this.boneInverses = [];
    
        for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
    
            var inverse = new THREE.Matrix4();
    
            if ( this.bones[ b ] ) {
    
                inverse.getInverse( this.bones[ b ].matrixWorld );
    
            }
    
            this.boneInverses.push( inverse );
    
        }
    
    };
    
    THREE.Skeleton.prototype.pose = function () {
    
        var bone;
    
        // recover the bind-time world matrices
    
        for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
    
            bone = this.bones[ b ];
    
            if ( bone ) {
    
                bone.matrixWorld.getInverse( this.boneInverses[ b ] );
    
            }
    
        }
    
        // compute the local matrices, positions, rotations and scales
    
        for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
    
            bone = this.bones[ b ];
    
            if ( bone ) {
    
                if ( bone.parent ) {
    
                    bone.matrix.getInverse( bone.parent.matrixWorld );
                    bone.matrix.multiply( bone.matrixWorld );
    
                } else {
    
                    bone.matrix.copy( bone.matrixWorld );
    
                }
    
                bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
    
            }
    
        }
    
    };
    
    THREE.Skeleton.prototype.update = ( function () {
    
        var offsetMatrix = new THREE.Matrix4();
        
        return function () {
    
            // flatten bone matrices to array
    
            for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
    
                // compute the offset between the current and the original transform
    
                var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;
    
                offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
                offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );
    
            }
    
            if ( this.useVertexTexture ) {
    
                this.boneTexture.needsUpdate = true;
    
            }
            
        };
    
    } )();
    
    
    // File:src/objects/SkinnedMesh.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     * @author ikerr / http://verold.com
     */
    
    THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {
    
        THREE.Mesh.call( this, geometry, material );
    
        this.type = 'SkinnedMesh';
    
        this.bindMode = "attached";
        this.bindMatrix = new THREE.Matrix4();
        this.bindMatrixInverse = new THREE.Matrix4();
    
        // init bones
    
        // TODO: remove bone creation as there is no reason (other than
        // convenience) for THREE.SkinnedMesh to do this.
    
        var bones = [];
    
        if ( this.geometry && this.geometry.bones !== undefined ) {
    
            var bone, gbone, p, q, s;
    
            for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++b ) {
    
                gbone = this.geometry.bones[ b ];
    
                p = gbone.pos;
                q = gbone.rotq;
                s = gbone.scl;
    
                bone = new THREE.Bone( this );
                bones.push( bone );
    
                bone.name = gbone.name;
                bone.position.set( p[ 0 ], p[ 1 ], p[ 2 ] );
                bone.quaternion.set( q[ 0 ], q[ 1 ], q[ 2 ], q[ 3 ] );
    
                if ( s !== undefined ) {
    
                    bone.scale.set( s[ 0 ], s[ 1 ], s[ 2 ] );
    
                } else {
    
                    bone.scale.set( 1, 1, 1 );
    
                }
    
            }
    
            for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++b ) {
    
                gbone = this.geometry.bones[ b ];
    
                if ( gbone.parent !== - 1 ) {
    
                    bones[ gbone.parent ].add( bones[ b ] );
    
                } else {
    
                    this.add( bones[ b ] );
    
                }
    
            }
    
        }
    
        this.normalizeSkinWeights();
    
        this.updateMatrixWorld( true );
        this.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ) );
    
    };
    
    
    THREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );
    
    THREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {
    
        this.skeleton = skeleton;
    
        if ( bindMatrix === undefined ) {
    
            this.updateMatrixWorld( true );
    
            bindMatrix = this.matrixWorld;
    
        }
    
        this.bindMatrix.copy( bindMatrix );
        this.bindMatrixInverse.getInverse( bindMatrix );
    
    };
    
    THREE.SkinnedMesh.prototype.pose = function () {
    
        this.skeleton.pose();
    
    };
    
    THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {
    
        if ( this.geometry instanceof THREE.Geometry ) {
    
            for ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {
    
                var sw = this.geometry.skinWeights[ i ];
    
                var scale = 1.0 / sw.lengthManhattan();
    
                if ( scale !== Infinity ) {
    
                    sw.multiplyScalar( scale );
    
                } else {
    
                    sw.set( 1 ); // this will be normalized by the shader anyway
    
                }
    
            }
    
        } else {
    
            // skinning weights assumed to be normalized for THREE.BufferGeometry
    
        }
    
    };
    
    THREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {
    
        THREE.Mesh.prototype.updateMatrixWorld.call( this, true );
    
        if ( this.bindMode === "attached" ) {
    
            this.bindMatrixInverse.getInverse( this.matrixWorld );
    
        } else if ( this.bindMode === "detached" ) {
    
            this.bindMatrixInverse.getInverse( this.bindMatrix );
    
        } else {
    
            console.warn( 'THREE.SkinnedMesh unreckognized bindMode: ' + this.bindMode );
    
        }
    
    };
    
    THREE.SkinnedMesh.prototype.clone = function( object ) {
    
        if ( object === undefined ) {
    
            object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );
    
        }
    
        THREE.Mesh.prototype.clone.call( this, object );
    
        return object;
    
    };
    
    
    // File:src/objects/MorphAnimMesh.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.MorphAnimMesh = function ( geometry, material ) {
    
        THREE.Mesh.call( this, geometry, material );
    
        this.type = 'MorphAnimMesh';
    
        // API
    
        this.duration = 1000; // milliseconds
        this.mirroredLoop = false;
        this.time = 0;
    
        // internals
    
        this.lastKeyframe = 0;
        this.currentKeyframe = 0;
    
        this.direction = 1;
        this.directionBackwards = false;
    
        this.setFrameRange( 0, this.geometry.morphTargets.length - 1 );
    
    };
    
    THREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );
    
    THREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {
    
        this.startKeyframe = start;
        this.endKeyframe = end;
    
        this.length = this.endKeyframe - this.startKeyframe + 1;
    
    };
    
    THREE.MorphAnimMesh.prototype.setDirectionForward = function () {
    
        this.direction = 1;
        this.directionBackwards = false;
    
    };
    
    THREE.MorphAnimMesh.prototype.setDirectionBackward = function () {
    
        this.direction = - 1;
        this.directionBackwards = true;
    
    };
    
    THREE.MorphAnimMesh.prototype.parseAnimations = function () {
    
        var geometry = this.geometry;
    
        if ( ! geometry.animations ) geometry.animations = {};
    
        var firstAnimation, animations = geometry.animations;
    
        var pattern = /([a-z]+)_?(\d+)/;
    
        for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {
    
            var morph = geometry.morphTargets[ i ];
            var parts = morph.name.match( pattern );
    
            if ( parts && parts.length > 1 ) {
    
                var label = parts[ 1 ];
                var num = parts[ 2 ];
    
                if ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: - Infinity };
    
                var animation = animations[ label ];
    
                if ( i < animation.start ) animation.start = i;
                if ( i > animation.end ) animation.end = i;
    
                if ( ! firstAnimation ) firstAnimation = label;
    
            }
    
        }
    
        geometry.firstAnimation = firstAnimation;
    
    };
    
    THREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {
    
        if ( ! this.geometry.animations ) this.geometry.animations = {};
    
        this.geometry.animations[ label ] = { start: start, end: end };
    
    };
    
    THREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {
    
        var animation = this.geometry.animations[ label ];
    
        if ( animation ) {
    
            this.setFrameRange( animation.start, animation.end );
            this.duration = 1000 * ( ( animation.end - animation.start ) / fps );
            this.time = 0;
    
        } else {
    
            console.warn( 'animation[' + label + '] undefined' );
    
        }
    
    };
    
    THREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {
    
        var frameTime = this.duration / this.length;
    
        this.time += this.direction * delta;
    
        if ( this.mirroredLoop ) {
    
            if ( this.time > this.duration || this.time < 0 ) {
    
                this.direction *= - 1;
    
                if ( this.time > this.duration ) {
    
                    this.time = this.duration;
                    this.directionBackwards = true;
    
                }
    
                if ( this.time < 0 ) {
    
                    this.time = 0;
                    this.directionBackwards = false;
    
                }
    
            }
    
        } else {
    
            this.time = this.time % this.duration;
    
            if ( this.time < 0 ) this.time += this.duration;
    
        }
    
        var keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );
    
        if ( keyframe !== this.currentKeyframe ) {
    
            this.morphTargetInfluences[ this.lastKeyframe ] = 0;
            this.morphTargetInfluences[ this.currentKeyframe ] = 1;
    
            this.morphTargetInfluences[ keyframe ] = 0;
    
            this.lastKeyframe = this.currentKeyframe;
            this.currentKeyframe = keyframe;
    
        }
    
        var mix = ( this.time % frameTime ) / frameTime;
    
        if ( this.directionBackwards ) {
    
            mix = 1 - mix;
    
        }
    
        this.morphTargetInfluences[ this.currentKeyframe ] = mix;
        this.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;
    
    };
    
    THREE.MorphAnimMesh.prototype.interpolateTargets = function ( a, b, t ) {
    
        var influences = this.morphTargetInfluences;
    
        for ( var i = 0, l = influences.length; i < l; i ++ ) {
    
            influences[ i ] = 0;
    
        }
    
        if ( a > -1 ) influences[ a ] = 1 - t;
        if ( b > -1 ) influences[ b ] = t;
    
    };
    
    THREE.MorphAnimMesh.prototype.clone = function ( object ) {
    
        if ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );
    
        object.duration = this.duration;
        object.mirroredLoop = this.mirroredLoop;
        object.time = this.time;
    
        object.lastKeyframe = this.lastKeyframe;
        object.currentKeyframe = this.currentKeyframe;
    
        object.direction = this.direction;
        object.directionBackwards = this.directionBackwards;
    
        THREE.Mesh.prototype.clone.call( this, object );
    
        return object;
    
    };
    
    // File:src/objects/LOD.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.LOD = function () {
    
        THREE.Object3D.call( this );
    
        this.objects = [];
    
    };
    
    
    THREE.LOD.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.LOD.prototype.addLevel = function ( object, distance ) {
    
        if ( distance === undefined ) distance = 0;
    
        distance = Math.abs( distance );
    
        for ( var l = 0; l < this.objects.length; l ++ ) {
    
            if ( distance < this.objects[ l ].distance ) {
    
                break;
    
            }
    
        }
    
        this.objects.splice( l, 0, { distance: distance, object: object } );
        this.add( object );
    
    };
    
    THREE.LOD.prototype.getObjectForDistance = function ( distance ) {
    
        for ( var i = 1, l = this.objects.length; i < l; i ++ ) {
    
            if ( distance < this.objects[ i ].distance ) {
    
                break;
    
            }
    
        }
    
        return this.objects[ i - 1 ].object;
    
    };
    
    THREE.LOD.prototype.raycast = ( function () {
    
        var matrixPosition = new THREE.Vector3();
    
        return function ( raycaster, intersects ) {
    
            matrixPosition.setFromMatrixPosition( this.matrixWorld );
    
            var distance = raycaster.ray.origin.distanceTo( matrixPosition );
    
            this.getObjectForDistance( distance ).raycast( raycaster, intersects );
    
        };
    
    }() );
    
    THREE.LOD.prototype.update = function () {
    
        var v1 = new THREE.Vector3();
        var v2 = new THREE.Vector3();
    
        return function ( camera ) {
    
            if ( this.objects.length > 1 ) {
    
                v1.setFromMatrixPosition( camera.matrixWorld );
                v2.setFromMatrixPosition( this.matrixWorld );
    
                var distance = v1.distanceTo( v2 );
    
                this.objects[ 0 ].object.visible = true;
    
                for ( var i = 1, l = this.objects.length; i < l; i ++ ) {
    
                    if ( distance >= this.objects[ i ].distance ) {
    
                        this.objects[ i - 1 ].object.visible = false;
                        this.objects[ i     ].object.visible = true;
    
                    } else {
    
                        break;
    
                    }
    
                }
    
                for ( ; i < l; i ++ ) {
    
                    this.objects[ i ].object.visible = false;
    
                }
    
            }
    
        };
    
    }();
    
    THREE.LOD.prototype.clone = function ( object ) {
    
        if ( object === undefined ) object = new THREE.LOD();
    
        THREE.Object3D.prototype.clone.call( this, object );
    
        for ( var i = 0, l = this.objects.length; i < l; i ++ ) {
            var x = this.objects[ i ].object.clone();
            x.visible = i === 0;
            object.addLevel( x, this.objects[ i ].distance );
        }
    
        return object;
    
    };
    
    // File:src/objects/Sprite.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Sprite = ( function () {
    
        var indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );
        var vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );
        var uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );
    
        var geometry = new THREE.BufferGeometry();
        geometry.addAttribute( 'index', new THREE.BufferAttribute( indices, 1 ) );
        geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
        geometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
    
        return function ( material ) {
    
            THREE.Object3D.call( this );
    
            this.type = 'Sprite';
    
            this.geometry = geometry;
            this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();
    
        };
    
    } )();
    
    THREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.Sprite.prototype.raycast = ( function () {
    
        var matrixPosition = new THREE.Vector3();
    
        return function ( raycaster, intersects ) {
    
            matrixPosition.setFromMatrixPosition( this.matrixWorld );
    
            var distance = raycaster.ray.distanceToPoint( matrixPosition );
    
            if ( distance > this.scale.x ) {
    
                return;
    
            }
    
            intersects.push( {
    
                distance: distance,
                point: this.position,
                face: null,
                object: this
    
            } );
    
        };
    
    }() );
    
    THREE.Sprite.prototype.clone = function ( object ) {
    
        if ( object === undefined ) object = new THREE.Sprite( this.material );
    
        THREE.Object3D.prototype.clone.call( this, object );
    
        return object;
    
    };
    
    // Backwards compatibility
    
    THREE.Particle = THREE.Sprite;
    
    // File:src/objects/LensFlare.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.LensFlare = function ( texture, size, distance, blending, color ) {
    
        THREE.Object3D.call( this );
    
        this.lensFlares = [];
    
        this.positionScreen = new THREE.Vector3();
        this.customUpdateCallback = undefined;
    
        if( texture !== undefined ) {
    
            this.add( texture, size, distance, blending, color );
    
        }
    
    };
    
    THREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );
    
    
    /*
     * Add: adds another flare
     */
    
    THREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {
    
        if ( size === undefined ) size = - 1;
        if ( distance === undefined ) distance = 0;
        if ( opacity === undefined ) opacity = 1;
        if ( color === undefined ) color = new THREE.Color( 0xffffff );
        if ( blending === undefined ) blending = THREE.NormalBlending;
    
        distance = Math.min( distance, Math.max( 0, distance ) );
    
        this.lensFlares.push( {
            texture: texture, 			// THREE.Texture
            size: size, 				// size in pixels (-1 = use texture.width)
            distance: distance, 		// distance (0-1) from light source (0=at light source)
            x: 0, y: 0, z: 0,			// screen position (-1 => 1) z = 0 is ontop z = 1 is back
            scale: 1, 					// scale
            rotation: 1, 				// rotation
            opacity: opacity,			// opacity
            color: color,				// color
            blending: blending			// blending
        } );
    
    };
    
    /*
     * Update lens flares update positions on all flares based on the screen position
     * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
     */
    
    THREE.LensFlare.prototype.updateLensFlares = function () {
    
        var f, fl = this.lensFlares.length;
        var flare;
        var vecX = - this.positionScreen.x * 2;
        var vecY = - this.positionScreen.y * 2;
    
        for( f = 0; f < fl; f ++ ) {
    
            flare = this.lensFlares[ f ];
    
            flare.x = this.positionScreen.x + vecX * flare.distance;
            flare.y = this.positionScreen.y + vecY * flare.distance;
    
            flare.wantedRotation = flare.x * Math.PI * 0.25;
            flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;
    
        }
    
    };
    
    
    // File:src/scenes/Scene.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Scene = function () {
    
        THREE.Object3D.call( this );
    
        this.type = 'Scene';
    
        this.fog = null;
        this.overrideMaterial = null;
    
        this.autoUpdate = true; // checked by the renderer
    
    };
    
    THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.Scene.prototype.clone = function ( object ) {
    
        if ( object === undefined ) object = new THREE.Scene();
    
        THREE.Object3D.prototype.clone.call( this, object );
    
        if ( this.fog !== null ) object.fog = this.fog.clone();
        if ( this.overrideMaterial !== null ) object.overrideMaterial = this.overrideMaterial.clone();
    
        object.autoUpdate = this.autoUpdate;
        object.matrixAutoUpdate = this.matrixAutoUpdate;
    
        return object;
    
    };
    
    // File:src/scenes/Fog.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Fog = function ( color, near, far ) {
    
        this.name = '';
    
        this.color = new THREE.Color( color );
    
        this.near = ( near !== undefined ) ? near : 1;
        this.far = ( far !== undefined ) ? far : 1000;
    
    };
    
    THREE.Fog.prototype.clone = function () {
    
        return new THREE.Fog( this.color.getHex(), this.near, this.far );
    
    };
    
    // File:src/scenes/FogExp2.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.FogExp2 = function ( color, density ) {
    
        this.name = '';
    
        this.color = new THREE.Color( color );
        this.density = ( density !== undefined ) ? density : 0.00025;
    
    };
    
    THREE.FogExp2.prototype.clone = function () {
    
        return new THREE.FogExp2( this.color.getHex(), this.density );
    
    };
    
    // File:src/renderers/shaders/ShaderChunk.js
    
    THREE.ShaderChunk = {};
    
    // File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl
    
    THREE.ShaderChunk[ 'alphatest_fragment'] = "#ifdef ALPHATEST\n\n	if ( gl_FragColor.a < ALPHATEST ) discard;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl
    
    THREE.ShaderChunk[ 'lights_lambert_vertex'] = "vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n	vLightBack = vec3( 0.0 );\n\n#endif\n\ntransformedNormal = normalize( transformedNormal );\n\n#if MAX_DIR_LIGHTS > 0\n\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n	vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n	vec3 dirVector = normalize( lDirection.xyz );\n\n	float dotProduct = dot( transformedNormal, dirVector );\n	vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n	#ifdef DOUBLE_SIDED\n\n		vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n		#ifdef WRAP_AROUND\n\n			vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n		#endif\n\n	#endif\n\n	#ifdef WRAP_AROUND\n\n		vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n		directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n\n		#ifdef DOUBLE_SIDED\n\n			directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n\n		#endif\n\n	#endif\n\n	vLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n\n	#ifdef DOUBLE_SIDED\n\n		vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n\n	#endif\n\n}\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n		vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n		vec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n		float lDistance = 1.0;\n		if ( pointLightDistance[ i ] > 0.0 )\n			lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n		lVector = normalize( lVector );\n		float dotProduct = dot( transformedNormal, lVector );\n\n		vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n		#ifdef DOUBLE_SIDED\n\n			vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n			#ifdef WRAP_AROUND\n\n				vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n			#endif\n\n		#endif\n\n		#ifdef WRAP_AROUND\n\n			vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n			pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n\n			#ifdef DOUBLE_SIDED\n\n				pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n\n			#endif\n\n		#endif\n\n		vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n\n		#ifdef DOUBLE_SIDED\n\n			vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n\n		#endif\n\n	}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n		vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n		vec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n		float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\n\n		if ( spotEffect > spotLightAngleCos[ i ] ) {\n\n			spotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n			float lDistance = 1.0;\n			if ( spotLightDistance[ i ] > 0.0 )\n				lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n			lVector = normalize( lVector );\n\n			float dotProduct = dot( transformedNormal, lVector );\n			vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n			#ifdef DOUBLE_SIDED\n\n				vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n				#ifdef WRAP_AROUND\n\n					vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n				#endif\n\n			#endif\n\n			#ifdef WRAP_AROUND\n\n				vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n				spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n\n				#ifdef DOUBLE_SIDED\n\n					spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n\n				#endif\n\n			#endif\n\n			vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n\n			#ifdef DOUBLE_SIDED\n\n				vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n\n			#endif\n\n		}\n\n	}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n		vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n		vec3 lVector = normalize( lDirection.xyz );\n\n		float dotProduct = dot( transformedNormal, lVector );\n\n		float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n		float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\n\n		vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n		#ifdef DOUBLE_SIDED\n\n			vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n		#endif\n\n	}\n\n#endif\n\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n\n#ifdef DOUBLE_SIDED\n\n	vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'map_particle_pars_fragment'] = "#ifdef USE_MAP\n\n	uniform sampler2D map;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/default_vertex.glsl
    
    THREE.ShaderChunk[ 'default_vertex'] = "vec4 mvPosition;\n\n#ifdef USE_SKINNING\n\n	mvPosition = modelViewMatrix * skinned;\n\n#endif\n\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\n\n	mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#endif\n\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\n\n	mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;";
    
    // File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'map_pars_fragment'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n	varying vec2 vUv;\n\n#endif\n\n#ifdef USE_MAP\n\n	uniform sampler2D map;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl
    
    THREE.ShaderChunk[ 'skinnormal_vertex'] = "#ifdef USE_SKINNING\n\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n	#ifdef USE_MORPHNORMALS\n\n	vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n	#else\n\n	vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n	#endif\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'logdepthbuf_pars_vertex'] = "#ifdef USE_LOGDEPTHBUF\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		varying float vFragDepth;\n\n	#endif\n\n	uniform float logDepthBufFC;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/lightmap_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'lightmap_pars_vertex'] = "#ifdef USE_LIGHTMAP\n\n	varying vec2 vUv2;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl
    
    THREE.ShaderChunk[ 'lights_phong_fragment'] = "vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n\n#ifdef DOUBLE_SIDED\n\n	normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	vec3 pointDiffuse = vec3( 0.0 );\n	vec3 pointSpecular = vec3( 0.0 );\n\n	for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n		vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n		vec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n		float lDistance = 1.0;\n		if ( pointLightDistance[ i ] > 0.0 )\n			lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n		lVector = normalize( lVector );\n\n				// diffuse\n\n		float dotProduct = dot( normal, lVector );\n\n		#ifdef WRAP_AROUND\n\n			float pointDiffuseWeightFull = max( dotProduct, 0.0 );\n			float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n			vec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n		#else\n\n			float pointDiffuseWeight = max( dotProduct, 0.0 );\n\n		#endif\n\n		pointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\n\n				// specular\n\n		vec3 pointHalfVector = normalize( lVector + viewPosition );\n		float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n		float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n		float specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n		vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n		pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n\n	}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	vec3 spotDiffuse = vec3( 0.0 );\n	vec3 spotSpecular = vec3( 0.0 );\n\n	for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n		vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n		vec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n		float lDistance = 1.0;\n		if ( spotLightDistance[ i ] > 0.0 )\n			lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n		lVector = normalize( lVector );\n\n		float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\n		if ( spotEffect > spotLightAngleCos[ i ] ) {\n\n			spotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n					// diffuse\n\n			float dotProduct = dot( normal, lVector );\n\n			#ifdef WRAP_AROUND\n\n				float spotDiffuseWeightFull = max( dotProduct, 0.0 );\n				float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n				vec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\n			#else\n\n				float spotDiffuseWeight = max( dotProduct, 0.0 );\n\n			#endif\n\n			spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\n\n					// specular\n\n			vec3 spotHalfVector = normalize( lVector + viewPosition );\n			float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n			float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\n			float specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n			vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\n			spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n\n		}\n\n	}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n	vec3 dirDiffuse = vec3( 0.0 );\n	vec3 dirSpecular = vec3( 0.0 );\n\n	for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n		vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n		vec3 dirVector = normalize( lDirection.xyz );\n\n				// diffuse\n\n		float dotProduct = dot( normal, dirVector );\n\n		#ifdef WRAP_AROUND\n\n			float dirDiffuseWeightFull = max( dotProduct, 0.0 );\n			float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n			vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n		#else\n\n			float dirDiffuseWeight = max( dotProduct, 0.0 );\n\n		#endif\n\n		dirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\n		// specular\n\n		vec3 dirHalfVector = normalize( dirVector + viewPosition );\n		float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n		float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n		/*\n		// fresnel term from skin shader\n		const float F0 = 0.128;\n\n		float base = 1.0 - dot( viewPosition, dirHalfVector );\n		float exponential = pow( base, 5.0 );\n\n		float fresnel = exponential + F0 * ( 1.0 - exponential );\n		*/\n\n		/*\n		// fresnel term from fresnel shader\n		const float mFresnelBias = 0.08;\n		const float mFresnelScale = 0.3;\n		const float mFresnelPower = 5.0;\n\n		float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\n		*/\n\n		float specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n		// 		dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\n\n		vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n		dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\n\n	}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	vec3 hemiDiffuse = vec3( 0.0 );\n	vec3 hemiSpecular = vec3( 0.0 );\n\n	for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n		vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n		vec3 lVector = normalize( lDirection.xyz );\n\n		// diffuse\n\n		float dotProduct = dot( normal, lVector );\n		float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n		vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n		hemiDiffuse += diffuse * hemiColor;\n\n		// specular (sky light)\n\n		vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n		float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n		float hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\n		// specular (ground light)\n\n		vec3 lVectorGround = -lVector;\n\n		vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n		float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n		float hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\n		float dotProductGround = dot( normal, lVectorGround );\n\n		float specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n		vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n		vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n		hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\n	}\n\n#endif\n\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n\n#if MAX_DIR_LIGHTS > 0\n\n	totalDiffuse += dirDiffuse;\n	totalSpecular += dirSpecular;\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	totalDiffuse += hemiDiffuse;\n	totalSpecular += hemiSpecular;\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	totalDiffuse += pointDiffuse;\n	totalSpecular += pointSpecular;\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	totalDiffuse += spotDiffuse;\n	totalSpecular += spotSpecular;\n\n#endif\n\n#ifdef METAL\n\n	gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n\n#else\n\n	gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'fog_pars_fragment'] = "#ifdef USE_FOG\n\n	uniform vec3 fogColor;\n\n	#ifdef FOG_EXP2\n\n		uniform float fogDensity;\n\n	#else\n\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl
    
    THREE.ShaderChunk[ 'morphnormal_vertex'] = "#ifdef USE_MORPHNORMALS\n\n	vec3 morphedNormal = vec3( 0.0 );\n\n	morphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	morphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	morphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	morphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n	morphedNormal += normal;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'envmap_pars_fragment'] = "#ifdef USE_ENVMAP\n\n	uniform float reflectivity;\n	uniform samplerCube envMap;\n	uniform float flipEnvMap;\n	uniform int combine;\n\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n		uniform bool useRefract;\n		uniform float refractionRatio;\n\n	#else\n\n		varying vec3 vReflect;\n\n	#endif\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl
    
    THREE.ShaderChunk[ 'logdepthbuf_fragment'] = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'normalmap_pars_fragment'] = "#ifdef USE_NORMALMAP\n\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n\n			// Per-Pixel Tangent Space Normal Mapping\n			// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n\n	}\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'lights_phong_pars_vertex'] = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n	varying vec3 vWorldPosition;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'lightmap_pars_fragment'] = "#ifdef USE_LIGHTMAP\n\n	varying vec2 vUv2;\n	uniform sampler2D lightMap;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl
    
    THREE.ShaderChunk[ 'shadowmap_vertex'] = "#ifdef USE_SHADOWMAP\n\n	for( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n		vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n	}\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl
    
    THREE.ShaderChunk[ 'lights_phong_vertex'] = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n	vWorldPosition = worldPosition.xyz;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/map_fragment.glsl
    
    THREE.ShaderChunk[ 'map_fragment'] = "#ifdef USE_MAP\n\n	vec4 texelColor = texture2D( map, vUv );\n\n	#ifdef GAMMA_INPUT\n\n		texelColor.xyz *= texelColor.xyz;\n\n	#endif\n\n	gl_FragColor = gl_FragColor * texelColor;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/lightmap_vertex.glsl
    
    THREE.ShaderChunk[ 'lightmap_vertex'] = "#ifdef USE_LIGHTMAP\n\n	vUv2 = uv2;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl
    
    THREE.ShaderChunk[ 'map_particle_fragment'] = "#ifdef USE_MAP\n\n	gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'color_pars_fragment'] = "#ifdef USE_COLOR\n\n	varying vec3 vColor;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/color_vertex.glsl
    
    THREE.ShaderChunk[ 'color_vertex'] = "#ifdef USE_COLOR\n\n	#ifdef GAMMA_INPUT\n\n		vColor = color * color;\n\n	#else\n\n		vColor = color;\n\n	#endif\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl
    
    THREE.ShaderChunk[ 'skinning_vertex'] = "#ifdef USE_SKINNING\n\n	#ifdef USE_MORPHTARGETS\n\n	vec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n	#else\n\n	vec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n	#endif\n\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'envmap_pars_vertex'] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n	varying vec3 vReflect;\n\n	uniform float refractionRatio;\n	uniform bool useRefract;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl
    
    THREE.ShaderChunk[ 'linear_to_gamma_fragment'] = "#ifdef GAMMA_OUTPUT\n\n	gl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'color_pars_vertex'] = "#ifdef USE_COLOR\n\n	varying vec3 vColor;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/lights_lambert_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'lights_lambert_pars_vertex'] = "uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n	uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n	uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n	uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#ifdef WRAP_AROUND\n\n	uniform vec3 wrapRGB;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/map_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'map_pars_vertex'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl
    
    THREE.ShaderChunk[ 'envmap_fragment'] = "#ifdef USE_ENVMAP\n\n	vec3 reflectVec;\n\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n		// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\n		// Transforming Normal Vectors with the Inverse Transformation\n\n		vec3 worldNormal = normalize( vec3( vec4( normal, 0.0 ) * viewMatrix ) );\n\n		if ( useRefract ) {\n\n			reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n		} else { \n\n			reflectVec = reflect( cameraToVertex, worldNormal );\n\n		}\n\n	#else\n\n		reflectVec = vReflect;\n\n	#endif\n\n	#ifdef DOUBLE_SIDED\n\n		float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n		vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n	#else\n\n		vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n	#endif\n\n	#ifdef GAMMA_INPUT\n\n		cubeColor.xyz *= cubeColor.xyz;\n\n	#endif\n\n	if ( combine == 1 ) {\n\n		gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n\n	} else if ( combine == 2 ) {\n\n		gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n\n	} else {\n\n		gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n\n	}\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'specularmap_pars_fragment'] = "#ifdef USE_SPECULARMAP\n\n	uniform sampler2D specularMap;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl
    
    THREE.ShaderChunk[ 'logdepthbuf_vertex'] = "#ifdef USE_LOGDEPTHBUF\n\n	gl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		vFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n	#endif\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'morphtarget_pars_vertex'] = "#ifdef USE_MORPHTARGETS\n\n	#ifndef USE_MORPHNORMALS\n\n	uniform float morphTargetInfluences[ 8 ];\n\n	#else\n\n	uniform float morphTargetInfluences[ 4 ];\n\n	#endif\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl
    
    THREE.ShaderChunk[ 'specularmap_fragment'] = "float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n\n#else\n\n	specularStrength = 1.0;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl
    
    THREE.ShaderChunk[ 'fog_fragment'] = "#ifdef USE_FOG\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n	#else\n\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n\n	#endif\n\n	#ifdef FOG_EXP2\n\n		const float LOG2 = 1.442695;\n		float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\n		fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n\n	#else\n\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n\n	#endif\n	\n	gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'bumpmap_pars_fragment'] = "#ifdef USE_BUMPMAP\n\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n\n			// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n			//	http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n			// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n	vec2 dHdxy_fwd() {\n\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n		return vec2( dBx, dBy );\n\n	}\n\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;		// normalized\n\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n\n		float fDet = dot( vSigmaX, R1 );\n\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n\n	}\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl
    
    THREE.ShaderChunk[ 'defaultnormal_vertex'] = "vec3 objectNormal;\n\n#ifdef USE_SKINNING\n\n	objectNormal = skinnedNormal.xyz;\n\n#endif\n\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\n\n	objectNormal = morphedNormal;\n\n#endif\n\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\n\n	objectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n	objectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;";
    
    // File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'lights_phong_pars_fragment'] = "uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n	uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n	uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n	uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n	uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n	varying vec3 vWorldPosition;\n\n#endif\n\n#ifdef WRAP_AROUND\n\n	uniform vec3 wrapRGB;\n\n#endif\n\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;";
    
    // File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl
    
    THREE.ShaderChunk[ 'skinbase_vertex'] = "#ifdef USE_SKINNING\n\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/map_vertex.glsl
    
    THREE.ShaderChunk[ 'map_vertex'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl
    
    THREE.ShaderChunk[ 'lightmap_fragment'] = "#ifdef USE_LIGHTMAP\n\n	gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'shadowmap_pars_vertex'] = "#ifdef USE_SHADOWMAP\n\n	varying vec4 vShadowCoord[ MAX_SHADOWS ];\n	uniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/color_fragment.glsl
    
    THREE.ShaderChunk[ 'color_fragment'] = "#ifdef USE_COLOR\n\n	gl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl
    
    THREE.ShaderChunk[ 'morphtarget_vertex'] = "#ifdef USE_MORPHTARGETS\n\n	vec3 morphed = vec3( 0.0 );\n	morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n	#ifndef USE_MORPHNORMALS\n\n	morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n	#endif\n\n	morphed += position;\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl
    
    THREE.ShaderChunk[ 'envmap_vertex'] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n	vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\n	worldNormal = normalize( worldNormal );\n\n	vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n	if ( useRefract ) {\n\n		vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n	} else {\n\n		vReflect = reflect( cameraToVertex, worldNormal );\n\n	}\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/shadowmap_fragment.glsl
    
    THREE.ShaderChunk[ 'shadowmap_fragment'] = "#ifdef USE_SHADOWMAP\n\n	#ifdef SHADOWMAP_DEBUG\n\n		vec3 frustumColors[3];\n		frustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n		frustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n		frustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n	#endif\n\n	#ifdef SHADOWMAP_CASCADE\n\n		int inFrustumCount = 0;\n\n	#endif\n\n	float fDepth;\n	vec3 shadowColor = vec3( 1.0 );\n\n	for( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n		vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n				// if ( something && something ) breaks ATI OpenGL shader compiler\n				// if ( all( something, something ) ) using this instead\n\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n\n				// don't shadow pixels outside of light frustum\n				// use just first frustum (for cascades)\n				// don't shadow pixels behind far plane of light frustum\n\n		#ifdef SHADOWMAP_CASCADE\n\n			inFrustumCount += int( inFrustum );\n			bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n		#else\n\n			bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n		#endif\n\n		bool frustumTest = all( frustumTestVec );\n\n		if ( frustumTest ) {\n\n			shadowCoord.z += shadowBias[ i ];\n\n			#if defined( SHADOWMAP_TYPE_PCF )\n\n						// Percentage-close filtering\n						// (9 pixel kernel)\n						// http://fabiensanglard.net/shadowmappingPCF/\n\n				float shadow = 0.0;\n\n		/*\n						// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n						// must enroll loop manually\n\n				for ( float y = -1.25; y <= 1.25; y += 1.25 )\n					for ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n						vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n								// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n								//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n						float fDepth = unpackDepth( rgbaDepth );\n\n						if ( fDepth < shadowCoord.z )\n							shadow += 1.0;\n\n				}\n\n				shadow /= 9.0;\n\n		*/\n\n				const float shadowDelta = 1.0 / 9.0;\n\n				float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n				float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n				float dx0 = -1.25 * xPixelOffset;\n				float dy0 = -1.25 * yPixelOffset;\n				float dx1 = 1.25 * xPixelOffset;\n				float dy1 = 1.25 * yPixelOffset;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n			#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n						// Percentage-close filtering\n						// (9 pixel kernel)\n						// http://fabiensanglard.net/shadowmappingPCF/\n\n				float shadow = 0.0;\n\n				float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n				float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n				float dx0 = -1.0 * xPixelOffset;\n				float dy0 = -1.0 * yPixelOffset;\n				float dx1 = 1.0 * xPixelOffset;\n				float dy1 = 1.0 * yPixelOffset;\n\n				mat3 shadowKernel;\n				mat3 depthKernel;\n\n				depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n				depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n				depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n				depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n				depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n				depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n				depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n				depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n				depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n				vec3 shadowZ = vec3( shadowCoord.z );\n				shadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n				shadowKernel[0] *= vec3(0.25);\n\n				shadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n				shadowKernel[1] *= vec3(0.25);\n\n				shadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n				shadowKernel[2] *= vec3(0.25);\n\n				vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n				shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n				shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n				vec4 shadowValues;\n				shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n				shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n				shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n				shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n				shadow = dot( shadowValues, vec4( 1.0 ) );\n\n				shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n			#else\n\n				vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n				float fDepth = unpackDepth( rgbaDepth );\n\n				if ( fDepth < shadowCoord.z )\n\n		// spot with multiple shadows is darker\n\n					shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n		// spot with multiple shadows has the same color as single shadow spot\n\n		// 					shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n			#endif\n\n		}\n\n\n		#ifdef SHADOWMAP_DEBUG\n\n			#ifdef SHADOWMAP_CASCADE\n\n				if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n\n			#else\n\n				if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n\n			#endif\n\n		#endif\n\n	}\n\n	#ifdef GAMMA_OUTPUT\n\n		shadowColor *= shadowColor;\n\n	#endif\n\n	gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl
    
    THREE.ShaderChunk[ 'worldpos_vertex'] = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n	#ifdef USE_SKINNING\n\n		vec4 worldPosition = modelMatrix * skinned;\n\n	#endif\n\n	#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\n\n		vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n	#endif\n\n	#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\n\n		vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n	#endif\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'shadowmap_pars_fragment'] = "#ifdef USE_SHADOWMAP\n\n	uniform sampler2D shadowMap[ MAX_SHADOWS ];\n	uniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n	uniform float shadowDarkness[ MAX_SHADOWS ];\n	uniform float shadowBias[ MAX_SHADOWS ];\n\n	varying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n	float unpackDepth( const in vec4 rgba_depth ) {\n\n		const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n		float depth = dot( rgba_depth, bit_shift );\n		return depth;\n\n	}\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl
    
    THREE.ShaderChunk[ 'skinning_pars_vertex'] = "#ifdef USE_SKINNING\n\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n\n	#ifdef BONE_TEXTURE\n\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n\n		mat4 getBoneMatrix( const in float i ) {\n\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n\n			y = dy * ( y + 0.5 );\n\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n			mat4 bone = mat4( v1, v2, v3, v4 );\n\n			return bone;\n\n		}\n\n	#else\n\n		uniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n		mat4 getBoneMatrix( const in float i ) {\n\n			mat4 bone = boneGlobalMatrices[ int(i) ];\n			return bone;\n\n		}\n\n	#endif\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'logdepthbuf_pars_fragment'] = "#ifdef USE_LOGDEPTHBUF\n\n	uniform float logDepthBufFC;\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		#extension GL_EXT_frag_depth : enable\n		varying float vFragDepth;\n\n	#endif\n\n#endif";
    
    // File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl
    
    THREE.ShaderChunk[ 'alphamap_fragment'] = "#ifdef USE_ALPHAMAP\n\n	gl_FragColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";
    
    // File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl
    
    THREE.ShaderChunk[ 'alphamap_pars_fragment'] = "#ifdef USE_ALPHAMAP\n\n	uniform sampler2D alphaMap;\n\n#endif\n";
    
    // File:src/renderers/shaders/UniformsUtils.js
    
    /**
     * Uniform Utilities
     */
    
    THREE.UniformsUtils = {
    
        merge: function ( uniforms ) {
    
            var merged = {};
    
            for ( var u = 0; u < uniforms.length; u ++ ) {
    
                var tmp = this.clone( uniforms[ u ] );
    
                for ( var p in tmp ) {
    
                    merged[ p ] = tmp[ p ];
    
                }
    
            }
    
            return merged;
    
        },
    
        clone: function ( uniforms_src ) {
    
            var uniforms_dst = {};
    
            for ( var u in uniforms_src ) {
    
                uniforms_dst[ u ] = {};
    
                for ( var p in uniforms_src[ u ] ) {
    
                    var parameter_src = uniforms_src[ u ][ p ];
    
                    if ( parameter_src instanceof THREE.Color ||
                         parameter_src instanceof THREE.Vector2 ||
                         parameter_src instanceof THREE.Vector3 ||
                         parameter_src instanceof THREE.Vector4 ||
                         parameter_src instanceof THREE.Matrix4 ||
                         parameter_src instanceof THREE.Texture ) {
    
                        uniforms_dst[ u ][ p ] = parameter_src.clone();
    
                    } else if ( parameter_src instanceof Array ) {
    
                        uniforms_dst[ u ][ p ] = parameter_src.slice();
    
                    } else {
    
                        uniforms_dst[ u ][ p ] = parameter_src;
    
                    }
    
                }
    
            }
    
            return uniforms_dst;
    
        }
    
    };
    
    // File:src/renderers/shaders/UniformsLib.js
    
    /**
     * Uniforms library for shared webgl shaders
     */
    
    THREE.UniformsLib = {
    
        common: {
    
            "diffuse" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
            "opacity" : { type: "f", value: 1.0 },
    
            "map" : { type: "t", value: null },
            "offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },
    
            "lightMap" : { type: "t", value: null },
            "specularMap" : { type: "t", value: null },
            "alphaMap" : { type: "t", value: null },
    
            "envMap" : { type: "t", value: null },
            "flipEnvMap" : { type: "f", value: - 1 },
            "useRefract" : { type: "i", value: 0 },
            "reflectivity" : { type: "f", value: 1.0 },
            "refractionRatio" : { type: "f", value: 0.98 },
            "combine" : { type: "i", value: 0 },
    
            "morphTargetInfluences" : { type: "f", value: 0 }
    
        },
    
        bump: {
    
            "bumpMap" : { type: "t", value: null },
            "bumpScale" : { type: "f", value: 1 }
    
        },
    
        normalmap: {
    
            "normalMap" : { type: "t", value: null },
            "normalScale" : { type: "v2", value: new THREE.Vector2( 1, 1 ) }
        },
    
        fog : {
    
            "fogDensity" : { type: "f", value: 0.00025 },
            "fogNear" : { type: "f", value: 1 },
            "fogFar" : { type: "f", value: 2000 },
            "fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }
    
        },
    
        lights: {
    
            "ambientLightColor" : { type: "fv", value: [] },
    
            "directionalLightDirection" : { type: "fv", value: [] },
            "directionalLightColor" : { type: "fv", value: [] },
    
            "hemisphereLightDirection" : { type: "fv", value: [] },
            "hemisphereLightSkyColor" : { type: "fv", value: [] },
            "hemisphereLightGroundColor" : { type: "fv", value: [] },
    
            "pointLightColor" : { type: "fv", value: [] },
            "pointLightPosition" : { type: "fv", value: [] },
            "pointLightDistance" : { type: "fv1", value: [] },
    
            "spotLightColor" : { type: "fv", value: [] },
            "spotLightPosition" : { type: "fv", value: [] },
            "spotLightDirection" : { type: "fv", value: [] },
            "spotLightDistance" : { type: "fv1", value: [] },
            "spotLightAngleCos" : { type: "fv1", value: [] },
            "spotLightExponent" : { type: "fv1", value: [] }
    
        },
    
        particle: {
    
            "psColor" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
            "opacity" : { type: "f", value: 1.0 },
            "size" : { type: "f", value: 1.0 },
            "scale" : { type: "f", value: 1.0 },
            "map" : { type: "t", value: null },
    
            "fogDensity" : { type: "f", value: 0.00025 },
            "fogNear" : { type: "f", value: 1 },
            "fogFar" : { type: "f", value: 2000 },
            "fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }
    
        },
    
        shadowmap: {
    
            "shadowMap": { type: "tv", value: [] },
            "shadowMapSize": { type: "v2v", value: [] },
    
            "shadowBias" : { type: "fv1", value: [] },
            "shadowDarkness": { type: "fv1", value: [] },
    
            "shadowMatrix" : { type: "m4v", value: [] }
    
        }
    
    };
    
    // File:src/renderers/shaders/ShaderLib.js
    
    /**
     * Webgl Shader Library for three.js
     *
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     * @author mikael emtinger / http://gomo.se/
     */
    
    
    THREE.ShaderLib = {
    
        'basic': {
    
            uniforms: THREE.UniformsUtils.merge( [
    
                THREE.UniformsLib[ "common" ],
                THREE.UniformsLib[ "fog" ],
                THREE.UniformsLib[ "shadowmap" ]
    
            ] ),
    
            vertexShader: [
    
                THREE.ShaderChunk[ "map_pars_vertex" ],
                THREE.ShaderChunk[ "lightmap_pars_vertex" ],
                THREE.ShaderChunk[ "envmap_pars_vertex" ],
                THREE.ShaderChunk[ "color_pars_vertex" ],
                THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
                THREE.ShaderChunk[ "skinning_pars_vertex" ],
                THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "map_vertex" ],
                    THREE.ShaderChunk[ "lightmap_vertex" ],
                    THREE.ShaderChunk[ "color_vertex" ],
                    THREE.ShaderChunk[ "skinbase_vertex" ],
    
                "	#ifdef USE_ENVMAP",
    
                    THREE.ShaderChunk[ "morphnormal_vertex" ],
                    THREE.ShaderChunk[ "skinnormal_vertex" ],
                    THREE.ShaderChunk[ "defaultnormal_vertex" ],
    
                "	#endif",
    
                    THREE.ShaderChunk[ "morphtarget_vertex" ],
                    THREE.ShaderChunk[ "skinning_vertex" ],
                    THREE.ShaderChunk[ "default_vertex" ],
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                    THREE.ShaderChunk[ "worldpos_vertex" ],
                    THREE.ShaderChunk[ "envmap_vertex" ],
                    THREE.ShaderChunk[ "shadowmap_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                "uniform vec3 diffuse;",
                "uniform float opacity;",
    
                THREE.ShaderChunk[ "color_pars_fragment" ],
                THREE.ShaderChunk[ "map_pars_fragment" ],
                THREE.ShaderChunk[ "alphamap_pars_fragment" ],
                THREE.ShaderChunk[ "lightmap_pars_fragment" ],
                THREE.ShaderChunk[ "envmap_pars_fragment" ],
                THREE.ShaderChunk[ "fog_pars_fragment" ],
                THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
                THREE.ShaderChunk[ "specularmap_pars_fragment" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
    
                "	gl_FragColor = vec4( diffuse, opacity );",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
                    THREE.ShaderChunk[ "map_fragment" ],
                    THREE.ShaderChunk[ "alphamap_fragment" ],
                    THREE.ShaderChunk[ "alphatest_fragment" ],
                    THREE.ShaderChunk[ "specularmap_fragment" ],
                    THREE.ShaderChunk[ "lightmap_fragment" ],
                    THREE.ShaderChunk[ "color_fragment" ],
                    THREE.ShaderChunk[ "envmap_fragment" ],
                    THREE.ShaderChunk[ "shadowmap_fragment" ],
    
                    THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
    
                    THREE.ShaderChunk[ "fog_fragment" ],
    
                "}"
    
            ].join("\n")
    
        },
    
        'lambert': {
    
            uniforms: THREE.UniformsUtils.merge( [
    
                THREE.UniformsLib[ "common" ],
                THREE.UniformsLib[ "fog" ],
                THREE.UniformsLib[ "lights" ],
                THREE.UniformsLib[ "shadowmap" ],
    
                {
                    "ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
                    "emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
                    "wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
                }
    
            ] ),
    
            vertexShader: [
    
                "#define LAMBERT",
    
                "varying vec3 vLightFront;",
    
                "#ifdef DOUBLE_SIDED",
    
                "	varying vec3 vLightBack;",
    
                "#endif",
    
                THREE.ShaderChunk[ "map_pars_vertex" ],
                THREE.ShaderChunk[ "lightmap_pars_vertex" ],
                THREE.ShaderChunk[ "envmap_pars_vertex" ],
                THREE.ShaderChunk[ "lights_lambert_pars_vertex" ],
                THREE.ShaderChunk[ "color_pars_vertex" ],
                THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
                THREE.ShaderChunk[ "skinning_pars_vertex" ],
                THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "map_vertex" ],
                    THREE.ShaderChunk[ "lightmap_vertex" ],
                    THREE.ShaderChunk[ "color_vertex" ],
    
                    THREE.ShaderChunk[ "morphnormal_vertex" ],
                    THREE.ShaderChunk[ "skinbase_vertex" ],
                    THREE.ShaderChunk[ "skinnormal_vertex" ],
                    THREE.ShaderChunk[ "defaultnormal_vertex" ],
    
                    THREE.ShaderChunk[ "morphtarget_vertex" ],
                    THREE.ShaderChunk[ "skinning_vertex" ],
                    THREE.ShaderChunk[ "default_vertex" ],
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                    THREE.ShaderChunk[ "worldpos_vertex" ],
                    THREE.ShaderChunk[ "envmap_vertex" ],
                    THREE.ShaderChunk[ "lights_lambert_vertex" ],
                    THREE.ShaderChunk[ "shadowmap_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                "uniform float opacity;",
    
                "varying vec3 vLightFront;",
    
                "#ifdef DOUBLE_SIDED",
    
                "	varying vec3 vLightBack;",
    
                "#endif",
    
                THREE.ShaderChunk[ "color_pars_fragment" ],
                THREE.ShaderChunk[ "map_pars_fragment" ],
                THREE.ShaderChunk[ "alphamap_pars_fragment" ],
                THREE.ShaderChunk[ "lightmap_pars_fragment" ],
                THREE.ShaderChunk[ "envmap_pars_fragment" ],
                THREE.ShaderChunk[ "fog_pars_fragment" ],
                THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
                THREE.ShaderChunk[ "specularmap_pars_fragment" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
    
                "	gl_FragColor = vec4( vec3( 1.0 ), opacity );",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
                    THREE.ShaderChunk[ "map_fragment" ],
                    THREE.ShaderChunk[ "alphamap_fragment" ],
                    THREE.ShaderChunk[ "alphatest_fragment" ],
                    THREE.ShaderChunk[ "specularmap_fragment" ],
    
                "	#ifdef DOUBLE_SIDED",
    
                        //"float isFront = float( gl_FrontFacing );",
                        //"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;",
    
                "		if ( gl_FrontFacing )",
                "			gl_FragColor.xyz *= vLightFront;",
                "		else",
                "			gl_FragColor.xyz *= vLightBack;",
    
                "	#else",
    
                "		gl_FragColor.xyz *= vLightFront;",
    
                "	#endif",
    
                    THREE.ShaderChunk[ "lightmap_fragment" ],
                    THREE.ShaderChunk[ "color_fragment" ],
                    THREE.ShaderChunk[ "envmap_fragment" ],
                    THREE.ShaderChunk[ "shadowmap_fragment" ],
    
                    THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
    
                    THREE.ShaderChunk[ "fog_fragment" ],
    
                "}"
    
            ].join("\n")
    
        },
    
        'phong': {
    
            uniforms: THREE.UniformsUtils.merge( [
    
                THREE.UniformsLib[ "common" ],
                THREE.UniformsLib[ "bump" ],
                THREE.UniformsLib[ "normalmap" ],
                THREE.UniformsLib[ "fog" ],
                THREE.UniformsLib[ "lights" ],
                THREE.UniformsLib[ "shadowmap" ],
    
                {
                    "ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
                    "emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
                    "specular" : { type: "c", value: new THREE.Color( 0x111111 ) },
                    "shininess": { type: "f", value: 30 },
                    "wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
                }
    
            ] ),
    
            vertexShader: [
    
                "#define PHONG",
    
                "varying vec3 vViewPosition;",
                "varying vec3 vNormal;",
    
                THREE.ShaderChunk[ "map_pars_vertex" ],
                THREE.ShaderChunk[ "lightmap_pars_vertex" ],
                THREE.ShaderChunk[ "envmap_pars_vertex" ],
                THREE.ShaderChunk[ "lights_phong_pars_vertex" ],
                THREE.ShaderChunk[ "color_pars_vertex" ],
                THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
                THREE.ShaderChunk[ "skinning_pars_vertex" ],
                THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "map_vertex" ],
                    THREE.ShaderChunk[ "lightmap_vertex" ],
                    THREE.ShaderChunk[ "color_vertex" ],
    
                    THREE.ShaderChunk[ "morphnormal_vertex" ],
                    THREE.ShaderChunk[ "skinbase_vertex" ],
                    THREE.ShaderChunk[ "skinnormal_vertex" ],
                    THREE.ShaderChunk[ "defaultnormal_vertex" ],
    
                "	vNormal = normalize( transformedNormal );",
    
                    THREE.ShaderChunk[ "morphtarget_vertex" ],
                    THREE.ShaderChunk[ "skinning_vertex" ],
                    THREE.ShaderChunk[ "default_vertex" ],
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                "	vViewPosition = -mvPosition.xyz;",
    
                    THREE.ShaderChunk[ "worldpos_vertex" ],
                    THREE.ShaderChunk[ "envmap_vertex" ],
                    THREE.ShaderChunk[ "lights_phong_vertex" ],
                    THREE.ShaderChunk[ "shadowmap_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                "#define PHONG",
    
                "uniform vec3 diffuse;",
                "uniform float opacity;",
    
                "uniform vec3 ambient;",
                "uniform vec3 emissive;",
                "uniform vec3 specular;",
                "uniform float shininess;",
    
                THREE.ShaderChunk[ "color_pars_fragment" ],
                THREE.ShaderChunk[ "map_pars_fragment" ],
                THREE.ShaderChunk[ "alphamap_pars_fragment" ],
                THREE.ShaderChunk[ "lightmap_pars_fragment" ],
                THREE.ShaderChunk[ "envmap_pars_fragment" ],
                THREE.ShaderChunk[ "fog_pars_fragment" ],
                THREE.ShaderChunk[ "lights_phong_pars_fragment" ],
                THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
                THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
                THREE.ShaderChunk[ "normalmap_pars_fragment" ],
                THREE.ShaderChunk[ "specularmap_pars_fragment" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
    
                "	gl_FragColor = vec4( vec3( 1.0 ), opacity );",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
                    THREE.ShaderChunk[ "map_fragment" ],
                    THREE.ShaderChunk[ "alphamap_fragment" ],
                    THREE.ShaderChunk[ "alphatest_fragment" ],
                    THREE.ShaderChunk[ "specularmap_fragment" ],
    
                    THREE.ShaderChunk[ "lights_phong_fragment" ],
    
                    THREE.ShaderChunk[ "lightmap_fragment" ],
                    THREE.ShaderChunk[ "color_fragment" ],
                    THREE.ShaderChunk[ "envmap_fragment" ],
                    THREE.ShaderChunk[ "shadowmap_fragment" ],
    
                    THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
    
                    THREE.ShaderChunk[ "fog_fragment" ],
    
                "}"
    
            ].join("\n")
    
        },
    
        'particle_basic': {
    
            uniforms: THREE.UniformsUtils.merge( [
    
                THREE.UniformsLib[ "particle" ],
                THREE.UniformsLib[ "shadowmap" ]
    
            ] ),
    
            vertexShader: [
    
                "uniform float size;",
                "uniform float scale;",
    
                THREE.ShaderChunk[ "color_pars_vertex" ],
                THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "color_vertex" ],
    
                "	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
    
                "	#ifdef USE_SIZEATTENUATION",
                "		gl_PointSize = size * ( scale / length( mvPosition.xyz ) );",
                "	#else",
                "		gl_PointSize = size;",
                "	#endif",
    
                "	gl_Position = projectionMatrix * mvPosition;",
    
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
                    THREE.ShaderChunk[ "worldpos_vertex" ],
                    THREE.ShaderChunk[ "shadowmap_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                "uniform vec3 psColor;",
                "uniform float opacity;",
    
                THREE.ShaderChunk[ "color_pars_fragment" ],
                THREE.ShaderChunk[ "map_particle_pars_fragment" ],
                THREE.ShaderChunk[ "fog_pars_fragment" ],
                THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
    
                "	gl_FragColor = vec4( psColor, opacity );",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
                    THREE.ShaderChunk[ "map_particle_fragment" ],
                    THREE.ShaderChunk[ "alphatest_fragment" ],
                    THREE.ShaderChunk[ "color_fragment" ],
                    THREE.ShaderChunk[ "shadowmap_fragment" ],
                    THREE.ShaderChunk[ "fog_fragment" ],
    
                "}"
    
            ].join("\n")
    
        },
    
        'dashed': {
    
            uniforms: THREE.UniformsUtils.merge( [
    
                THREE.UniformsLib[ "common" ],
                THREE.UniformsLib[ "fog" ],
    
                {
                    "scale"    : { type: "f", value: 1 },
                    "dashSize" : { type: "f", value: 1 },
                    "totalSize": { type: "f", value: 2 }
                }
    
            ] ),
    
            vertexShader: [
    
                "uniform float scale;",
                "attribute float lineDistance;",
    
                "varying float vLineDistance;",
    
                THREE.ShaderChunk[ "color_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "color_vertex" ],
    
                "	vLineDistance = scale * lineDistance;",
    
                "	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
                "	gl_Position = projectionMatrix * mvPosition;",
    
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                "uniform vec3 diffuse;",
                "uniform float opacity;",
    
                "uniform float dashSize;",
                "uniform float totalSize;",
    
                "varying float vLineDistance;",
    
                THREE.ShaderChunk[ "color_pars_fragment" ],
                THREE.ShaderChunk[ "fog_pars_fragment" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
    
                "	if ( mod( vLineDistance, totalSize ) > dashSize ) {",
    
                "		discard;",
    
                "	}",
    
                "	gl_FragColor = vec4( diffuse, opacity );",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
                    THREE.ShaderChunk[ "color_fragment" ],
                    THREE.ShaderChunk[ "fog_fragment" ],
    
                "}"
    
            ].join("\n")
    
        },
    
        'depth': {
    
            uniforms: {
    
                "mNear": { type: "f", value: 1.0 },
                "mFar" : { type: "f", value: 2000.0 },
                "opacity" : { type: "f", value: 1.0 }
    
            },
    
            vertexShader: [
    
                THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "morphtarget_vertex" ],
                    THREE.ShaderChunk[ "default_vertex" ],
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                "uniform float mNear;",
                "uniform float mFar;",
                "uniform float opacity;",
    
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
    
                "	#ifdef USE_LOGDEPTHBUF_EXT",
    
                "		float depth = gl_FragDepthEXT / gl_FragCoord.w;",
    
                "	#else",
    
                "		float depth = gl_FragCoord.z / gl_FragCoord.w;",
    
                "	#endif",
    
                "	float color = 1.0 - smoothstep( mNear, mFar, depth );",
                "	gl_FragColor = vec4( vec3( color ), opacity );",
    
                "}"
    
            ].join("\n")
    
        },
    
        'normal': {
    
            uniforms: {
    
                "opacity" : { type: "f", value: 1.0 }
    
            },
    
            vertexShader: [
    
                "varying vec3 vNormal;",
    
                THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                "	vNormal = normalize( normalMatrix * normal );",
    
                    THREE.ShaderChunk[ "morphtarget_vertex" ],
                    THREE.ShaderChunk[ "default_vertex" ],
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                "uniform float opacity;",
                "varying vec3 vNormal;",
    
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
    
                "	gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
    
                "}"
    
            ].join("\n")
    
        },
    
        /* -------------------------------------------------------------------------
        //	Normal map shader
        //		- Blinn-Phong
        //		- normal + diffuse + specular + AO + displacement + reflection + shadow maps
        //		- point and directional lights (use with "lights: true" material option)
         ------------------------------------------------------------------------- */
    
        'normalmap' : {
    
            uniforms: THREE.UniformsUtils.merge( [
    
                THREE.UniformsLib[ "fog" ],
                THREE.UniformsLib[ "lights" ],
                THREE.UniformsLib[ "shadowmap" ],
    
                {
    
                "enableAO"          : { type: "i", value: 0 },
                "enableDiffuse"     : { type: "i", value: 0 },
                "enableSpecular"    : { type: "i", value: 0 },
                "enableReflection"  : { type: "i", value: 0 },
                "enableDisplacement": { type: "i", value: 0 },
    
                "tDisplacement": { type: "t", value: null }, // must go first as this is vertex texture
                "tDiffuse"     : { type: "t", value: null },
                "tCube"        : { type: "t", value: null },
                "tNormal"      : { type: "t", value: null },
                "tSpecular"    : { type: "t", value: null },
                "tAO"          : { type: "t", value: null },
    
                "uNormalScale": { type: "v2", value: new THREE.Vector2( 1, 1 ) },
    
                "uDisplacementBias": { type: "f", value: 0.0 },
                "uDisplacementScale": { type: "f", value: 1.0 },
    
                "diffuse": { type: "c", value: new THREE.Color( 0xffffff ) },
                "specular": { type: "c", value: new THREE.Color( 0x111111 ) },
                "ambient": { type: "c", value: new THREE.Color( 0xffffff ) },
                "shininess": { type: "f", value: 30 },
                "opacity": { type: "f", value: 1 },
    
                "useRefract": { type: "i", value: 0 },
                "refractionRatio": { type: "f", value: 0.98 },
                "reflectivity": { type: "f", value: 0.5 },
    
                "uOffset" : { type: "v2", value: new THREE.Vector2( 0, 0 ) },
                "uRepeat" : { type: "v2", value: new THREE.Vector2( 1, 1 ) },
    
                "wrapRGB" : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
    
                }
    
            ] ),
    
            fragmentShader: [
    
                "uniform vec3 ambient;",
                "uniform vec3 diffuse;",
                "uniform vec3 specular;",
                "uniform float shininess;",
                "uniform float opacity;",
    
                "uniform bool enableDiffuse;",
                "uniform bool enableSpecular;",
                "uniform bool enableAO;",
                "uniform bool enableReflection;",
    
                "uniform sampler2D tDiffuse;",
                "uniform sampler2D tNormal;",
                "uniform sampler2D tSpecular;",
                "uniform sampler2D tAO;",
    
                "uniform samplerCube tCube;",
    
                "uniform vec2 uNormalScale;",
    
                "uniform bool useRefract;",
                "uniform float refractionRatio;",
                "uniform float reflectivity;",
    
                "varying vec3 vTangent;",
                "varying vec3 vBinormal;",
                "varying vec3 vNormal;",
                "varying vec2 vUv;",
    
                "uniform vec3 ambientLightColor;",
    
                "#if MAX_DIR_LIGHTS > 0",
    
                "	uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
                "	uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",
    
                "#endif",
    
                "#if MAX_HEMI_LIGHTS > 0",
    
                "	uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
                "	uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
                "	uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",
    
                "#endif",
    
                "#if MAX_POINT_LIGHTS > 0",
    
                "	uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
                "	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
                "	uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",
    
                "#endif",
    
                "#if MAX_SPOT_LIGHTS > 0",
    
                "	uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
                "	uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
                "	uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
                "	uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
                "	uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",
                "	uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",
    
                "#endif",
    
                "#ifdef WRAP_AROUND",
    
                "	uniform vec3 wrapRGB;",
    
                "#endif",
    
                "varying vec3 vWorldPosition;",
                "varying vec3 vViewPosition;",
    
                THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
                THREE.ShaderChunk[ "fog_pars_fragment" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
    
                "	gl_FragColor = vec4( vec3( 1.0 ), opacity );",
    
                "	vec3 specularTex = vec3( 1.0 );",
    
                "	vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;",
                "	normalTex.xy *= uNormalScale;",
                "	normalTex = normalize( normalTex );",
    
                "	if( enableDiffuse ) {",
    
                "		#ifdef GAMMA_INPUT",
    
                "			vec4 texelColor = texture2D( tDiffuse, vUv );",
                "			texelColor.xyz *= texelColor.xyz;",
    
                "			gl_FragColor = gl_FragColor * texelColor;",
    
                "		#else",
    
                "			gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );",
    
                "		#endif",
    
                "	}",
    
                "	if( enableAO ) {",
    
                "		#ifdef GAMMA_INPUT",
    
                "			vec4 aoColor = texture2D( tAO, vUv );",
                "			aoColor.xyz *= aoColor.xyz;",
    
                "			gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;",
    
                "		#else",
    
                "			gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;",
    
                "		#endif",
    
                "	}",
                
                THREE.ShaderChunk[ "alphatest_fragment" ],
    
                "	if( enableSpecular )",
                "		specularTex = texture2D( tSpecular, vUv ).xyz;",
    
                "	mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );",
                "	vec3 finalNormal = tsb * normalTex;",
    
                "	#ifdef FLIP_SIDED",
    
                "		finalNormal = -finalNormal;",
    
                "	#endif",
    
                "	vec3 normal = normalize( finalNormal );",
                "	vec3 viewPosition = normalize( vViewPosition );",
    
                    // point lights
    
                "	#if MAX_POINT_LIGHTS > 0",
    
                "		vec3 pointDiffuse = vec3( 0.0 );",
                "		vec3 pointSpecular = vec3( 0.0 );",
    
                "		for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",
    
                "			vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
                "			vec3 pointVector = lPosition.xyz + vViewPosition.xyz;",
    
                "			float pointDistance = 1.0;",
                "			if ( pointLightDistance[ i ] > 0.0 )",
                "				pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );",
    
                "			pointVector = normalize( pointVector );",
    
                            // diffuse
    
                "			#ifdef WRAP_AROUND",
    
                "				float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );",
                "				float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );",
    
                "				vec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );",
    
                "			#else",
    
                "				float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );",
    
                "			#endif",
    
                "			pointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;",
    
                            // specular
    
                "			vec3 pointHalfVector = normalize( pointVector + viewPosition );",
                "			float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
                "			float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );",
    
                "			float specularNormalization = ( shininess + 2.0 ) / 8.0;",
    
                "			vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( pointVector, pointHalfVector ), 0.0 ), 5.0 );",
                "			pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;",
    
                "		}",
    
                "	#endif",
    
                    // spot lights
    
                "	#if MAX_SPOT_LIGHTS > 0",
    
                "		vec3 spotDiffuse = vec3( 0.0 );",
                "		vec3 spotSpecular = vec3( 0.0 );",
    
                "		for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",
    
                "			vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
                "			vec3 spotVector = lPosition.xyz + vViewPosition.xyz;",
    
                "			float spotDistance = 1.0;",
                "			if ( spotLightDistance[ i ] > 0.0 )",
                "				spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );",
    
                "			spotVector = normalize( spotVector );",
    
                "			float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",
    
                "			if ( spotEffect > spotLightAngleCos[ i ] ) {",
    
                "				spotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );",
    
                                // diffuse
    
                "				#ifdef WRAP_AROUND",
    
                "					float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );",
                "					float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );",
    
                "					vec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );",
    
                "				#else",
    
                "					float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );",
    
                "				#endif",
    
                "				spotDiffuse += spotDistance * spotLightColor[ i ] * diffuse * spotDiffuseWeight * spotEffect;",
    
                                // specular
    
                "				vec3 spotHalfVector = normalize( spotVector + viewPosition );",
                "				float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
                "				float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, shininess ), 0.0 );",
    
                "				float specularNormalization = ( shininess + 2.0 ) / 8.0;",
    
                "				vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( spotVector, spotHalfVector ), 0.0 ), 5.0 );",
                "				spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;",
    
                "			}",
    
                "		}",
    
                "	#endif",
    
                    // directional lights
    
                "	#if MAX_DIR_LIGHTS > 0",
    
                "		vec3 dirDiffuse = vec3( 0.0 );",
                "		vec3 dirSpecular = vec3( 0.0 );",
    
                "		for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {",
    
                "			vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
                "			vec3 dirVector = normalize( lDirection.xyz );",
    
                            // diffuse
    
                "			#ifdef WRAP_AROUND",
    
                "				float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );",
                "				float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );",
    
                "				vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );",
    
                "			#else",
    
                "				float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );",
    
                "			#endif",
    
                "			dirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;",
    
                            // specular
    
                "			vec3 dirHalfVector = normalize( dirVector + viewPosition );",
                "			float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
                "			float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );",
    
                "			float specularNormalization = ( shininess + 2.0 ) / 8.0;",
    
                "			vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );",
                "			dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;",
    
                "		}",
    
                "	#endif",
    
                    // hemisphere lights
    
                "	#if MAX_HEMI_LIGHTS > 0",
    
                "		vec3 hemiDiffuse = vec3( 0.0 );",
                "		vec3 hemiSpecular = vec3( 0.0 );" ,
    
                "		for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",
    
                "			vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
                "			vec3 lVector = normalize( lDirection.xyz );",
    
                            // diffuse
    
                "			float dotProduct = dot( normal, lVector );",
                "			float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",
    
                "			vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",
    
                "			hemiDiffuse += diffuse * hemiColor;",
    
                            // specular (sky light)
    
    
                "			vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );",
                "			float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;",
                "			float hemiSpecularWeightSky = specularTex.r * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );",
    
                            // specular (ground light)
    
                "			vec3 lVectorGround = -lVector;",
    
                "			vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );",
                "			float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;",
                "			float hemiSpecularWeightGround = specularTex.r * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );",
    
                "			float dotProductGround = dot( normal, lVectorGround );",
    
                "			float specularNormalization = ( shininess + 2.0 ) / 8.0;",
    
                "			vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );",
                "			vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );",
                "			hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );",
    
                "		}",
    
                "	#endif",
    
                    // all lights contribution summation
    
                "	vec3 totalDiffuse = vec3( 0.0 );",
                "	vec3 totalSpecular = vec3( 0.0 );",
    
                "	#if MAX_DIR_LIGHTS > 0",
    
                "		totalDiffuse += dirDiffuse;",
                "		totalSpecular += dirSpecular;",
    
                "	#endif",
    
                "	#if MAX_HEMI_LIGHTS > 0",
    
                "		totalDiffuse += hemiDiffuse;",
                "		totalSpecular += hemiSpecular;",
    
                "	#endif",
    
                "	#if MAX_POINT_LIGHTS > 0",
    
                "		totalDiffuse += pointDiffuse;",
                "		totalSpecular += pointSpecular;",
    
                "	#endif",
    
                "	#if MAX_SPOT_LIGHTS > 0",
    
                "		totalDiffuse += spotDiffuse;",
                "		totalSpecular += spotSpecular;",
    
                "	#endif",
    
                "	#ifdef METAL",
    
                "		gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );",
    
                "	#else",
    
                "		gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;",
    
                "	#endif",
    
                "	if ( enableReflection ) {",
    
                "		vec3 vReflect;",
                "		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );",
    
                "		if ( useRefract ) {",
    
                "			vReflect = refract( cameraToVertex, normal, refractionRatio );",
    
                "		} else {",
    
                "			vReflect = reflect( cameraToVertex, normal );",
    
                "		}",
    
                "		vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );",
    
                "		#ifdef GAMMA_INPUT",
    
                "			cubeColor.xyz *= cubeColor.xyz;",
    
                "		#endif",
    
                "		gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * reflectivity );",
    
                "	}",
    
                    THREE.ShaderChunk[ "shadowmap_fragment" ],
                    THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
                    THREE.ShaderChunk[ "fog_fragment" ],
    
                "}"
    
            ].join("\n"),
    
            vertexShader: [
    
                "attribute vec4 tangent;",
    
                "uniform vec2 uOffset;",
                "uniform vec2 uRepeat;",
    
                "uniform bool enableDisplacement;",
    
                "#ifdef VERTEX_TEXTURES",
    
                "	uniform sampler2D tDisplacement;",
                "	uniform float uDisplacementScale;",
                "	uniform float uDisplacementBias;",
    
                "#endif",
    
                "varying vec3 vTangent;",
                "varying vec3 vBinormal;",
                "varying vec3 vNormal;",
                "varying vec2 vUv;",
    
                "varying vec3 vWorldPosition;",
                "varying vec3 vViewPosition;",
    
                THREE.ShaderChunk[ "skinning_pars_vertex" ],
                THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "skinbase_vertex" ],
                    THREE.ShaderChunk[ "skinnormal_vertex" ],
    
                    // normal, tangent and binormal vectors
    
                "	#ifdef USE_SKINNING",
    
                "		vNormal = normalize( normalMatrix * skinnedNormal.xyz );",
    
                "		vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );",
                "		vTangent = normalize( normalMatrix * skinnedTangent.xyz );",
    
                "	#else",
    
                "		vNormal = normalize( normalMatrix * normal );",
                "		vTangent = normalize( normalMatrix * tangent.xyz );",
    
                "	#endif",
    
                "	vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",
    
                "	vUv = uv * uRepeat + uOffset;",
    
                    // displacement mapping
    
                "	vec3 displacedPosition;",
    
                "	#ifdef VERTEX_TEXTURES",
    
                "		if ( enableDisplacement ) {",
    
                "			vec3 dv = texture2D( tDisplacement, uv ).xyz;",
                "			float df = uDisplacementScale * dv.x + uDisplacementBias;",
                "			displacedPosition = position + normalize( normal ) * df;",
    
                "		} else {",
    
                "			#ifdef USE_SKINNING",
    
                "				vec4 skinVertex = bindMatrix * vec4( position, 1.0 );",
    
                "				vec4 skinned = vec4( 0.0 );",
                "				skinned += boneMatX * skinVertex * skinWeight.x;",
                "				skinned += boneMatY * skinVertex * skinWeight.y;",
                "				skinned += boneMatZ * skinVertex * skinWeight.z;",
                "				skinned += boneMatW * skinVertex * skinWeight.w;",
                "				skinned  = bindMatrixInverse * skinned;",
    
                "				displacedPosition = skinned.xyz;",
    
                "			#else",
    
                "				displacedPosition = position;",
    
                "			#endif",
    
                "		}",
    
                "	#else",
    
                "		#ifdef USE_SKINNING",
    
                "			vec4 skinVertex = bindMatrix * vec4( position, 1.0 );",
    
                "			vec4 skinned = vec4( 0.0 );",
                "			skinned += boneMatX * skinVertex * skinWeight.x;",
                "			skinned += boneMatY * skinVertex * skinWeight.y;",
                "			skinned += boneMatZ * skinVertex * skinWeight.z;",
                "			skinned += boneMatW * skinVertex * skinWeight.w;",
                "			skinned  = bindMatrixInverse * skinned;",
    
                "			displacedPosition = skinned.xyz;",
    
                "		#else",
    
                "			displacedPosition = position;",
    
                "		#endif",
    
                "	#endif",
    
                    //
    
                "	vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );",
                "	vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );",
    
                "	gl_Position = projectionMatrix * mvPosition;",
    
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                    //
    
                "	vWorldPosition = worldPosition.xyz;",
                "	vViewPosition = -mvPosition.xyz;",
    
                    // shadows
    
                "	#ifdef USE_SHADOWMAP",
    
                "		for( int i = 0; i < MAX_SHADOWS; i ++ ) {",
    
                "			vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;",
    
                "		}",
    
                "	#endif",
    
                "}"
    
            ].join("\n")
    
        },
    
        /* -------------------------------------------------------------------------
        //	Cube map shader
         ------------------------------------------------------------------------- */
    
        'cube': {
    
            uniforms: { "tCube": { type: "t", value: null },
                        "tFlip": { type: "f", value: - 1 } },
    
            vertexShader: [
    
                "varying vec3 vWorldPosition;",
    
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                "	vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
                "	vWorldPosition = worldPosition.xyz;",
    
                "	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
    
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                "uniform samplerCube tCube;",
                "uniform float tFlip;",
    
                "varying vec3 vWorldPosition;",
    
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "void main() {",
    
                "	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
    
                "}"
    
            ].join("\n")
    
        },
    
        /* Depth encoding into RGBA texture
         *
         * based on SpiderGL shadow map example
         * http://spidergl.org/example.php?id=6
         *
         * originally from
         * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD
         *
         * see also
         * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/
         */
    
        'depthRGBA': {
    
            uniforms: {},
    
            vertexShader: [
    
                THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
                THREE.ShaderChunk[ "skinning_pars_vertex" ],
                THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
    
                "void main() {",
    
                    THREE.ShaderChunk[ "skinbase_vertex" ],
                    THREE.ShaderChunk[ "morphtarget_vertex" ],
                    THREE.ShaderChunk[ "skinning_vertex" ],
                    THREE.ShaderChunk[ "default_vertex" ],
                    THREE.ShaderChunk[ "logdepthbuf_vertex" ],
    
                "}"
    
            ].join("\n"),
    
            fragmentShader: [
    
                THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
    
                "vec4 pack_depth( const in float depth ) {",
    
                "	const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
                "	const vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
                "	vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );", // "	vec4 res = fract( depth * bit_shift );",
                "	res -= res.xxyz * bit_mask;",
                "	return res;",
    
                "}",
    
                "void main() {",
    
                    THREE.ShaderChunk[ "logdepthbuf_fragment" ],
    
                "	#ifdef USE_LOGDEPTHBUF_EXT",
    
                "		gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );",
    
                "	#else",
    
                "		gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",
    
                "	#endif",
    
                    //"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );",
                    //"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );",
                    //"gl_FragData[ 0 ] = pack_depth( z );",
                    //"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );",
    
                "}"
    
            ].join("\n")
    
        }
    
    };
    
    // File:src/renderers/WebGLRenderer.js
    
    /**
     * @author supereggbert / http://www.paulbrunt.co.uk/
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     * @author szimek / https://github.com/szimek/
     */
    
    THREE.WebGLRenderer = function ( parameters ) {
    
        console.log( 'THREE.WebGLRenderer', THREE.REVISION );
    
        parameters = parameters || {};
    
        var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),
        _context = parameters.context !== undefined ? parameters.context : null,
    
        _precision = parameters.precision !== undefined ? parameters.precision : 'highp',
    
        _alpha = parameters.alpha !== undefined ? parameters.alpha : false,
        _depth = parameters.depth !== undefined ? parameters.depth : true,
        _stencil = parameters.stencil !== undefined ? parameters.stencil : true,
        _antialias = parameters.antialias !== undefined ? parameters.antialias : false,
        _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
        _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
        _logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false,
    
        _clearColor = new THREE.Color( 0x000000 ),
        _clearAlpha = 0;
    
        var lights = [];
    
        var _webglObjects = {};
        var _webglObjectsImmediate = [];
    
        var opaqueObjects = [];
        var transparentObjects = [];
    
        var sprites = [];
        var lensFlares = [];
    
        // public properties
    
        this.domElement = _canvas;
        this.context = null;
        this.devicePixelRatio = parameters.devicePixelRatio !== undefined
                     ? parameters.devicePixelRatio
                     : self.devicePixelRatio !== undefined
                         ? self.devicePixelRatio
                         : 1;
    
        // clearing
    
        this.autoClear = true;
        this.autoClearColor = true;
        this.autoClearDepth = true;
        this.autoClearStencil = true;
    
        // scene graph
    
        this.sortObjects = true;
    
        // physically based shading
    
        this.gammaInput = false;
        this.gammaOutput = false;
    
        // shadow map
    
        this.shadowMapEnabled = false;
        this.shadowMapType = THREE.PCFShadowMap;
        this.shadowMapCullFace = THREE.CullFaceFront;
        this.shadowMapDebug = false;
        this.shadowMapCascade = false;
    
        // morphs
    
        this.maxMorphTargets = 8;
        this.maxMorphNormals = 4;
    
        // flags
    
        this.autoScaleCubemaps = true;
    
        // info
    
        this.info = {
    
            memory: {
    
                programs: 0,
                geometries: 0,
                textures: 0
    
            },
    
            render: {
    
                calls: 0,
                vertices: 0,
                faces: 0,
                points: 0
    
            }
    
        };
    
        // internal properties
    
        var _this = this,
    
        _programs = [],
    
        // internal state cache
    
        _currentProgram = null,
        _currentFramebuffer = null,
        _currentMaterialId = - 1,
        _currentGeometryGroupHash = - 1,
        _currentCamera = null,
    
        _usedTextureUnits = 0,
    
        // GL state cache
    
        _oldDoubleSided = - 1,
        _oldFlipSided = - 1,
    
        _oldBlending = - 1,
    
        _oldBlendEquation = - 1,
        _oldBlendSrc = - 1,
        _oldBlendDst = - 1,
    
        _oldDepthTest = - 1,
        _oldDepthWrite = - 1,
    
        _oldPolygonOffset = null,
        _oldPolygonOffsetFactor = null,
        _oldPolygonOffsetUnits = null,
    
        _oldLineWidth = null,
    
        _viewportX = 0,
        _viewportY = 0,
        _viewportWidth = _canvas.width,
        _viewportHeight = _canvas.height,
        _currentWidth = 0,
        _currentHeight = 0,
    
        _newAttributes = new Uint8Array( 16 ),
        _enabledAttributes = new Uint8Array( 16 ),
    
        // frustum
    
        _frustum = new THREE.Frustum(),
    
         // camera matrices cache
    
        _projScreenMatrix = new THREE.Matrix4(),
        _projScreenMatrixPS = new THREE.Matrix4(),
    
        _vector3 = new THREE.Vector3(),
    
        // light arrays cache
    
        _direction = new THREE.Vector3(),
    
        _lightsNeedUpdate = true,
    
        _lights = {
    
            ambient: [ 0, 0, 0 ],
            directional: { length: 0, colors:[], positions: [] },
            point: { length: 0, colors: [], positions: [], distances: [] },
            spot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [] },
            hemi: { length: 0, skyColors: [], groundColors: [], positions: [] }
    
        };
    
        // initialize
    
        var _gl;
    
        try {
    
            var attributes = {
                alpha: _alpha,
                depth: _depth,
                stencil: _stencil,
                antialias: _antialias,
                premultipliedAlpha: _premultipliedAlpha,
                preserveDrawingBuffer: _preserveDrawingBuffer
            };
    
            _gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );
    
            if ( _gl === null ) {
    
                if ( _canvas.getContext( 'webgl') !== null ) {
    
                    throw 'Error creating WebGL context with your selected attributes.';
    
                } else {
    
                    throw 'Error creating WebGL context.';
    
                }
    
            }
    
        } catch ( error ) {
    
            console.error( error );
    
        }
    
        if ( _gl.getShaderPrecisionFormat === undefined ) {
    
            _gl.getShaderPrecisionFormat = function () {
    
                return {
                    'rangeMin': 1,
                    'rangeMax': 1,
                    'precision': 1
                };
    
            }
    
        }
    
        var extensions = new THREE.WebGLExtensions( _gl );
    
        extensions.get( 'OES_texture_float' );
        extensions.get( 'OES_texture_float_linear' );
        extensions.get( 'OES_standard_derivatives' );
    
        if ( _logarithmicDepthBuffer ) {
    
            extensions.get( 'EXT_frag_depth' );
    
        }
    
        //
    
        function setDefaultGLState() {
    
            _gl.clearColor( 0, 0, 0, 1 );
            _gl.clearDepth( 1 );
            _gl.clearStencil( 0 );
    
            _gl.enable( _gl.DEPTH_TEST );
            _gl.depthFunc( _gl.LEQUAL );
    
            _gl.frontFace( _gl.CCW );
            _gl.cullFace( _gl.BACK );
            _gl.enable( _gl.CULL_FACE );
    
            _gl.enable( _gl.BLEND );
            _gl.blendEquation( _gl.FUNC_ADD );
            _gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );
    
            _gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );
    
            _gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
    
        }
    
        setDefaultGLState();
    
        this.context = _gl;
    
        // GPU capabilities
    
        var _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );
        var _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
        var _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );
        var _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );
    
        var _supportsVertexTextures = _maxVertexTextures > 0;
        var _supportsBoneTextures = _supportsVertexTextures && extensions.get( 'OES_texture_float' );
    
        //
    
        var _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );
        var _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );
        var _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );
    
        var _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );
        var _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );
        var _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );
    
        var getCompressedTextureFormats = ( function () {
    
            var array;
    
            return function () {
    
                if ( array !== undefined ) {
    
                    return array;
    
                }
    
                array = [];
    
                if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) || extensions.get( 'WEBGL_compressed_texture_s3tc' ) ) {
    
                    var formats = _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS );
    
                    for ( var i = 0; i < formats.length; i ++ ){
    
                        array.push( formats[ i ] );
    
                    }
    
                }
                
                return array;
    
            };
    
        } )();
    
        // clamp precision to maximum available
    
        var highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;
        var mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;
    
        if ( _precision === 'highp' && ! highpAvailable ) {
    
            if ( mediumpAvailable ) {
    
                _precision = 'mediump';
                console.warn( 'THREE.WebGLRenderer: highp not supported, using mediump.' );
    
            } else {
    
                _precision = 'lowp';
                console.warn( 'THREE.WebGLRenderer: highp and mediump not supported, using lowp.' );
    
            }
    
        }
    
        if ( _precision === 'mediump' && ! mediumpAvailable ) {
    
            _precision = 'lowp';
            console.warn( 'THREE.WebGLRenderer: mediump not supported, using lowp.' );
    
        }
    
        // Plugins
    
        var shadowMapPlugin = new THREE.ShadowMapPlugin( this, lights, _webglObjects, _webglObjectsImmediate );
    
        var spritePlugin = new THREE.SpritePlugin( this, sprites );
        var lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );
    
        // API
    
        this.getContext = function () {
    
            return _gl;
    
        };
    
        this.supportsVertexTextures = function () {
    
            return _supportsVertexTextures;
    
        };
    
        this.supportsFloatTextures = function () {
    
            return extensions.get( 'OES_texture_float' );
    
        };
    
        this.supportsStandardDerivatives = function () {
    
            return extensions.get( 'OES_standard_derivatives' );
    
        };
    
        this.supportsCompressedTextureS3TC = function () {
    
            return extensions.get( 'WEBGL_compressed_texture_s3tc' );
    
        };
    
        this.supportsCompressedTexturePVRTC = function () {
    
            return extensions.get( 'WEBGL_compressed_texture_pvrtc' );
    
        };
    
        this.supportsBlendMinMax = function () {
    
            return extensions.get( 'EXT_blend_minmax' );
    
        };
    
        this.getMaxAnisotropy = ( function () {
    
            var value;
    
            return function () {
    
                if ( value !== undefined ) {
    
                    return value;
    
                }
    
                var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
    
                value = extension !== null ? _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;
    
                return value;
    
            }
    
        } )();
    
        this.getPrecision = function () {
    
            return _precision;
    
        };
    
        this.setSize = function ( width, height, updateStyle ) {
    
            _canvas.width = width * this.devicePixelRatio;
            _canvas.height = height * this.devicePixelRatio;
    
            if ( updateStyle !== false ) {
    
                _canvas.style.width = width + 'px';
                _canvas.style.height = height + 'px';
    
            }
    
            this.setViewport( 0, 0, width, height );
    
        };
    
        this.setViewport = function ( x, y, width, height ) {
    
            _viewportX = x * this.devicePixelRatio;
            _viewportY = y * this.devicePixelRatio;
    
            _viewportWidth = width * this.devicePixelRatio;
            _viewportHeight = height * this.devicePixelRatio;
    
            _gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );
    
        };
    
        this.setScissor = function ( x, y, width, height ) {
    
            _gl.scissor(
                x * this.devicePixelRatio,
                y * this.devicePixelRatio,
                width * this.devicePixelRatio,
                height * this.devicePixelRatio
            );
    
        };
    
        this.enableScissorTest = function ( enable ) {
    
            enable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );
    
        };
    
        // Clearing
    
        this.setClearColor = function ( color, alpha ) {
    
            _clearColor.set( color );
            _clearAlpha = alpha !== undefined ? alpha : 1;
    
            _gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
    
        };
    
        this.setClearColorHex = function ( hex, alpha ) {
    
            console.warn( 'THREE.WebGLRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );
            this.setClearColor( hex, alpha );
    
        };
    
        this.getClearColor = function () {
    
            return _clearColor;
    
        };
    
        this.getClearAlpha = function () {
    
            return _clearAlpha;
    
        };
    
        this.clear = function ( color, depth, stencil ) {
    
            var bits = 0;
    
            if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
            if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
            if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;
    
            _gl.clear( bits );
    
        };
    
        this.clearColor = function () {
    
            _gl.clear( _gl.COLOR_BUFFER_BIT );
    
        };
    
        this.clearDepth = function () {
    
            _gl.clear( _gl.DEPTH_BUFFER_BIT );
    
        };
    
        this.clearStencil = function () {
    
            _gl.clear( _gl.STENCIL_BUFFER_BIT );
    
        };
    
        this.clearTarget = function ( renderTarget, color, depth, stencil ) {
    
            this.setRenderTarget( renderTarget );
            this.clear( color, depth, stencil );
    
        };
    
        // Reset
    
        this.resetGLState = function () {
    
            _currentProgram = null;
            _currentCamera = null;
    
            _oldBlending = - 1;
            _oldDepthTest = - 1;
            _oldDepthWrite = - 1;
            _oldDoubleSided = - 1;
            _oldFlipSided = - 1;
            _currentGeometryGroupHash = - 1;
            _currentMaterialId = - 1;
    
            _lightsNeedUpdate = true;
    
        };
    
        // Buffer allocation
    
        function createParticleBuffers ( geometry ) {
    
            geometry.__webglVertexBuffer = _gl.createBuffer();
            geometry.__webglColorBuffer = _gl.createBuffer();
    
            _this.info.memory.geometries ++;
    
        };
    
        function createLineBuffers ( geometry ) {
    
            geometry.__webglVertexBuffer = _gl.createBuffer();
            geometry.__webglColorBuffer = _gl.createBuffer();
            geometry.__webglLineDistanceBuffer = _gl.createBuffer();
    
            _this.info.memory.geometries ++;
    
        };
    
        function createMeshBuffers ( geometryGroup ) {
    
            geometryGroup.__webglVertexBuffer = _gl.createBuffer();
            geometryGroup.__webglNormalBuffer = _gl.createBuffer();
            geometryGroup.__webglTangentBuffer = _gl.createBuffer();
            geometryGroup.__webglColorBuffer = _gl.createBuffer();
            geometryGroup.__webglUVBuffer = _gl.createBuffer();
            geometryGroup.__webglUV2Buffer = _gl.createBuffer();
    
            geometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();
            geometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();
    
            geometryGroup.__webglFaceBuffer = _gl.createBuffer();
            geometryGroup.__webglLineBuffer = _gl.createBuffer();
    
            var m, ml;
    
            if ( geometryGroup.numMorphTargets ) {
    
                geometryGroup.__webglMorphTargetsBuffers = [];
    
                for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {
    
                    geometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );
    
                }
    
            }
    
            if ( geometryGroup.numMorphNormals ) {
    
                geometryGroup.__webglMorphNormalsBuffers = [];
    
                for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {
    
                    geometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );
    
                }
    
            }
    
            _this.info.memory.geometries ++;
    
        };
    
        // Events
    
        var onObjectRemoved = function ( event ) {
    
            var object = event.target;
    
            object.traverse( function ( child ) {
    
                child.removeEventListener( 'remove', onObjectRemoved );
    
                removeObject( child );
    
            } );
    
        };
    
        var onGeometryDispose = function ( event ) {
    
            var geometry = event.target;
    
            geometry.removeEventListener( 'dispose', onGeometryDispose );
    
            deallocateGeometry( geometry );
    
        };
    
        var onTextureDispose = function ( event ) {
    
            var texture = event.target;
    
            texture.removeEventListener( 'dispose', onTextureDispose );
    
            deallocateTexture( texture );
    
            _this.info.memory.textures --;
    
    
        };
    
        var onRenderTargetDispose = function ( event ) {
    
            var renderTarget = event.target;
    
            renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
    
            deallocateRenderTarget( renderTarget );
    
            _this.info.memory.textures --;
    
        };
    
        var onMaterialDispose = function ( event ) {
    
            var material = event.target;
    
            material.removeEventListener( 'dispose', onMaterialDispose );
    
            deallocateMaterial( material );
    
        };
    
        // Buffer deallocation
    
        var deleteBuffers = function ( geometry ) {
        
            var buffers = [
                '__webglVertexBuffer',
                '__webglNormalBuffer',
                '__webglTangentBuffer',
                '__webglColorBuffer',
                '__webglUVBuffer',
                '__webglUV2Buffer',
                
                '__webglSkinIndicesBuffer',
                '__webglSkinWeightsBuffer',
                
                '__webglFaceBuffer',
                '__webglLineBuffer',
                
                '__webglLineDistanceBuffer'
            ];
    
            for ( var i = 0, l = buffers.length; i < l; i ++ ) {
    
                var name = buffers[ i ];
    
                if ( geometry[ name ] !== undefined ) {
    
                    _gl.deleteBuffer( geometry[ name ] );
    
                    delete geometry[ name ];
    
                }
    
            }
    
            // custom attributes
    
            if ( geometry.__webglCustomAttributesList !== undefined ) {
    
                for ( var name in geometry.__webglCustomAttributesList ) {
    
                    _gl.deleteBuffer( geometry.__webglCustomAttributesList[ name ].buffer );
    
                }
    
                delete geometry.__webglCustomAttributesList;
    
            }
    
            _this.info.memory.geometries --;
    
        };
    
        var deallocateGeometry = function ( geometry ) {
    
            delete geometry.__webglInit;
    
            if ( geometry instanceof THREE.BufferGeometry ) {
    
                for ( var name in geometry.attributes ) {
                
                    var attribute = geometry.attributes[ name ];
    
                    if ( attribute.buffer !== undefined ) {
    
                        _gl.deleteBuffer( attribute.buffer );
    
                        delete attribute.buffer;
    
                    }
    
                }
    
                _this.info.memory.geometries --;
    
            } else {
    
                var geometryGroupsList = geometryGroups[ geometry.id ];
    
                if ( geometryGroupsList !== undefined ) {
    
                    for ( var i = 0,l = geometryGroupsList.length; i < l; i ++ ) {
    
                        var geometryGroup = geometryGroupsList[ i ];
    
                        if ( geometryGroup.numMorphTargets !== undefined ) {
    
                            for ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {
    
                                _gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );
    
                            }
    
                            delete geometryGroup.__webglMorphTargetsBuffers;
    
                        }
    
                        if ( geometryGroup.numMorphNormals !== undefined ) {
    
                            for ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {
    
                                _gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );
    
                            }
    
                            delete geometryGroup.__webglMorphNormalsBuffers;
    
                        }
    
                        deleteBuffers( geometryGroup );
    
                    }
    
                    delete geometryGroups[ geometry.id ];
    
                } else {
    
                    deleteBuffers( geometry );
    
                }
    
            }
    
            // TOFIX: Workaround for deleted geometry being currently bound
    
            _currentGeometryGroupHash = - 1;
    
        };
    
        var deallocateTexture = function ( texture ) {
    
            if ( texture.image && texture.image.__webglTextureCube ) {
    
                // cube texture
    
                _gl.deleteTexture( texture.image.__webglTextureCube );
    
                delete texture.image.__webglTextureCube;
    
            } else {
    
                // 2D texture
    
                if ( texture.__webglInit === undefined ) return;
    
                _gl.deleteTexture( texture.__webglTexture );
    
                delete texture.__webglTexture;
                delete texture.__webglInit;
    
            }
    
        };
    
        var deallocateRenderTarget = function ( renderTarget ) {
    
            if ( ! renderTarget || renderTarget.__webglTexture === undefined ) return;
    
            _gl.deleteTexture( renderTarget.__webglTexture );
    
            delete renderTarget.__webglTexture;
    
            if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {
    
                for ( var i = 0; i < 6; i ++ ) {
    
                    _gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );
                    _gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );
    
                }
    
            } else {
    
                _gl.deleteFramebuffer( renderTarget.__webglFramebuffer );
                _gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );
    
            }
    
            delete renderTarget.__webglFramebuffer;
            delete renderTarget.__webglRenderbuffer;
    
        };
    
        var deallocateMaterial = function ( material ) {
    
            var program = material.program.program;
    
            if ( program === undefined ) return;
    
            material.program = undefined;
    
            // only deallocate GL program if this was the last use of shared program
            // assumed there is only single copy of any program in the _programs list
            // (that's how it's constructed)
    
            var i, il, programInfo;
            var deleteProgram = false;
    
            for ( i = 0, il = _programs.length; i < il; i ++ ) {
    
                programInfo = _programs[ i ];
    
                if ( programInfo.program === program ) {
    
                    programInfo.usedTimes --;
    
                    if ( programInfo.usedTimes === 0 ) {
    
                        deleteProgram = true;
    
                    }
    
                    break;
    
                }
    
            }
    
            if ( deleteProgram === true ) {
    
                // avoid using array.splice, this is costlier than creating new array from scratch
    
                var newPrograms = [];
    
                for ( i = 0, il = _programs.length; i < il; i ++ ) {
    
                    programInfo = _programs[ i ];
    
                    if ( programInfo.program !== program ) {
    
                        newPrograms.push( programInfo );
    
                    }
    
                }
    
                _programs = newPrograms;
    
                _gl.deleteProgram( program );
    
                _this.info.memory.programs --;
    
            }
    
        };
    
        // Buffer initialization
    
        function initCustomAttributes ( object ) {
    
            var geometry = object.geometry;
            var material = object.material;
    
            var nvertices = geometry.vertices.length;
    
            if ( material.attributes ) {
    
                if ( geometry.__webglCustomAttributesList === undefined ) {
    
                    geometry.__webglCustomAttributesList = [];
    
                }
    
                for ( var name in material.attributes ) {
    
                    var attribute = material.attributes[ name ];
    
                    if ( ! attribute.__webglInitialized || attribute.createUniqueBuffers ) {
    
                        attribute.__webglInitialized = true;
    
                        var size = 1;   // "f" and "i"
    
                        if ( attribute.type === 'v2' ) size = 2;
                        else if ( attribute.type === 'v3' ) size = 3;
                        else if ( attribute.type === 'v4' ) size = 4;
                        else if ( attribute.type === 'c'  ) size = 3;
    
                        attribute.size = size;
    
                        attribute.array = new Float32Array( nvertices * size );
    
                        attribute.buffer = _gl.createBuffer();
                        attribute.buffer.belongsToAttribute = name;
    
                        attribute.needsUpdate = true;
    
                    }
    
                    geometry.__webglCustomAttributesList.push( attribute );
    
                }
    
            }
    
        };
    
        function initParticleBuffers ( geometry, object ) {
    
            var nvertices = geometry.vertices.length;
    
            geometry.__vertexArray = new Float32Array( nvertices * 3 );
            geometry.__colorArray = new Float32Array( nvertices * 3 );
    
            geometry.__sortArray = [];
    
            geometry.__webglParticleCount = nvertices;
    
            initCustomAttributes( object );
    
        };
    
        function initLineBuffers ( geometry, object ) {
    
            var nvertices = geometry.vertices.length;
    
            geometry.__vertexArray = new Float32Array( nvertices * 3 );
            geometry.__colorArray = new Float32Array( nvertices * 3 );
            geometry.__lineDistanceArray = new Float32Array( nvertices * 1 );
    
            geometry.__webglLineCount = nvertices;
    
            initCustomAttributes( object );
    
        };
    
        function initMeshBuffers ( geometryGroup, object ) {
    
            var geometry = object.geometry,
                faces3 = geometryGroup.faces3,
    
                nvertices = faces3.length * 3,
                ntris     = faces3.length * 1,
                nlines    = faces3.length * 3,
    
                material = getBufferMaterial( object, geometryGroup );
    
            geometryGroup.__vertexArray = new Float32Array( nvertices * 3 );
            geometryGroup.__normalArray = new Float32Array( nvertices * 3 );
            geometryGroup.__colorArray = new Float32Array( nvertices * 3 );
            geometryGroup.__uvArray = new Float32Array( nvertices * 2 );
    
            if ( geometry.faceVertexUvs.length > 1 ) {
    
                geometryGroup.__uv2Array = new Float32Array( nvertices * 2 );
    
            }
    
            if ( geometry.hasTangents ) {
    
                geometryGroup.__tangentArray = new Float32Array( nvertices * 4 );
    
            }
    
            if ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {
    
                geometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );
                geometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );
    
            }
    
            var UintArray = extensions.get( 'OES_element_index_uint' ) !== null && ntris > 21845 ? Uint32Array : Uint16Array; // 65535 / 3
    
            geometryGroup.__typeArray = UintArray;
            geometryGroup.__faceArray = new UintArray( ntris * 3 );
            geometryGroup.__lineArray = new UintArray( nlines * 2 );
    
            var m, ml;
    
            if ( geometryGroup.numMorphTargets ) {
    
                geometryGroup.__morphTargetsArrays = [];
    
                for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {
    
                    geometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );
    
                }
    
            }
    
            if ( geometryGroup.numMorphNormals ) {
    
                geometryGroup.__morphNormalsArrays = [];
    
                for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {
    
                    geometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );
    
                }
    
            }
    
            geometryGroup.__webglFaceCount = ntris * 3;
            geometryGroup.__webglLineCount = nlines * 2;
    
    
            // custom attributes
    
            if ( material.attributes ) {
    
                if ( geometryGroup.__webglCustomAttributesList === undefined ) {
    
                    geometryGroup.__webglCustomAttributesList = [];
    
                }
    
                for ( var name in material.attributes ) {
    
                    // Do a shallow copy of the attribute object so different geometryGroup chunks use different
                    // attribute buffers which are correctly indexed in the setMeshBuffers function
    
                    var originalAttribute = material.attributes[ name ];
    
                    var attribute = {};
    
                    for ( var property in originalAttribute ) {
    
                        attribute[ property ] = originalAttribute[ property ];
    
                    }
    
                    if ( ! attribute.__webglInitialized || attribute.createUniqueBuffers ) {
    
                        attribute.__webglInitialized = true;
    
                        var size = 1;   // "f" and "i"
    
                        if ( attribute.type === 'v2' ) size = 2;
                        else if ( attribute.type === 'v3' ) size = 3;
                        else if ( attribute.type === 'v4' ) size = 4;
                        else if ( attribute.type === 'c'  ) size = 3;
    
                        attribute.size = size;
    
                        attribute.array = new Float32Array( nvertices * size );
    
                        attribute.buffer = _gl.createBuffer();
                        attribute.buffer.belongsToAttribute = name;
    
                        originalAttribute.needsUpdate = true;
                        attribute.__original = originalAttribute;
    
                    }
    
                    geometryGroup.__webglCustomAttributesList.push( attribute );
    
                }
    
            }
    
            geometryGroup.__inittedArrays = true;
    
        };
    
        function getBufferMaterial( object, geometryGroup ) {
    
            return object.material instanceof THREE.MeshFaceMaterial
                 ? object.material.materials[ geometryGroup.materialIndex ]
                 : object.material;
    
        };
    
        function materialNeedsSmoothNormals ( material ) {
    
            return material && material.shading !== undefined && material.shading === THREE.SmoothShading;
    
        };
    
        // Buffer setting
    
        function setParticleBuffers ( geometry, hint, object ) {
    
            var v, c, vertex, offset, index, color,
    
            vertices = geometry.vertices,
            vl = vertices.length,
    
            colors = geometry.colors,
            cl = colors.length,
    
            vertexArray = geometry.__vertexArray,
            colorArray = geometry.__colorArray,
    
            sortArray = geometry.__sortArray,
    
            dirtyVertices = geometry.verticesNeedUpdate,
            dirtyElements = geometry.elementsNeedUpdate,
            dirtyColors = geometry.colorsNeedUpdate,
    
            customAttributes = geometry.__webglCustomAttributesList,
            i, il,
            a, ca, cal, value,
            customAttribute;
    
            if ( object.sortParticles ) {
    
                _projScreenMatrixPS.copy( _projScreenMatrix );
                _projScreenMatrixPS.multiply( object.matrixWorld );
    
                for ( v = 0; v < vl; v ++ ) {
    
                    vertex = vertices[ v ];
    
                    _vector3.copy( vertex );
                    _vector3.applyProjection( _projScreenMatrixPS );
    
                    sortArray[ v ] = [ _vector3.z, v ];
    
                }
    
                sortArray.sort( numericalSort );
    
                for ( v = 0; v < vl; v ++ ) {
    
                    vertex = vertices[ sortArray[ v ][ 1 ] ];
    
                    offset = v * 3;
    
                    vertexArray[ offset ]     = vertex.x;
                    vertexArray[ offset + 1 ] = vertex.y;
                    vertexArray[ offset + 2 ] = vertex.z;
    
                }
    
                for ( c = 0; c < cl; c ++ ) {
    
                    offset = c * 3;
    
                    color = colors[ sortArray[ c ][ 1 ] ];
    
                    colorArray[ offset ]     = color.r;
                    colorArray[ offset + 1 ] = color.g;
                    colorArray[ offset + 2 ] = color.b;
    
                }
    
                if ( customAttributes ) {
    
                    for ( i = 0, il = customAttributes.length; i < il; i ++ ) {
    
                        customAttribute = customAttributes[ i ];
    
                        if ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) ) continue;
    
                        offset = 0;
    
                        cal = customAttribute.value.length;
    
                        if ( customAttribute.size === 1 ) {
    
                            for ( ca = 0; ca < cal; ca ++ ) {
    
                                index = sortArray[ ca ][ 1 ];
    
                                customAttribute.array[ ca ] = customAttribute.value[ index ];
    
                            }
    
                        } else if ( customAttribute.size === 2 ) {
    
                            for ( ca = 0; ca < cal; ca ++ ) {
    
                                index = sortArray[ ca ][ 1 ];
    
                                value = customAttribute.value[ index ];
    
                                customAttribute.array[ offset ]   = value.x;
                                customAttribute.array[ offset + 1 ] = value.y;
    
                                offset += 2;
    
                            }
    
                        } else if ( customAttribute.size === 3 ) {
    
                            if ( customAttribute.type === 'c' ) {
    
                                for ( ca = 0; ca < cal; ca ++ ) {
    
                                    index = sortArray[ ca ][ 1 ];
    
                                    value = customAttribute.value[ index ];
    
                                    customAttribute.array[ offset ]     = value.r;
                                    customAttribute.array[ offset + 1 ] = value.g;
                                    customAttribute.array[ offset + 2 ] = value.b;
    
                                    offset += 3;
    
                                }
    
                            } else {
    
                                for ( ca = 0; ca < cal; ca ++ ) {
    
                                    index = sortArray[ ca ][ 1 ];
    
                                    value = customAttribute.value[ index ];
    
                                    customAttribute.array[ offset ]   = value.x;
                                    customAttribute.array[ offset + 1 ] = value.y;
                                    customAttribute.array[ offset + 2 ] = value.z;
    
                                    offset += 3;
    
                                }
    
                            }
    
                        } else if ( customAttribute.size === 4 ) {
    
                            for ( ca = 0; ca < cal; ca ++ ) {
    
                                index = sortArray[ ca ][ 1 ];
    
                                value = customAttribute.value[ index ];
    
                                customAttribute.array[ offset ]      = value.x;
                                customAttribute.array[ offset + 1  ] = value.y;
                                customAttribute.array[ offset + 2  ] = value.z;
                                customAttribute.array[ offset + 3  ] = value.w;
    
                                offset += 4;
    
                            }
    
                        }
    
                    }
    
                }
    
            } else {
    
                if ( dirtyVertices ) {
    
                    for ( v = 0; v < vl; v ++ ) {
    
                        vertex = vertices[ v ];
    
                        offset = v * 3;
    
                        vertexArray[ offset ]     = vertex.x;
                        vertexArray[ offset + 1 ] = vertex.y;
                        vertexArray[ offset + 2 ] = vertex.z;
    
                    }
    
                }
    
                if ( dirtyColors ) {
    
                    for ( c = 0; c < cl; c ++ ) {
    
                        color = colors[ c ];
    
                        offset = c * 3;
    
                        colorArray[ offset ]     = color.r;
                        colorArray[ offset + 1 ] = color.g;
                        colorArray[ offset + 2 ] = color.b;
    
                    }
    
                }
    
                if ( customAttributes ) {
    
                    for ( i = 0, il = customAttributes.length; i < il; i ++ ) {
    
                        customAttribute = customAttributes[ i ];
    
                        if ( customAttribute.needsUpdate &&
                             ( customAttribute.boundTo === undefined ||
                                 customAttribute.boundTo === 'vertices' ) ) {
    
                            cal = customAttribute.value.length;
    
                            offset = 0;
    
                            if ( customAttribute.size === 1 ) {
    
                                for ( ca = 0; ca < cal; ca ++ ) {
    
                                    customAttribute.array[ ca ] = customAttribute.value[ ca ];
    
                                }
    
                            } else if ( customAttribute.size === 2 ) {
    
                                for ( ca = 0; ca < cal; ca ++ ) {
    
                                    value = customAttribute.value[ ca ];
    
                                    customAttribute.array[ offset ]   = value.x;
                                    customAttribute.array[ offset + 1 ] = value.y;
    
                                    offset += 2;
    
                                }
    
                            } else if ( customAttribute.size === 3 ) {
    
                                if ( customAttribute.type === 'c' ) {
    
                                    for ( ca = 0; ca < cal; ca ++ ) {
    
                                        value = customAttribute.value[ ca ];
    
                                        customAttribute.array[ offset ]   = value.r;
                                        customAttribute.array[ offset + 1 ] = value.g;
                                        customAttribute.array[ offset + 2 ] = value.b;
    
                                        offset += 3;
    
                                    }
    
                                } else {
    
                                    for ( ca = 0; ca < cal; ca ++ ) {
    
                                        value = customAttribute.value[ ca ];
    
                                        customAttribute.array[ offset ]   = value.x;
                                        customAttribute.array[ offset + 1 ] = value.y;
                                        customAttribute.array[ offset + 2 ] = value.z;
    
                                        offset += 3;
    
                                    }
    
                                }
    
                            } else if ( customAttribute.size === 4 ) {
    
                                for ( ca = 0; ca < cal; ca ++ ) {
    
                                    value = customAttribute.value[ ca ];
    
                                    customAttribute.array[ offset ]      = value.x;
                                    customAttribute.array[ offset + 1  ] = value.y;
                                    customAttribute.array[ offset + 2  ] = value.z;
                                    customAttribute.array[ offset + 3  ] = value.w;
    
                                    offset += 4;
    
                                }
    
                            }
    
                        }
    
                    }
    
                }
    
            }
    
            if ( dirtyVertices || object.sortParticles ) {
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );
    
            }
    
            if ( dirtyColors || object.sortParticles ) {
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );
    
            }
    
            if ( customAttributes ) {
    
                for ( i = 0, il = customAttributes.length; i < il; i ++ ) {
    
                    customAttribute = customAttributes[ i ];
    
                    if ( customAttribute.needsUpdate || object.sortParticles ) {
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
                        _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );
    
                    }
    
                }
    
            }
    
        }
    
        function setLineBuffers ( geometry, hint ) {
    
            var v, c, d, vertex, offset, color,
    
            vertices = geometry.vertices,
            colors = geometry.colors,
            lineDistances = geometry.lineDistances,
    
            vl = vertices.length,
            cl = colors.length,
            dl = lineDistances.length,
    
            vertexArray = geometry.__vertexArray,
            colorArray = geometry.__colorArray,
            lineDistanceArray = geometry.__lineDistanceArray,
    
            dirtyVertices = geometry.verticesNeedUpdate,
            dirtyColors = geometry.colorsNeedUpdate,
            dirtyLineDistances = geometry.lineDistancesNeedUpdate,
    
            customAttributes = geometry.__webglCustomAttributesList,
    
            i, il,
            a, ca, cal, value,
            customAttribute;
    
            if ( dirtyVertices ) {
    
                for ( v = 0; v < vl; v ++ ) {
    
                    vertex = vertices[ v ];
    
                    offset = v * 3;
    
                    vertexArray[ offset ]     = vertex.x;
                    vertexArray[ offset + 1 ] = vertex.y;
                    vertexArray[ offset + 2 ] = vertex.z;
    
                }
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );
    
            }
    
            if ( dirtyColors ) {
    
                for ( c = 0; c < cl; c ++ ) {
    
                    color = colors[ c ];
    
                    offset = c * 3;
    
                    colorArray[ offset ]     = color.r;
                    colorArray[ offset + 1 ] = color.g;
                    colorArray[ offset + 2 ] = color.b;
    
                }
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );
    
            }
    
            if ( dirtyLineDistances ) {
    
                for ( d = 0; d < dl; d ++ ) {
    
                    lineDistanceArray[ d ] = lineDistances[ d ];
    
                }
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );
    
            }
    
            if ( customAttributes ) {
    
                for ( i = 0, il = customAttributes.length; i < il; i ++ ) {
    
                    customAttribute = customAttributes[ i ];
    
                    if ( customAttribute.needsUpdate &&
                         ( customAttribute.boundTo === undefined ||
                             customAttribute.boundTo === 'vertices' ) ) {
    
                        offset = 0;
    
                        cal = customAttribute.value.length;
    
                        if ( customAttribute.size === 1 ) {
    
                            for ( ca = 0; ca < cal; ca ++ ) {
    
                                customAttribute.array[ ca ] = customAttribute.value[ ca ];
    
                            }
    
                        } else if ( customAttribute.size === 2 ) {
    
                            for ( ca = 0; ca < cal; ca ++ ) {
    
                                value = customAttribute.value[ ca ];
    
                                customAttribute.array[ offset ]   = value.x;
                                customAttribute.array[ offset + 1 ] = value.y;
    
                                offset += 2;
    
                            }
    
                        } else if ( customAttribute.size === 3 ) {
    
                            if ( customAttribute.type === 'c' ) {
    
                                for ( ca = 0; ca < cal; ca ++ ) {
    
                                    value = customAttribute.value[ ca ];
    
                                    customAttribute.array[ offset ]   = value.r;
                                    customAttribute.array[ offset + 1 ] = value.g;
                                    customAttribute.array[ offset + 2 ] = value.b;
    
                                    offset += 3;
    
                                }
    
                            } else {
    
                                for ( ca = 0; ca < cal; ca ++ ) {
    
                                    value = customAttribute.value[ ca ];
    
                                    customAttribute.array[ offset ]   = value.x;
                                    customAttribute.array[ offset + 1 ] = value.y;
                                    customAttribute.array[ offset + 2 ] = value.z;
    
                                    offset += 3;
    
                                }
    
                            }
    
                        } else if ( customAttribute.size === 4 ) {
    
                            for ( ca = 0; ca < cal; ca ++ ) {
    
                                value = customAttribute.value[ ca ];
    
                                customAttribute.array[ offset ]    = value.x;
                                customAttribute.array[ offset + 1  ] = value.y;
                                customAttribute.array[ offset + 2  ] = value.z;
                                customAttribute.array[ offset + 3  ] = value.w;
    
                                offset += 4;
    
                            }
    
                        }
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
                        _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );
    
                    }
    
                }
    
            }
    
        }
    
        function setMeshBuffers( geometryGroup, object, hint, dispose, material ) {
    
            if ( ! geometryGroup.__inittedArrays ) {
    
                return;
    
            }
    
            var needsSmoothNormals = materialNeedsSmoothNormals( material );
    
            var f, fl, fi, face,
            vertexNormals, faceNormal, normal,
            vertexColors, faceColor,
            vertexTangents,
            uv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,
            c1, c2, c3,
            sw1, sw2, sw3, sw4,
            si1, si2, si3, si4,
            sa1, sa2, sa3, sa4,
            sb1, sb2, sb3, sb4,
            m, ml, i, il,
            vn, uvi, uv2i,
            vk, vkl, vka,
            nka, chf, faceVertexNormals,
            a,
    
            vertexIndex = 0,
    
            offset = 0,
            offset_uv = 0,
            offset_uv2 = 0,
            offset_face = 0,
            offset_normal = 0,
            offset_tangent = 0,
            offset_line = 0,
            offset_color = 0,
            offset_skin = 0,
            offset_morphTarget = 0,
            offset_custom = 0,
            offset_customSrc = 0,
    
            value,
    
            vertexArray = geometryGroup.__vertexArray,
            uvArray = geometryGroup.__uvArray,
            uv2Array = geometryGroup.__uv2Array,
            normalArray = geometryGroup.__normalArray,
            tangentArray = geometryGroup.__tangentArray,
            colorArray = geometryGroup.__colorArray,
    
            skinIndexArray = geometryGroup.__skinIndexArray,
            skinWeightArray = geometryGroup.__skinWeightArray,
    
            morphTargetsArrays = geometryGroup.__morphTargetsArrays,
            morphNormalsArrays = geometryGroup.__morphNormalsArrays,
    
            customAttributes = geometryGroup.__webglCustomAttributesList,
            customAttribute,
    
            faceArray = geometryGroup.__faceArray,
            lineArray = geometryGroup.__lineArray,
    
            geometry = object.geometry, // this is shared for all chunks
    
            dirtyVertices = geometry.verticesNeedUpdate,
            dirtyElements = geometry.elementsNeedUpdate,
            dirtyUvs = geometry.uvsNeedUpdate,
            dirtyNormals = geometry.normalsNeedUpdate,
            dirtyTangents = geometry.tangentsNeedUpdate,
            dirtyColors = geometry.colorsNeedUpdate,
            dirtyMorphTargets = geometry.morphTargetsNeedUpdate,
    
            vertices = geometry.vertices,
            chunk_faces3 = geometryGroup.faces3,
            obj_faces = geometry.faces,
    
            obj_uvs  = geometry.faceVertexUvs[ 0 ],
            obj_uvs2 = geometry.faceVertexUvs[ 1 ],
    
            obj_colors = geometry.colors,
    
            obj_skinIndices = geometry.skinIndices,
            obj_skinWeights = geometry.skinWeights,
    
            morphTargets = geometry.morphTargets,
            morphNormals = geometry.morphNormals;
    
            if ( dirtyVertices ) {
    
                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                    face = obj_faces[ chunk_faces3[ f ] ];
    
                    v1 = vertices[ face.a ];
                    v2 = vertices[ face.b ];
                    v3 = vertices[ face.c ];
    
                    vertexArray[ offset ]     = v1.x;
                    vertexArray[ offset + 1 ] = v1.y;
                    vertexArray[ offset + 2 ] = v1.z;
    
                    vertexArray[ offset + 3 ] = v2.x;
                    vertexArray[ offset + 4 ] = v2.y;
                    vertexArray[ offset + 5 ] = v2.z;
    
                    vertexArray[ offset + 6 ] = v3.x;
                    vertexArray[ offset + 7 ] = v3.y;
                    vertexArray[ offset + 8 ] = v3.z;
    
                    offset += 9;
    
                }
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );
    
            }
    
            if ( dirtyMorphTargets ) {
    
                for ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {
    
                    offset_morphTarget = 0;
    
                    for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                        chf = chunk_faces3[ f ];
                        face = obj_faces[ chf ];
    
                        // morph positions
    
                        v1 = morphTargets[ vk ].vertices[ face.a ];
                        v2 = morphTargets[ vk ].vertices[ face.b ];
                        v3 = morphTargets[ vk ].vertices[ face.c ];
    
                        vka = morphTargetsArrays[ vk ];
    
                        vka[ offset_morphTarget ]     = v1.x;
                        vka[ offset_morphTarget + 1 ] = v1.y;
                        vka[ offset_morphTarget + 2 ] = v1.z;
    
                        vka[ offset_morphTarget + 3 ] = v2.x;
                        vka[ offset_morphTarget + 4 ] = v2.y;
                        vka[ offset_morphTarget + 5 ] = v2.z;
    
                        vka[ offset_morphTarget + 6 ] = v3.x;
                        vka[ offset_morphTarget + 7 ] = v3.y;
                        vka[ offset_morphTarget + 8 ] = v3.z;
    
                        // morph normals
    
                        if ( material.morphNormals ) {
    
                            if ( needsSmoothNormals ) {
    
                                faceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];
    
                                n1 = faceVertexNormals.a;
                                n2 = faceVertexNormals.b;
                                n3 = faceVertexNormals.c;
    
                            } else {
    
                                n1 = morphNormals[ vk ].faceNormals[ chf ];
                                n2 = n1;
                                n3 = n1;
    
                            }
    
                            nka = morphNormalsArrays[ vk ];
    
                            nka[ offset_morphTarget ]     = n1.x;
                            nka[ offset_morphTarget + 1 ] = n1.y;
                            nka[ offset_morphTarget + 2 ] = n1.z;
    
                            nka[ offset_morphTarget + 3 ] = n2.x;
                            nka[ offset_morphTarget + 4 ] = n2.y;
                            nka[ offset_morphTarget + 5 ] = n2.z;
    
                            nka[ offset_morphTarget + 6 ] = n3.x;
                            nka[ offset_morphTarget + 7 ] = n3.y;
                            nka[ offset_morphTarget + 8 ] = n3.z;
    
                        }
    
                        //
    
                        offset_morphTarget += 9;
    
                    }
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );
                    _gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );
    
                    if ( material.morphNormals ) {
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );
                        _gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );
    
                    }
    
                }
    
            }
    
            if ( obj_skinWeights.length ) {
    
                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                    face = obj_faces[ chunk_faces3[ f ] ];
    
                    // weights
    
                    sw1 = obj_skinWeights[ face.a ];
                    sw2 = obj_skinWeights[ face.b ];
                    sw3 = obj_skinWeights[ face.c ];
    
                    skinWeightArray[ offset_skin ]     = sw1.x;
                    skinWeightArray[ offset_skin + 1 ] = sw1.y;
                    skinWeightArray[ offset_skin + 2 ] = sw1.z;
                    skinWeightArray[ offset_skin + 3 ] = sw1.w;
    
                    skinWeightArray[ offset_skin + 4 ] = sw2.x;
                    skinWeightArray[ offset_skin + 5 ] = sw2.y;
                    skinWeightArray[ offset_skin + 6 ] = sw2.z;
                    skinWeightArray[ offset_skin + 7 ] = sw2.w;
    
                    skinWeightArray[ offset_skin + 8 ]  = sw3.x;
                    skinWeightArray[ offset_skin + 9 ]  = sw3.y;
                    skinWeightArray[ offset_skin + 10 ] = sw3.z;
                    skinWeightArray[ offset_skin + 11 ] = sw3.w;
    
                    // indices
    
                    si1 = obj_skinIndices[ face.a ];
                    si2 = obj_skinIndices[ face.b ];
                    si3 = obj_skinIndices[ face.c ];
    
                    skinIndexArray[ offset_skin ]     = si1.x;
                    skinIndexArray[ offset_skin + 1 ] = si1.y;
                    skinIndexArray[ offset_skin + 2 ] = si1.z;
                    skinIndexArray[ offset_skin + 3 ] = si1.w;
    
                    skinIndexArray[ offset_skin + 4 ] = si2.x;
                    skinIndexArray[ offset_skin + 5 ] = si2.y;
                    skinIndexArray[ offset_skin + 6 ] = si2.z;
                    skinIndexArray[ offset_skin + 7 ] = si2.w;
    
                    skinIndexArray[ offset_skin + 8 ]  = si3.x;
                    skinIndexArray[ offset_skin + 9 ]  = si3.y;
                    skinIndexArray[ offset_skin + 10 ] = si3.z;
                    skinIndexArray[ offset_skin + 11 ] = si3.w;
    
                    offset_skin += 12;
    
                }
    
                if ( offset_skin > 0 ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
                    _gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
                    _gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );
    
                }
    
            }
    
            if ( dirtyColors ) {
    
                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                    face = obj_faces[ chunk_faces3[ f ] ];
    
                    vertexColors = face.vertexColors;
                    faceColor = face.color;
    
                    if ( vertexColors.length === 3 && material.vertexColors === THREE.VertexColors ) {
    
                        c1 = vertexColors[ 0 ];
                        c2 = vertexColors[ 1 ];
                        c3 = vertexColors[ 2 ];
    
                    } else {
    
                        c1 = faceColor;
                        c2 = faceColor;
                        c3 = faceColor;
    
                    }
    
                    colorArray[ offset_color ]     = c1.r;
                    colorArray[ offset_color + 1 ] = c1.g;
                    colorArray[ offset_color + 2 ] = c1.b;
    
                    colorArray[ offset_color + 3 ] = c2.r;
                    colorArray[ offset_color + 4 ] = c2.g;
                    colorArray[ offset_color + 5 ] = c2.b;
    
                    colorArray[ offset_color + 6 ] = c3.r;
                    colorArray[ offset_color + 7 ] = c3.g;
                    colorArray[ offset_color + 8 ] = c3.b;
    
                    offset_color += 9;
    
                }
    
                if ( offset_color > 0 ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
                    _gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );
    
                }
    
            }
    
            if ( dirtyTangents && geometry.hasTangents ) {
    
                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                    face = obj_faces[ chunk_faces3[ f ] ];
    
                    vertexTangents = face.vertexTangents;
    
                    t1 = vertexTangents[ 0 ];
                    t2 = vertexTangents[ 1 ];
                    t3 = vertexTangents[ 2 ];
    
                    tangentArray[ offset_tangent ]     = t1.x;
                    tangentArray[ offset_tangent + 1 ] = t1.y;
                    tangentArray[ offset_tangent + 2 ] = t1.z;
                    tangentArray[ offset_tangent + 3 ] = t1.w;
    
                    tangentArray[ offset_tangent + 4 ] = t2.x;
                    tangentArray[ offset_tangent + 5 ] = t2.y;
                    tangentArray[ offset_tangent + 6 ] = t2.z;
                    tangentArray[ offset_tangent + 7 ] = t2.w;
    
                    tangentArray[ offset_tangent + 8 ]  = t3.x;
                    tangentArray[ offset_tangent + 9 ]  = t3.y;
                    tangentArray[ offset_tangent + 10 ] = t3.z;
                    tangentArray[ offset_tangent + 11 ] = t3.w;
    
                    offset_tangent += 12;
    
                }
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );
    
            }
    
            if ( dirtyNormals ) {
    
                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                    face = obj_faces[ chunk_faces3[ f ] ];
    
                    vertexNormals = face.vertexNormals;
                    faceNormal = face.normal;
    
                    if ( vertexNormals.length === 3 && needsSmoothNormals ) {
    
                        for ( i = 0; i < 3; i ++ ) {
    
                            vn = vertexNormals[ i ];
    
                            normalArray[ offset_normal ]     = vn.x;
                            normalArray[ offset_normal + 1 ] = vn.y;
                            normalArray[ offset_normal + 2 ] = vn.z;
    
                            offset_normal += 3;
    
                        }
    
                    } else {
    
                        for ( i = 0; i < 3; i ++ ) {
    
                            normalArray[ offset_normal ]     = faceNormal.x;
                            normalArray[ offset_normal + 1 ] = faceNormal.y;
                            normalArray[ offset_normal + 2 ] = faceNormal.z;
    
                            offset_normal += 3;
    
                        }
    
                    }
    
                }
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );
    
            }
    
            if ( dirtyUvs && obj_uvs ) {
    
                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                    fi = chunk_faces3[ f ];
    
                    uv = obj_uvs[ fi ];
    
                    if ( uv === undefined ) continue;
    
                    for ( i = 0; i < 3; i ++ ) {
    
                        uvi = uv[ i ];
    
                        uvArray[ offset_uv ]     = uvi.x;
                        uvArray[ offset_uv + 1 ] = uvi.y;
    
                        offset_uv += 2;
    
                    }
    
                }
    
                if ( offset_uv > 0 ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
                    _gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );
    
                }
    
            }
    
            if ( dirtyUvs && obj_uvs2 ) {
    
                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                    fi = chunk_faces3[ f ];
    
                    uv2 = obj_uvs2[ fi ];
    
                    if ( uv2 === undefined ) continue;
    
                    for ( i = 0; i < 3; i ++ ) {
    
                        uv2i = uv2[ i ];
    
                        uv2Array[ offset_uv2 ]     = uv2i.x;
                        uv2Array[ offset_uv2 + 1 ] = uv2i.y;
    
                        offset_uv2 += 2;
    
                    }
    
                }
    
                if ( offset_uv2 > 0 ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
                    _gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );
    
                }
    
            }
    
            if ( dirtyElements ) {
    
                for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                    faceArray[ offset_face ]   = vertexIndex;
                    faceArray[ offset_face + 1 ] = vertexIndex + 1;
                    faceArray[ offset_face + 2 ] = vertexIndex + 2;
    
                    offset_face += 3;
    
                    lineArray[ offset_line ]     = vertexIndex;
                    lineArray[ offset_line + 1 ] = vertexIndex + 1;
    
                    lineArray[ offset_line + 2 ] = vertexIndex;
                    lineArray[ offset_line + 3 ] = vertexIndex + 2;
    
                    lineArray[ offset_line + 4 ] = vertexIndex + 1;
                    lineArray[ offset_line + 5 ] = vertexIndex + 2;
    
                    offset_line += 6;
    
                    vertexIndex += 3;
    
                }
    
                _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
                _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );
    
                _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
                _gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );
    
            }
    
            if ( customAttributes ) {
    
                for ( i = 0, il = customAttributes.length; i < il; i ++ ) {
    
                    customAttribute = customAttributes[ i ];
    
                    if ( ! customAttribute.__original.needsUpdate ) continue;
    
                    offset_custom = 0;
                    offset_customSrc = 0;
    
                    if ( customAttribute.size === 1 ) {
    
                        if ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                face = obj_faces[ chunk_faces3[ f ] ];
    
                                customAttribute.array[ offset_custom ]     = customAttribute.value[ face.a ];
                                customAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];
                                customAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];
    
                                offset_custom += 3;
    
                            }
    
                        } else if ( customAttribute.boundTo === 'faces' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                value = customAttribute.value[ chunk_faces3[ f ] ];
    
                                customAttribute.array[ offset_custom ]     = value;
                                customAttribute.array[ offset_custom + 1 ] = value;
                                customAttribute.array[ offset_custom + 2 ] = value;
    
                                offset_custom += 3;
    
                            }
    
                        }
    
                    } else if ( customAttribute.size === 2 ) {
    
                        if ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                face = obj_faces[ chunk_faces3[ f ] ];
    
                                v1 = customAttribute.value[ face.a ];
                                v2 = customAttribute.value[ face.b ];
                                v3 = customAttribute.value[ face.c ];
    
                                customAttribute.array[ offset_custom ]     = v1.x;
                                customAttribute.array[ offset_custom + 1 ] = v1.y;
    
                                customAttribute.array[ offset_custom + 2 ] = v2.x;
                                customAttribute.array[ offset_custom + 3 ] = v2.y;
    
                                customAttribute.array[ offset_custom + 4 ] = v3.x;
                                customAttribute.array[ offset_custom + 5 ] = v3.y;
    
                                offset_custom += 6;
    
                            }
    
                        } else if ( customAttribute.boundTo === 'faces' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                value = customAttribute.value[ chunk_faces3[ f ] ];
    
                                v1 = value;
                                v2 = value;
                                v3 = value;
    
                                customAttribute.array[ offset_custom ]     = v1.x;
                                customAttribute.array[ offset_custom + 1 ] = v1.y;
    
                                customAttribute.array[ offset_custom + 2 ] = v2.x;
                                customAttribute.array[ offset_custom + 3 ] = v2.y;
    
                                customAttribute.array[ offset_custom + 4 ] = v3.x;
                                customAttribute.array[ offset_custom + 5 ] = v3.y;
    
                                offset_custom += 6;
    
                            }
    
                        }
    
                    } else if ( customAttribute.size === 3 ) {
    
                        var pp;
    
                        if ( customAttribute.type === 'c' ) {
    
                            pp = [ 'r', 'g', 'b' ];
    
                        } else {
    
                            pp = [ 'x', 'y', 'z' ];
    
                        }
    
                        if ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                face = obj_faces[ chunk_faces3[ f ] ];
    
                                v1 = customAttribute.value[ face.a ];
                                v2 = customAttribute.value[ face.b ];
                                v3 = customAttribute.value[ face.c ];
    
                                customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];
    
                                customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];
    
                                customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];
    
                                offset_custom += 9;
    
                            }
    
                        } else if ( customAttribute.boundTo === 'faces' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                value = customAttribute.value[ chunk_faces3[ f ] ];
    
                                v1 = value;
                                v2 = value;
                                v3 = value;
    
                                customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];
    
                                customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];
    
                                customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];
    
                                offset_custom += 9;
    
                            }
    
                        } else if ( customAttribute.boundTo === 'faceVertices' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                value = customAttribute.value[ chunk_faces3[ f ] ];
    
                                v1 = value[ 0 ];
                                v2 = value[ 1 ];
                                v3 = value[ 2 ];
    
                                customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];
    
                                customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];
    
                                customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
                                customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
                                customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];
    
                                offset_custom += 9;
    
                            }
    
                        }
    
                    } else if ( customAttribute.size === 4 ) {
    
                        if ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                face = obj_faces[ chunk_faces3[ f ] ];
    
                                v1 = customAttribute.value[ face.a ];
                                v2 = customAttribute.value[ face.b ];
                                v3 = customAttribute.value[ face.c ];
    
                                customAttribute.array[ offset_custom  ]   = v1.x;
                                customAttribute.array[ offset_custom + 1  ] = v1.y;
                                customAttribute.array[ offset_custom + 2  ] = v1.z;
                                customAttribute.array[ offset_custom + 3  ] = v1.w;
    
                                customAttribute.array[ offset_custom + 4  ] = v2.x;
                                customAttribute.array[ offset_custom + 5  ] = v2.y;
                                customAttribute.array[ offset_custom + 6  ] = v2.z;
                                customAttribute.array[ offset_custom + 7  ] = v2.w;
    
                                customAttribute.array[ offset_custom + 8  ] = v3.x;
                                customAttribute.array[ offset_custom + 9  ] = v3.y;
                                customAttribute.array[ offset_custom + 10 ] = v3.z;
                                customAttribute.array[ offset_custom + 11 ] = v3.w;
    
                                offset_custom += 12;
    
                            }
    
                        } else if ( customAttribute.boundTo === 'faces' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                value = customAttribute.value[ chunk_faces3[ f ] ];
    
                                v1 = value;
                                v2 = value;
                                v3 = value;
    
                                customAttribute.array[ offset_custom  ]   = v1.x;
                                customAttribute.array[ offset_custom + 1  ] = v1.y;
                                customAttribute.array[ offset_custom + 2  ] = v1.z;
                                customAttribute.array[ offset_custom + 3  ] = v1.w;
    
                                customAttribute.array[ offset_custom + 4  ] = v2.x;
                                customAttribute.array[ offset_custom + 5  ] = v2.y;
                                customAttribute.array[ offset_custom + 6  ] = v2.z;
                                customAttribute.array[ offset_custom + 7  ] = v2.w;
    
                                customAttribute.array[ offset_custom + 8  ] = v3.x;
                                customAttribute.array[ offset_custom + 9  ] = v3.y;
                                customAttribute.array[ offset_custom + 10 ] = v3.z;
                                customAttribute.array[ offset_custom + 11 ] = v3.w;
    
                                offset_custom += 12;
    
                            }
    
                        } else if ( customAttribute.boundTo === 'faceVertices' ) {
    
                            for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {
    
                                value = customAttribute.value[ chunk_faces3[ f ] ];
    
                                v1 = value[ 0 ];
                                v2 = value[ 1 ];
                                v3 = value[ 2 ];
    
                                customAttribute.array[ offset_custom  ]   = v1.x;
                                customAttribute.array[ offset_custom + 1  ] = v1.y;
                                customAttribute.array[ offset_custom + 2  ] = v1.z;
                                customAttribute.array[ offset_custom + 3  ] = v1.w;
    
                                customAttribute.array[ offset_custom + 4  ] = v2.x;
                                customAttribute.array[ offset_custom + 5  ] = v2.y;
                                customAttribute.array[ offset_custom + 6  ] = v2.z;
                                customAttribute.array[ offset_custom + 7  ] = v2.w;
    
                                customAttribute.array[ offset_custom + 8  ] = v3.x;
                                customAttribute.array[ offset_custom + 9  ] = v3.y;
                                customAttribute.array[ offset_custom + 10 ] = v3.z;
                                customAttribute.array[ offset_custom + 11 ] = v3.w;
    
                                offset_custom += 12;
    
                            }
    
                        }
    
                    }
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
                    _gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );
    
                }
    
            }
    
            if ( dispose ) {
    
                delete geometryGroup.__inittedArrays;
                delete geometryGroup.__colorArray;
                delete geometryGroup.__normalArray;
                delete geometryGroup.__tangentArray;
                delete geometryGroup.__uvArray;
                delete geometryGroup.__uv2Array;
                delete geometryGroup.__faceArray;
                delete geometryGroup.__vertexArray;
                delete geometryGroup.__lineArray;
                delete geometryGroup.__skinIndexArray;
                delete geometryGroup.__skinWeightArray;
    
            }
    
        };
    
        function setDirectBuffers( geometry ) {
    
            var attributes = geometry.attributes;
            var attributesKeys = geometry.attributesKeys;
    
            for ( var i = 0, l = attributesKeys.length; i < l; i ++ ) {
    
                var key = attributesKeys[ i ];
                var attribute = attributes[ key ];
    
                if ( attribute.buffer === undefined ) {
    
                    attribute.buffer = _gl.createBuffer();
                    attribute.needsUpdate = true;
    
                }
    
                if ( attribute.needsUpdate === true ) {
    
                    var bufferType = ( key === 'index' ) ? _gl.ELEMENT_ARRAY_BUFFER : _gl.ARRAY_BUFFER;
    
                    _gl.bindBuffer( bufferType, attribute.buffer );
                    _gl.bufferData( bufferType, attribute.array, _gl.STATIC_DRAW );
    
                    attribute.needsUpdate = false;
    
                }
    
            }
    
        }
    
        // Buffer rendering
    
        this.renderBufferImmediate = function ( object, program, material ) {
    
            initAttributes();
    
            if ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();
            if ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();
            if ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();
            if ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();
    
            if ( object.hasPositions ) {
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );
                enableAttribute( program.attributes.position );
                _gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );
    
            }
    
            if ( object.hasNormals ) {
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );
    
                if ( material.shading === THREE.FlatShading ) {
    
                    var nx, ny, nz,
                        nax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,
                        normalArray,
                        i, il = object.count * 3;
    
                    for ( i = 0; i < il; i += 9 ) {
    
                        normalArray = object.normalArray;
    
                        nax  = normalArray[ i ];
                        nay  = normalArray[ i + 1 ];
                        naz  = normalArray[ i + 2 ];
    
                        nbx  = normalArray[ i + 3 ];
                        nby  = normalArray[ i + 4 ];
                        nbz  = normalArray[ i + 5 ];
    
                        ncx  = normalArray[ i + 6 ];
                        ncy  = normalArray[ i + 7 ];
                        ncz  = normalArray[ i + 8 ];
    
                        nx = ( nax + nbx + ncx ) / 3;
                        ny = ( nay + nby + ncy ) / 3;
                        nz = ( naz + nbz + ncz ) / 3;
    
                        normalArray[ i ]   = nx;
                        normalArray[ i + 1 ] = ny;
                        normalArray[ i + 2 ] = nz;
    
                        normalArray[ i + 3 ] = nx;
                        normalArray[ i + 4 ] = ny;
                        normalArray[ i + 5 ] = nz;
    
                        normalArray[ i + 6 ] = nx;
                        normalArray[ i + 7 ] = ny;
                        normalArray[ i + 8 ] = nz;
    
                    }
    
                }
    
                _gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );
                enableAttribute( program.attributes.normal );
                _gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );
    
            }
    
            if ( object.hasUvs && material.map ) {
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );
                enableAttribute( program.attributes.uv );
                _gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );
    
            }
    
            if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );
                _gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );
                enableAttribute( program.attributes.color );
                _gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );
    
            }
    
            disableUnusedAttributes();
    
            _gl.drawArrays( _gl.TRIANGLES, 0, object.count );
    
            object.count = 0;
    
        };
    
        function setupVertexAttributes( material, program, geometry, startIndex ) {
    
            var geometryAttributes = geometry.attributes;
    
            var programAttributes = program.attributes;
            var programAttributesKeys = program.attributesKeys;
    
            for ( var i = 0, l = programAttributesKeys.length; i < l; i ++ ) {
    
                var key = programAttributesKeys[ i ];
                var programAttribute = programAttributes[ key ];
    
                if ( programAttribute >= 0 ) {
    
                    var geometryAttribute = geometryAttributes[ key ];
    
                    if ( geometryAttribute !== undefined ) {
    
                        var size = geometryAttribute.itemSize;
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryAttribute.buffer );
    
                        enableAttribute( programAttribute );
    
                        _gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32
    
                    } else if ( material.defaultAttributeValues !== undefined ) {
    
                        if ( material.defaultAttributeValues[ key ].length === 2 ) {
    
                            _gl.vertexAttrib2fv( programAttribute, material.defaultAttributeValues[ key ] );
    
                        } else if ( material.defaultAttributeValues[ key ].length === 3 ) {
    
                            _gl.vertexAttrib3fv( programAttribute, material.defaultAttributeValues[ key ] );
    
                        }
    
                    }
    
                }
    
            }
    
            disableUnusedAttributes();
    
        }
    
        this.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {
    
            if ( material.visible === false ) return;
    
            var program = setProgram( camera, lights, fog, material, object );
    
            var updateBuffers = false,
                wireframeBit = material.wireframe ? 1 : 0,
                geometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;
    
            if ( geometryHash !== _currentGeometryGroupHash ) {
    
                _currentGeometryGroupHash = geometryHash;
                updateBuffers = true;
    
            }
    
            if ( updateBuffers ) {
    
                initAttributes();
    
            }
    
            // render mesh
    
            if ( object instanceof THREE.Mesh ) {
    
                var mode = material.wireframe === true ? _gl.LINES : _gl.TRIANGLES;
    
                var index = geometry.attributes.index;
    
                if ( index ) {
    
                    // indexed triangles
    
                    var type, size;
    
                    if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {
    
                        type = _gl.UNSIGNED_INT;
                        size = 4;
    
                    } else {
    
                        type = _gl.UNSIGNED_SHORT;
                        size = 2;
    
                    }
    
                    var offsets = geometry.offsets;
    
                    if ( offsets.length === 0 ) {
    
                        if ( updateBuffers ) {
    
                            setupVertexAttributes( material, program, geometry, 0 );
                            _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );
    
                        }
    
                        _gl.drawElements( mode, index.array.length, type, 0 );
    
                        _this.info.render.calls ++;
                        _this.info.render.vertices += index.array.length; // not really true, here vertices can be shared
                        _this.info.render.faces += index.array.length / 3;
    
                    } else {
    
                        // if there is more than 1 chunk
                        // must set attribute pointers to use new offsets for each chunk
                        // even if geometry and materials didn't change
    
                        updateBuffers = true;
    
                        for ( var i = 0, il = offsets.length; i < il; i ++ ) {
    
                            var startIndex = offsets[ i ].index;
    
                            if ( updateBuffers ) {
    
                                setupVertexAttributes( material, program, geometry, startIndex );
                                _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );
    
                            }
    
                            // render indexed triangles
    
                            _gl.drawElements( mode, offsets[ i ].count, type, offsets[ i ].start * size );
    
                            _this.info.render.calls ++;
                            _this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared
                            _this.info.render.faces += offsets[ i ].count / 3;
    
                        }
    
                    }
    
                } else {
    
                    // non-indexed triangles
    
                    if ( updateBuffers ) {
    
                        setupVertexAttributes( material, program, geometry, 0 );
    
                    }
    
                    var position = geometry.attributes[ 'position' ];
    
                    // render non-indexed triangles
    
                    _gl.drawArrays( mode, 0, position.array.length / 3 );
    
                    _this.info.render.calls ++;
                    _this.info.render.vertices += position.array.length / 3;
                    _this.info.render.faces += position.array.length / 9;
    
                }
    
            } else if ( object instanceof THREE.PointCloud ) {
    
                // render particles
    
                if ( updateBuffers ) {
    
                    setupVertexAttributes( material, program, geometry, 0 );
    
                }
    
                var position = geometry.attributes.position;
    
                // render particles
    
                _gl.drawArrays( _gl.POINTS, 0, position.array.length / 3 );
    
                _this.info.render.calls ++;
                _this.info.render.points += position.array.length / 3;
    
            } else if ( object instanceof THREE.Line ) {
    
                var mode = ( object.mode === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;
    
                setLineWidth( material.linewidth );
    
                var index = geometry.attributes.index;
    
                if ( index ) {
    
                    // indexed lines
    
                    var type, size;
    
                    if ( index.array instanceof Uint32Array ) {
    
                        type = _gl.UNSIGNED_INT;
                        size = 4;
    
                    } else {
    
                        type = _gl.UNSIGNED_SHORT;
                        size = 2;
    
                    }
    
                    var offsets = geometry.offsets;
    
                    if ( offsets.length === 0 ) {
    
                        if ( updateBuffers ) {
    
                            setupVertexAttributes( material, program, geometry, 0 );
                            _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );
    
                        }
    
                        _gl.drawElements( mode, index.array.length, type, 0 ); // 2 bytes per Uint16Array
    
                        _this.info.render.calls ++;
                        _this.info.render.vertices += index.array.length; // not really true, here vertices can be shared
    
                    } else {
    
                        // if there is more than 1 chunk
                        // must set attribute pointers to use new offsets for each chunk
                        // even if geometry and materials didn't change
    
                        if ( offsets.length > 1 ) updateBuffers = true;
    
                        for ( var i = 0, il = offsets.length; i < il; i ++ ) {
    
                            var startIndex = offsets[ i ].index;
    
                            if ( updateBuffers ) {
    
                                setupVertexAttributes( material, program, geometry, startIndex );
                                _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );
    
                            }
    
                            // render indexed lines
    
                            _gl.drawElements( mode, offsets[ i ].count, type, offsets[ i ].start * size ); // 2 bytes per Uint16Array
    
                            _this.info.render.calls ++;
                            _this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared
    
                        }
    
                    }
    
                } else {
    
                    // non-indexed lines
    
                    if ( updateBuffers ) {
    
                        setupVertexAttributes( material, program, geometry, 0 );
    
                    }
    
                    var position = geometry.attributes.position;
    
                    _gl.drawArrays( mode, 0, position.array.length / 3 );
    
                    _this.info.render.calls ++;
                    _this.info.render.points += position.array.length / 3;
    
                }
    
            }
    
        };
    
        this.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {
    
            if ( material.visible === false ) return;
    
            var program = setProgram( camera, lights, fog, material, object );
    
            var attributes = program.attributes;
    
            var updateBuffers = false,
                wireframeBit = material.wireframe ? 1 : 0,
                geometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;
    
            if ( geometryGroupHash !== _currentGeometryGroupHash ) {
    
                _currentGeometryGroupHash = geometryGroupHash;
                updateBuffers = true;
    
            }
    
            if ( updateBuffers ) {
    
                initAttributes();
    
            }
    
            // vertices
    
            if ( ! material.morphTargets && attributes.position >= 0 ) {
    
                if ( updateBuffers ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
                    enableAttribute( attributes.position );
                    _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );
    
                }
    
            } else {
    
                if ( object.morphTargetBase ) {
    
                    setupMorphTargets( material, geometryGroup, object );
    
                }
    
            }
    
    
            if ( updateBuffers ) {
    
                // custom attributes
    
                // Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers
    
                if ( geometryGroup.__webglCustomAttributesList ) {
    
                    for ( var i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {
    
                        var attribute = geometryGroup.__webglCustomAttributesList[ i ];
    
                        if ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {
    
                            _gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );
                            enableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );
                            _gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );
    
                        }
    
                    }
    
                }
    
    
                // colors
    
                if ( attributes.color >= 0 ) {
    
                    if ( object.geometry.colors.length > 0 || object.geometry.faces.length > 0 ) {
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
                        enableAttribute( attributes.color );
                        _gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );
    
                    } else if ( material.defaultAttributeValues !== undefined ) {
    
    
                        _gl.vertexAttrib3fv( attributes.color, material.defaultAttributeValues.color );
    
                    }
    
                }
    
                // normals
    
                if ( attributes.normal >= 0 ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
                    enableAttribute( attributes.normal );
                    _gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );
    
                }
    
                // tangents
    
                if ( attributes.tangent >= 0 ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
                    enableAttribute( attributes.tangent );
                    _gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );
    
                }
    
                // uvs
    
                if ( attributes.uv >= 0 ) {
    
                    if ( object.geometry.faceVertexUvs[ 0 ] ) {
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
                        enableAttribute( attributes.uv );
                        _gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );
    
                    } else if ( material.defaultAttributeValues !== undefined ) {
    
    
                        _gl.vertexAttrib2fv( attributes.uv, material.defaultAttributeValues.uv );
    
                    }
    
                }
    
                if ( attributes.uv2 >= 0 ) {
    
                    if ( object.geometry.faceVertexUvs[ 1 ] ) {
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
                        enableAttribute( attributes.uv2 );
                        _gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );
    
                    } else if ( material.defaultAttributeValues !== undefined ) {
    
    
                        _gl.vertexAttrib2fv( attributes.uv2, material.defaultAttributeValues.uv2 );
    
                    }
    
                }
    
                if ( material.skinning &&
                     attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
                    enableAttribute( attributes.skinIndex );
                    _gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
                    enableAttribute( attributes.skinWeight );
                    _gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );
    
                }
    
                // line distances
    
                if ( attributes.lineDistance >= 0 ) {
    
                    _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );
                    enableAttribute( attributes.lineDistance );
                    _gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );
    
                }
    
            }
    
            disableUnusedAttributes();
    
            // render mesh
    
            if ( object instanceof THREE.Mesh ) {
    
                var type = geometryGroup.__typeArray === Uint32Array ? _gl.UNSIGNED_INT : _gl.UNSIGNED_SHORT;
    
                // wireframe
    
                if ( material.wireframe ) {
    
                    setLineWidth( material.wireframeLinewidth );
                    if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
                    _gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, type, 0 );
    
                // triangles
    
                } else {
    
                    if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
                    _gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, type, 0 );
    
                }
    
                _this.info.render.calls ++;
                _this.info.render.vertices += geometryGroup.__webglFaceCount;
                _this.info.render.faces += geometryGroup.__webglFaceCount / 3;
    
            // render lines
    
            } else if ( object instanceof THREE.Line ) {
    
                var mode = ( object.mode === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;
    
                setLineWidth( material.linewidth );
    
                _gl.drawArrays( mode, 0, geometryGroup.__webglLineCount );
    
                _this.info.render.calls ++;
    
            // render particles
    
            } else if ( object instanceof THREE.PointCloud ) {
    
                _gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );
    
                _this.info.render.calls ++;
                _this.info.render.points += geometryGroup.__webglParticleCount;
    
            }
    
        };
    
        function initAttributes() {
    
            for ( var i = 0, l = _newAttributes.length; i < l; i ++ ) {
    
                _newAttributes[ i ] = 0;
    
            }
    
        }
    
        function enableAttribute( attribute ) {
    
            _newAttributes[ attribute ] = 1;
    
            if ( _enabledAttributes[ attribute ] === 0 ) {
    
                _gl.enableVertexAttribArray( attribute );
                _enabledAttributes[ attribute ] = 1;
    
            }
    
        }
    
        function disableUnusedAttributes() {
    
            for ( var i = 0, l = _enabledAttributes.length; i < l; i ++ ) {
    
                if ( _enabledAttributes[ i ] !== _newAttributes[ i ] ) {
    
                    _gl.disableVertexAttribArray( i );
                    _enabledAttributes[ i ] = 0;
    
                }
    
            }
    
        }
    
        function setupMorphTargets ( material, geometryGroup, object ) {
    
            // set base
    
            var attributes = material.program.attributes;
    
            if ( object.morphTargetBase !== - 1 && attributes.position >= 0 ) {
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );
                enableAttribute( attributes.position );
                _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );
    
            } else if ( attributes.position >= 0 ) {
    
                _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
                enableAttribute( attributes.position );
                _gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );
    
            }
    
            if ( object.morphTargetForcedOrder.length ) {
    
                // set forced order
    
                var m = 0;
                var order = object.morphTargetForcedOrder;
                var influences = object.morphTargetInfluences;
    
                while ( m < material.numSupportedMorphTargets && m < order.length ) {
    
                    if ( attributes[ 'morphTarget' + m ] >= 0 ) {
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );
                        enableAttribute( attributes[ 'morphTarget' + m ] );
                        _gl.vertexAttribPointer( attributes[ 'morphTarget' + m ], 3, _gl.FLOAT, false, 0, 0 );
    
                    }
    
                    if ( attributes[ 'morphNormal' + m ] >= 0 && material.morphNormals ) {
    
                        _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );
                        enableAttribute( attributes[ 'morphNormal' + m ] );
                        _gl.vertexAttribPointer( attributes[ 'morphNormal' + m ], 3, _gl.FLOAT, false, 0, 0 );
    
                    }
    
                    object.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];
    
                    m ++;
                }
    
            } else {
    
                // find the most influencing
    
                var influence, activeInfluenceIndices = [];
                var influences = object.morphTargetInfluences;
                var i, il = influences.length;
    
                for ( i = 0; i < il; i ++ ) {
    
                    influence = influences[ i ];
    
                    if ( influence > 0 ) {
    
                        activeInfluenceIndices.push( [ influence, i ] );
    
                    }
    
                }
    
                if ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {
    
                    activeInfluenceIndices.sort( numericalSort );
                    activeInfluenceIndices.length = material.numSupportedMorphTargets;
    
                } else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {
    
                    activeInfluenceIndices.sort( numericalSort );
    
                } else if ( activeInfluenceIndices.length === 0 ) {
    
                    activeInfluenceIndices.push( [ 0, 0 ] );
    
                };
    
                var influenceIndex, m = 0;
    
                while ( m < material.numSupportedMorphTargets ) {
    
                    if ( activeInfluenceIndices[ m ] ) {
    
                        influenceIndex = activeInfluenceIndices[ m ][ 1 ];
    
                        if ( attributes[ 'morphTarget' + m ] >= 0 ) {
    
                            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );
                            enableAttribute( attributes[ 'morphTarget' + m ] );
                            _gl.vertexAttribPointer( attributes[ 'morphTarget' + m ], 3, _gl.FLOAT, false, 0, 0 );
    
                        }
    
                        if ( attributes[ 'morphNormal' + m ] >= 0 && material.morphNormals ) {
    
                            _gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );
                            enableAttribute( attributes[ 'morphNormal' + m ] );
                            _gl.vertexAttribPointer( attributes[ 'morphNormal' + m ], 3, _gl.FLOAT, false, 0, 0 );
    
    
                        }
    
                        object.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];
    
                    } else {
    
                        /*
                        _gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );
    
                        if ( material.morphNormals ) {
    
                            _gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );
    
                        }
                        */
    
                        object.__webglMorphTargetInfluences[ m ] = 0;
    
                    }
    
                    m ++;
    
                }
    
            }
    
            // load updated influences uniform
    
            if ( material.program.uniforms.morphTargetInfluences !== null ) {
    
                _gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );
    
            }
    
        }
    
        // Sorting
    
        function painterSortStable ( a, b ) {
    
            if ( a.material.id !== b.material.id ) {
    
                return b.material.id - a.material.id;
    
            } else if ( a.z !== b.z ) {
    
                return b.z - a.z;
    
            } else {
    
                return a.id - b.id;
    
            }
    
        }
    
        function reversePainterSortStable ( a, b ) {
    
            if ( a.z !== b.z ) {
    
                return a.z - b.z;
    
            } else {
    
                return a.id - b.id;
    
            }
    
        }
    
        function numericalSort ( a, b ) {
    
            return b[ 0 ] - a[ 0 ];
    
        }
    
        // Rendering
    
        this.render = function ( scene, camera, renderTarget, forceClear ) {
    
            if ( camera instanceof THREE.Camera === false ) {
    
                console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
                return;
    
            }
    
            var fog = scene.fog;
    
            // reset caching for this frame
    
            _currentGeometryGroupHash = - 1;
            _currentMaterialId = - 1;
            _currentCamera = null;
            _lightsNeedUpdate = true;
    
            // update scene graph
    
            if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
    
            // update camera matrices and frustum
    
            if ( camera.parent === undefined ) camera.updateMatrixWorld();
    
            // update Skeleton objects
    
            scene.traverse( function ( object ) {
    
                if ( object instanceof THREE.SkinnedMesh ) {
    
                    object.skeleton.update();
    
                }
    
            } );
    
            camera.matrixWorldInverse.getInverse( camera.matrixWorld );
    
            _projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
            _frustum.setFromMatrix( _projScreenMatrix );
    
            lights.length = 0;
            opaqueObjects.length = 0;
            transparentObjects.length = 0;
    
            sprites.length = 0;
            lensFlares.length = 0;
    
            projectObject( scene, scene );
    
            if ( _this.sortObjects === true ) {
    
                opaqueObjects.sort( painterSortStable );
                transparentObjects.sort( reversePainterSortStable );
    
            }
    
            // custom render plugins (pre pass)
    
            shadowMapPlugin.render( scene, camera );
    
            //
    
            _this.info.render.calls = 0;
            _this.info.render.vertices = 0;
            _this.info.render.faces = 0;
            _this.info.render.points = 0;
    
            this.setRenderTarget( renderTarget );
    
            if ( this.autoClear || forceClear ) {
    
                this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );
    
            }
    
            // set matrices for immediate objects
    
            for ( var i = 0, il = _webglObjectsImmediate.length; i < il; i ++ ) {
    
                var webglObject = _webglObjectsImmediate[ i ];
                var object = webglObject.object;
    
                if ( object.visible ) {
    
                    setupMatrices( object, camera );
    
                    unrollImmediateBufferMaterial( webglObject );
    
                }
    
            }
    
            if ( scene.overrideMaterial ) {
    
                var material = scene.overrideMaterial;
    
                this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
                this.setDepthTest( material.depthTest );
                this.setDepthWrite( material.depthWrite );
                setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
    
                renderObjects( opaqueObjects, camera, lights, fog, true, material );
                renderObjects( transparentObjects, camera, lights, fog, true, material );
                renderObjectsImmediate( _webglObjectsImmediate, '', camera, lights, fog, false, material );
    
            } else {
    
                var material = null;
    
                // opaque pass (front-to-back order)
    
                this.setBlending( THREE.NoBlending );
    
                renderObjects( opaqueObjects, camera, lights, fog, false, material );
                renderObjectsImmediate( _webglObjectsImmediate, 'opaque', camera, lights, fog, false, material );
    
                // transparent pass (back-to-front order)
    
                renderObjects( transparentObjects, camera, lights, fog, true, material );
                renderObjectsImmediate( _webglObjectsImmediate, 'transparent', camera, lights, fog, true, material );
    
            }
    
            // custom render plugins (post pass)
    
            spritePlugin.render( scene, camera );
            lensFlarePlugin.render( scene, camera, _currentWidth, _currentHeight );
    
            // Generate mipmap if we're using any kind of mipmap filtering
    
            if ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {
    
                updateRenderTargetMipmap( renderTarget );
    
            }
    
            // Ensure depth buffer writing is enabled so it can be cleared on next render
    
            this.setDepthTest( true );
            this.setDepthWrite( true );
    
            // _gl.finish();
    
        };
    
        function projectObject( scene, object ) {
    
            if ( object.visible === false ) return;
    
            if ( object instanceof THREE.Scene || object instanceof THREE.Group ) {
    
                // skip
    
            } else {
    
                initObject( object, scene );
    
                if ( object instanceof THREE.Light ) {
    
                    lights.push( object );
    
                } else if ( object instanceof THREE.Sprite ) {
    
                    sprites.push( object );
    
                } else if ( object instanceof THREE.LensFlare ) {
    
                    lensFlares.push( object );
    
                } else {
    
                    var webglObjects = _webglObjects[ object.id ];
    
                    if ( webglObjects && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {
    
                        updateObject( object, scene );
    
                        for ( var i = 0, l = webglObjects.length; i < l; i ++ ) {
    
                            var webglObject = webglObjects[i];
    
                            unrollBufferMaterial( webglObject );
    
                            webglObject.render = true;
    
                            if ( _this.sortObjects === true ) {
    
                                if ( object.renderDepth !== null ) {
    
                                    webglObject.z = object.renderDepth;
    
                                } else {
    
                                    _vector3.setFromMatrixPosition( object.matrixWorld );
                                    _vector3.applyProjection( _projScreenMatrix );
    
                                    webglObject.z = _vector3.z;
    
                                }
    
                            }
    
                        }
    
                    }
    
                }
    
            }
    
            for ( var i = 0, l = object.children.length; i < l; i ++ ) {
    
                projectObject( scene, object.children[ i ] );
    
            }
    
        }
    
        function renderObjects( renderList, camera, lights, fog, useBlending, overrideMaterial ) {
    
            var material;
    
            for ( var i = renderList.length - 1; i !== - 1; i -- ) {
    
                var webglObject = renderList[ i ];
    
                var object = webglObject.object;
                var buffer = webglObject.buffer;
    
                setupMatrices( object, camera );
    
                if ( overrideMaterial ) {
    
                    material = overrideMaterial;
    
                } else {
    
                    material = webglObject.material;
    
                    if ( ! material ) continue;
    
                    if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
    
                    _this.setDepthTest( material.depthTest );
                    _this.setDepthWrite( material.depthWrite );
                    setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
    
                }
    
                _this.setMaterialFaces( material );
    
                if ( buffer instanceof THREE.BufferGeometry ) {
    
                    _this.renderBufferDirect( camera, lights, fog, material, buffer, object );
    
                } else {
    
                    _this.renderBuffer( camera, lights, fog, material, buffer, object );
    
                }
    
            }
    
        }
    
        function renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {
    
            var material;
    
            for ( var i = 0, il = renderList.length; i < il; i ++ ) {
    
                var webglObject = renderList[ i ];
                var object = webglObject.object;
    
                if ( object.visible ) {
    
                    if ( overrideMaterial ) {
    
                        material = overrideMaterial;
    
                    } else {
    
                        material = webglObject[ materialType ];
    
                        if ( ! material ) continue;
    
                        if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
    
                        _this.setDepthTest( material.depthTest );
                        _this.setDepthWrite( material.depthWrite );
                        setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
    
                    }
    
                    _this.renderImmediateObject( camera, lights, fog, material, object );
    
                }
    
            }
    
        }
    
        this.renderImmediateObject = function ( camera, lights, fog, material, object ) {
    
            var program = setProgram( camera, lights, fog, material, object );
    
            _currentGeometryGroupHash = - 1;
    
            _this.setMaterialFaces( material );
    
            if ( object.immediateRenderCallback ) {
    
                object.immediateRenderCallback( program, _gl, _frustum );
    
            } else {
    
                object.render( function ( object ) { _this.renderBufferImmediate( object, program, material ); } );
    
            }
    
        };
    
        function unrollImmediateBufferMaterial ( globject ) {
    
            var object = globject.object,
                material = object.material;
    
            if ( material.transparent ) {
    
                globject.transparent = material;
                globject.opaque = null;
    
            } else {
    
                globject.opaque = material;
                globject.transparent = null;
    
            }
    
        }
    
        function unrollBufferMaterial ( globject ) {
    
            var object = globject.object;
            var buffer = globject.buffer;
    
            var geometry = object.geometry;
            var material = object.material;
    
            if ( material instanceof THREE.MeshFaceMaterial ) {
    
                var materialIndex = geometry instanceof THREE.BufferGeometry ? 0 : buffer.materialIndex;
    
                material = material.materials[ materialIndex ];
    
                globject.material = material;
    
                if ( material.transparent ) {
    
                    transparentObjects.push( globject );
    
                } else {
    
                    opaqueObjects.push( globject );
    
                }
    
            } else if ( material ) {
    
                globject.material = material;
    
                if ( material.transparent ) {
    
                    transparentObjects.push( globject );
    
                } else {
    
                    opaqueObjects.push( globject );
    
                }
    
            }
    
        }
    
        function initObject( object, scene ) {
    
            if ( object.__webglInit === undefined ) {
    
                object.__webglInit = true;
                object._modelViewMatrix = new THREE.Matrix4();
                object._normalMatrix = new THREE.Matrix3();
    
                object.addEventListener( 'removed', onObjectRemoved );
    
            }
    
            var geometry = object.geometry;
    
            if ( geometry === undefined ) {
    
                // ImmediateRenderObject
    
            } else if ( geometry.__webglInit === undefined ) {
    
                geometry.__webglInit = true;
                geometry.addEventListener( 'dispose', onGeometryDispose );
    
                if ( geometry instanceof THREE.BufferGeometry ) {
    
                    //
    
                } else if ( object instanceof THREE.Mesh ) {
    
                    initGeometryGroups( scene, object, geometry );
    
                } else if ( object instanceof THREE.Line ) {
    
                    if ( geometry.__webglVertexBuffer === undefined ) {
    
                        createLineBuffers( geometry );
                        initLineBuffers( geometry, object );
    
                        geometry.verticesNeedUpdate = true;
                        geometry.colorsNeedUpdate = true;
                        geometry.lineDistancesNeedUpdate = true;
    
                    }
    
                } else if ( object instanceof THREE.PointCloud ) {
    
                    if ( geometry.__webglVertexBuffer === undefined ) {
    
                        createParticleBuffers( geometry );
                        initParticleBuffers( geometry, object );
    
                        geometry.verticesNeedUpdate = true;
                        geometry.colorsNeedUpdate = true;
    
                    }
    
                }
    
            }
    
            if ( object.__webglActive === undefined) {
    
                object.__webglActive = true;
    
                if ( object instanceof THREE.Mesh ) {
    
                    if ( geometry instanceof THREE.BufferGeometry ) {
    
                        addBuffer( _webglObjects, geometry, object );
    
                    } else if ( geometry instanceof THREE.Geometry ) {
    
                        var geometryGroupsList = geometryGroups[ geometry.id ];
    
                        for ( var i = 0,l = geometryGroupsList.length; i < l; i ++ ) {
    
                            addBuffer( _webglObjects, geometryGroupsList[ i ], object );
    
                        }
    
                    }
    
                } else if ( object instanceof THREE.Line || object instanceof THREE.PointCloud ) {
    
                    addBuffer( _webglObjects, geometry, object );
    
                } else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {
    
                    addBufferImmediate( _webglObjectsImmediate, object );
    
                }
    
            }
    
        }
    
        // Geometry splitting
    
        var geometryGroups = {};
        var geometryGroupCounter = 0;
    
        function makeGroups( geometry, usesFaceMaterial ) {
    
            var maxVerticesInGroup = extensions.get( 'OES_element_index_uint' ) ? 4294967296 : 65535;
    
            var groupHash, hash_map = {};
    
            var numMorphTargets = geometry.morphTargets.length;
            var numMorphNormals = geometry.morphNormals.length;
    
            var group;
            var groups = {};
            var groupsList = [];
    
            for ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {
    
                var face = geometry.faces[ f ];
                var materialIndex = usesFaceMaterial ? face.materialIndex : 0;
    
                if ( ! ( materialIndex in hash_map ) ) {
    
                    hash_map[ materialIndex ] = { hash: materialIndex, counter: 0 };
    
                }
    
                groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;
    
                if ( ! ( groupHash in groups ) ) {
    
                    group = {
                        id: geometryGroupCounter ++,
                        faces3: [],
                        materialIndex: materialIndex,
                        vertices: 0,
                        numMorphTargets: numMorphTargets,
                        numMorphNormals: numMorphNormals
                    };
                    
                    groups[ groupHash ] = group;
                    groupsList.push( group );
    
                }
    
                if ( groups[ groupHash ].vertices + 3 > maxVerticesInGroup ) {
    
                    hash_map[ materialIndex ].counter += 1;
                    groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;
    
                    if ( ! ( groupHash in groups ) ) {
    
                        group = {
                            id: geometryGroupCounter ++,
                            faces3: [],
                            materialIndex: materialIndex,
                            vertices: 0,
                            numMorphTargets: numMorphTargets,
                            numMorphNormals: numMorphNormals
                        };
                        
                        groups[ groupHash ] = group;
                        groupsList.push( group );
    
                    }
    
                }
    
                groups[ groupHash ].faces3.push( f );
                groups[ groupHash ].vertices += 3;
    
            }
    
            return groupsList;
    
        }
    
        function initGeometryGroups( scene, object, geometry ) {
    
            var material = object.material, addBuffers = false;
    
            if ( geometryGroups[ geometry.id ] === undefined || geometry.groupsNeedUpdate === true ) {
    
                delete _webglObjects[ object.id ];
    
                geometryGroups[ geometry.id ] = makeGroups( geometry, material instanceof THREE.MeshFaceMaterial );
    
                geometry.groupsNeedUpdate = false;
    
            }
    
            var geometryGroupsList = geometryGroups[ geometry.id ];
    
            // create separate VBOs per geometry chunk
    
            for ( var i = 0, il = geometryGroupsList.length; i < il; i ++ ) {
    
                var geometryGroup = geometryGroupsList[ i ];
    
                // initialise VBO on the first access
    
                if ( geometryGroup.__webglVertexBuffer === undefined ) {
    
                    createMeshBuffers( geometryGroup );
                    initMeshBuffers( geometryGroup, object );
    
                    geometry.verticesNeedUpdate = true;
                    geometry.morphTargetsNeedUpdate = true;
                    geometry.elementsNeedUpdate = true;
                    geometry.uvsNeedUpdate = true;
                    geometry.normalsNeedUpdate = true;
                    geometry.tangentsNeedUpdate = true;
                    geometry.colorsNeedUpdate = true;
    
                    addBuffers = true;
    
                } else {
    
                    addBuffers = false;
    
                }
    
                if ( addBuffers || object.__webglActive === undefined ) {
    
                    addBuffer( _webglObjects, geometryGroup, object );
    
                }
    
            }
    
            object.__webglActive = true;
    
        }
    
        function addBuffer( objlist, buffer, object ) {
    
            var id = object.id;
            objlist[id] = objlist[id] || [];
            objlist[id].push(
                {
                    id: id,
                    buffer: buffer,
                    object: object,
                    material: null,
                    z: 0
                }
            );
    
        };
    
        function addBufferImmediate( objlist, object ) {
    
            objlist.push(
                {
                    id: null,
                    object: object,
                    opaque: null,
                    transparent: null,
                    z: 0
                }
            );
    
        };
    
        // Objects updates
    
        function updateObject( object, scene ) {
    
            var geometry = object.geometry, customAttributesDirty, material;
    
            if ( geometry instanceof THREE.BufferGeometry ) {
    
                setDirectBuffers( geometry );
    
            } else if ( object instanceof THREE.Mesh ) {
    
                // check all geometry groups
    
                if ( geometry.groupsNeedUpdate === true ) {
    
                    initGeometryGroups( scene, object, geometry );
    
                }
    
                var geometryGroupsList = geometryGroups[ geometry.id ];
    
                for ( var i = 0, il = geometryGroupsList.length; i < il; i ++ ) {
    
                    var geometryGroup = geometryGroupsList[ i ];
    
                    material = getBufferMaterial( object, geometryGroup );
    
                    if ( geometry.groupsNeedUpdate === true ) {
    
                        initMeshBuffers( geometryGroup, object );
    
                    }
    
                    customAttributesDirty = material.attributes && areCustomAttributesDirty( material );
    
                    if ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||
                         geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||
                         geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {
    
                        setMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, ! geometry.dynamic, material );
    
                    }
    
                }
    
                geometry.verticesNeedUpdate = false;
                geometry.morphTargetsNeedUpdate = false;
                geometry.elementsNeedUpdate = false;
                geometry.uvsNeedUpdate = false;
                geometry.normalsNeedUpdate = false;
                geometry.colorsNeedUpdate = false;
                geometry.tangentsNeedUpdate = false;
    
                material.attributes && clearCustomAttributes( material );
    
            } else if ( object instanceof THREE.Line ) {
    
                material = getBufferMaterial( object, geometry );
    
                customAttributesDirty = material.attributes && areCustomAttributesDirty( material );
    
                if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {
    
                    setLineBuffers( geometry, _gl.DYNAMIC_DRAW );
    
                }
    
                geometry.verticesNeedUpdate = false;
                geometry.colorsNeedUpdate = false;
                geometry.lineDistancesNeedUpdate = false;
    
                material.attributes && clearCustomAttributes( material );
    
    
            } else if ( object instanceof THREE.PointCloud ) {
    
                material = getBufferMaterial( object, geometry );
    
                customAttributesDirty = material.attributes && areCustomAttributesDirty( material );
    
                if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {
    
                    setParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );
    
                }
    
                geometry.verticesNeedUpdate = false;
                geometry.colorsNeedUpdate = false;
    
                material.attributes && clearCustomAttributes( material );
    
            }
    
        }
    
        // Objects updates - custom attributes check
    
        function areCustomAttributesDirty( material ) {
    
            for ( var name in material.attributes ) {
    
                if ( material.attributes[ name ].needsUpdate ) return true;
    
            }
    
            return false;
    
        }
    
        function clearCustomAttributes( material ) {
    
            for ( var name in material.attributes ) {
    
                material.attributes[ name ].needsUpdate = false;
    
            }
    
        }
    
        // Objects removal
    
        function removeObject( object ) {
    
            if ( object instanceof THREE.Mesh  ||
                 object instanceof THREE.PointCloud ||
                 object instanceof THREE.Line ) {
    
                delete _webglObjects[ object.id ];
    
            } else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {
    
                removeInstances( _webglObjectsImmediate, object );
    
            }
    
            delete object.__webglInit;
            delete object._modelViewMatrix;
            delete object._normalMatrix;
    
            delete object.__webglActive;
    
        }
    
        function removeInstances( objlist, object ) {
    
            for ( var o = objlist.length - 1; o >= 0; o -- ) {
    
                if ( objlist[ o ].object === object ) {
    
                    objlist.splice( o, 1 );
    
                }
    
            }
    
        }
    
        // Materials
    
        function initMaterial( material, lights, fog, object ) {
    
            material.addEventListener( 'dispose', onMaterialDispose );
    
            var shaderID;
    
            if ( material instanceof THREE.MeshDepthMaterial ) {
    
                shaderID = 'depth';
    
            } else if ( material instanceof THREE.MeshNormalMaterial ) {
    
                shaderID = 'normal';
    
            } else if ( material instanceof THREE.MeshBasicMaterial ) {
    
                shaderID = 'basic';
    
            } else if ( material instanceof THREE.MeshLambertMaterial ) {
    
                shaderID = 'lambert';
    
            } else if ( material instanceof THREE.MeshPhongMaterial ) {
    
                shaderID = 'phong';
    
            } else if ( material instanceof THREE.LineBasicMaterial ) {
    
                shaderID = 'basic';
    
            } else if ( material instanceof THREE.LineDashedMaterial ) {
    
                shaderID = 'dashed';
    
            } else if ( material instanceof THREE.PointCloudMaterial ) {
    
                shaderID = 'particle_basic';
    
            }
    
            if ( shaderID ) {
    
                var shader = THREE.ShaderLib[ shaderID ];
    
                material.__webglShader = {
                    uniforms: THREE.UniformsUtils.clone( shader.uniforms ),
                    vertexShader: shader.vertexShader,
                    fragmentShader: shader.fragmentShader
                }
    
            } else {
    
                material.__webglShader = {
                    uniforms: material.uniforms,
                    vertexShader: material.vertexShader,
                    fragmentShader: material.fragmentShader
                }
    
            }
    
            // heuristics to create shader parameters according to lights in the scene
            // (not to blow over maxLights budget)
    
            var maxLightCount = allocateLights( lights );
            var maxShadows = allocateShadows( lights );
            var maxBones = allocateBones( object );
    
            var parameters = {
    
                precision: _precision,
                supportsVertexTextures: _supportsVertexTextures,
    
                map: !! material.map,
                envMap: !! material.envMap,
                lightMap: !! material.lightMap,
                bumpMap: !! material.bumpMap,
                normalMap: !! material.normalMap,
                specularMap: !! material.specularMap,
                alphaMap: !! material.alphaMap,
    
                vertexColors: material.vertexColors,
    
                fog: fog,
                useFog: material.fog,
                fogExp: fog instanceof THREE.FogExp2,
    
                sizeAttenuation: material.sizeAttenuation,
                logarithmicDepthBuffer: _logarithmicDepthBuffer,
    
                skinning: material.skinning,
                maxBones: maxBones,
                useVertexTexture: _supportsBoneTextures && object && object.skeleton && object.skeleton.useVertexTexture,
    
                morphTargets: material.morphTargets,
                morphNormals: material.morphNormals,
                maxMorphTargets: _this.maxMorphTargets,
                maxMorphNormals: _this.maxMorphNormals,
    
                maxDirLights: maxLightCount.directional,
                maxPointLights: maxLightCount.point,
                maxSpotLights: maxLightCount.spot,
                maxHemiLights: maxLightCount.hemi,
    
                maxShadows: maxShadows,
                shadowMapEnabled: _this.shadowMapEnabled && object.receiveShadow && maxShadows > 0,
                shadowMapType: _this.shadowMapType,
                shadowMapDebug: _this.shadowMapDebug,
                shadowMapCascade: _this.shadowMapCascade,
    
                alphaTest: material.alphaTest,
                metal: material.metal,
                wrapAround: material.wrapAround,
                doubleSided: material.side === THREE.DoubleSide,
                flipSided: material.side === THREE.BackSide
    
            };
    
            // Generate code
    
            var chunks = [];
    
            if ( shaderID ) {
    
                chunks.push( shaderID );
    
            } else {
    
                chunks.push( material.fragmentShader );
                chunks.push( material.vertexShader );
    
            }
    
            if ( material.defines !== undefined ) {
    
                for ( var name in material.defines ) {
    
                    chunks.push( name );
                    chunks.push( material.defines[ name ] );
    
                }
    
            }
    
            for ( var name in parameters ) {
    
                chunks.push( name );
                chunks.push( parameters[ name ] );
    
            }
    
            var code = chunks.join();
    
            var program;
    
            // Check if code has been already compiled
    
            for ( var p = 0, pl = _programs.length; p < pl; p ++ ) {
    
                var programInfo = _programs[ p ];
    
                if ( programInfo.code === code ) {
    
                    program = programInfo;
                    program.usedTimes ++;
    
                    break;
    
                }
    
            }
    
            if ( program === undefined ) {
    
                program = new THREE.WebGLProgram( _this, code, material, parameters );
                _programs.push( program );
    
                _this.info.memory.programs = _programs.length;
    
            }
    
            material.program = program;
    
            var attributes = program.attributes;
    
            if ( material.morphTargets ) {
    
                material.numSupportedMorphTargets = 0;
    
                var id, base = 'morphTarget';
    
                for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {
    
                    id = base + i;
    
                    if ( attributes[ id ] >= 0 ) {
    
                        material.numSupportedMorphTargets ++;
    
                    }
    
                }
    
            }
    
            if ( material.morphNormals ) {
    
                material.numSupportedMorphNormals = 0;
    
                var id, base = 'morphNormal';
    
                for ( i = 0; i < _this.maxMorphNormals; i ++ ) {
    
                    id = base + i;
    
                    if ( attributes[ id ] >= 0 ) {
    
                        material.numSupportedMorphNormals ++;
    
                    }
    
                }
    
            }
    
            material.uniformsList = [];
    
            for ( var u in material.__webglShader.uniforms ) {
    
                var location = material.program.uniforms[ u ];
    
                if ( location ) {
                    material.uniformsList.push( [ material.__webglShader.uniforms[ u ], location ] );
                }
    
            }
    
        }
    
        function setProgram( camera, lights, fog, material, object ) {
    
            _usedTextureUnits = 0;
    
            if ( material.needsUpdate ) {
    
                if ( material.program ) deallocateMaterial( material );
    
                initMaterial( material, lights, fog, object );
                material.needsUpdate = false;
    
            }
    
            if ( material.morphTargets ) {
    
                if ( ! object.__webglMorphTargetInfluences ) {
    
                    object.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );
    
                }
    
            }
    
            var refreshProgram = false;
            var refreshMaterial = false;
            var refreshLights = false;
    
            var program = material.program,
                p_uniforms = program.uniforms,
                m_uniforms = material.__webglShader.uniforms;
    
            if ( program.id !== _currentProgram ) {
    
                _gl.useProgram( program.program );
                _currentProgram = program.id;
    
                refreshProgram = true;
                refreshMaterial = true;
                refreshLights = true;
    
            }
    
            if ( material.id !== _currentMaterialId ) {
    
                if ( _currentMaterialId === -1 ) refreshLights = true;
                _currentMaterialId = material.id;
    
                refreshMaterial = true;
    
            }
    
            if ( refreshProgram || camera !== _currentCamera ) {
    
                _gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );
    
                if ( _logarithmicDepthBuffer ) {
    
                    _gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
    
                }
    
    
                if ( camera !== _currentCamera ) _currentCamera = camera;
    
                // load material specific uniforms
                // (shader material also gets them for the sake of genericity)
    
                if ( material instanceof THREE.ShaderMaterial ||
                     material instanceof THREE.MeshPhongMaterial ||
                     material.envMap ) {
    
                    if ( p_uniforms.cameraPosition !== null ) {
    
                        _vector3.setFromMatrixPosition( camera.matrixWorld );
                        _gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );
    
                    }
    
                }
    
                if ( material instanceof THREE.MeshPhongMaterial ||
                     material instanceof THREE.MeshLambertMaterial ||
                     material instanceof THREE.ShaderMaterial ||
                     material.skinning ) {
    
                    if ( p_uniforms.viewMatrix !== null ) {
    
                        _gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );
    
                    }
    
                }
    
            }
    
            // skinning uniforms must be set even if material didn't change
            // auto-setting of texture unit for bone texture must go before other textures
            // not sure why, but otherwise weird things happen
    
            if ( material.skinning ) {
    
                if ( object.bindMatrix && p_uniforms.bindMatrix !== null ) {
    
                    _gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );
    
                }
    
                if ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== null ) {
    
                    _gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );
    
                }
    
                if ( _supportsBoneTextures && object.skeleton && object.skeleton.useVertexTexture ) {
    
                    if ( p_uniforms.boneTexture !== null ) {
    
                        var textureUnit = getTextureUnit();
    
                        _gl.uniform1i( p_uniforms.boneTexture, textureUnit );
                        _this.setTexture( object.skeleton.boneTexture, textureUnit );
    
                    }
    
                    if ( p_uniforms.boneTextureWidth !== null ) {
    
                        _gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );
    
                    }
    
                    if ( p_uniforms.boneTextureHeight !== null ) {
    
                        _gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );
    
                    }
    
                } else if ( object.skeleton && object.skeleton.boneMatrices ) {
    
                    if ( p_uniforms.boneGlobalMatrices !== null ) {
    
                        _gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );
    
                    }
    
                }
    
            }
    
            if ( refreshMaterial ) {
    
                // refresh uniforms common to several materials
    
                if ( fog && material.fog ) {
    
                    refreshUniformsFog( m_uniforms, fog );
    
                }
    
                if ( material instanceof THREE.MeshPhongMaterial ||
                     material instanceof THREE.MeshLambertMaterial ||
                     material.lights ) {
    
                    if ( _lightsNeedUpdate ) {
    
                        refreshLights = true;
                        setupLights( lights );
                        _lightsNeedUpdate = false;
                    }
    
                    if ( refreshLights ) {
                        refreshUniformsLights( m_uniforms, _lights );
                        markUniformsLightsNeedsUpdate( m_uniforms, true );
                    } else {
                        markUniformsLightsNeedsUpdate( m_uniforms, false );
                    }
    
                }
    
                if ( material instanceof THREE.MeshBasicMaterial ||
                     material instanceof THREE.MeshLambertMaterial ||
                     material instanceof THREE.MeshPhongMaterial ) {
    
                    refreshUniformsCommon( m_uniforms, material );
    
                }
    
                // refresh single material specific uniforms
    
                if ( material instanceof THREE.LineBasicMaterial ) {
    
                    refreshUniformsLine( m_uniforms, material );
    
                } else if ( material instanceof THREE.LineDashedMaterial ) {
    
                    refreshUniformsLine( m_uniforms, material );
                    refreshUniformsDash( m_uniforms, material );
    
                } else if ( material instanceof THREE.PointCloudMaterial ) {
    
                    refreshUniformsParticle( m_uniforms, material );
    
                } else if ( material instanceof THREE.MeshPhongMaterial ) {
    
                    refreshUniformsPhong( m_uniforms, material );
    
                } else if ( material instanceof THREE.MeshLambertMaterial ) {
    
                    refreshUniformsLambert( m_uniforms, material );
    
                } else if ( material instanceof THREE.MeshDepthMaterial ) {
    
                    m_uniforms.mNear.value = camera.near;
                    m_uniforms.mFar.value = camera.far;
                    m_uniforms.opacity.value = material.opacity;
    
                } else if ( material instanceof THREE.MeshNormalMaterial ) {
    
                    m_uniforms.opacity.value = material.opacity;
    
                }
    
                if ( object.receiveShadow && ! material._shadowPass ) {
    
                    refreshUniformsShadow( m_uniforms, lights );
    
                }
    
                // load common uniforms
    
                loadUniformsGeneric( material.uniformsList );
    
            }
    
            loadUniformsMatrices( p_uniforms, object );
    
            if ( p_uniforms.modelMatrix !== null ) {
    
                _gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );
    
            }
    
            return program;
    
        }
    
        // Uniforms (refresh uniforms objects)
    
        function refreshUniformsCommon ( uniforms, material ) {
    
            uniforms.opacity.value = material.opacity;
    
            if ( _this.gammaInput ) {
    
                uniforms.diffuse.value.copyGammaToLinear( material.color );
    
            } else {
    
                uniforms.diffuse.value = material.color;
    
            }
    
            uniforms.map.value = material.map;
            uniforms.lightMap.value = material.lightMap;
            uniforms.specularMap.value = material.specularMap;
            uniforms.alphaMap.value = material.alphaMap;
    
            if ( material.bumpMap ) {
    
                uniforms.bumpMap.value = material.bumpMap;
                uniforms.bumpScale.value = material.bumpScale;
    
            }
    
            if ( material.normalMap ) {
    
                uniforms.normalMap.value = material.normalMap;
                uniforms.normalScale.value.copy( material.normalScale );
    
            }
    
            // uv repeat and offset setting priorities
            //  1. color map
            //  2. specular map
            //  3. normal map
            //  4. bump map
            //  5. alpha map
    
            var uvScaleMap;
    
            if ( material.map ) {
    
                uvScaleMap = material.map;
    
            } else if ( material.specularMap ) {
    
                uvScaleMap = material.specularMap;
    
            } else if ( material.normalMap ) {
    
                uvScaleMap = material.normalMap;
    
            } else if ( material.bumpMap ) {
    
                uvScaleMap = material.bumpMap;
    
            } else if ( material.alphaMap ) {
    
                uvScaleMap = material.alphaMap;
    
            }
    
            if ( uvScaleMap !== undefined ) {
    
                var offset = uvScaleMap.offset;
                var repeat = uvScaleMap.repeat;
    
                uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );
    
            }
    
            uniforms.envMap.value = material.envMap;
            uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;
    
            if ( _this.gammaInput ) {
    
                //uniforms.reflectivity.value = material.reflectivity * material.reflectivity;
                uniforms.reflectivity.value = material.reflectivity;
    
            } else {
    
                uniforms.reflectivity.value = material.reflectivity;
    
            }
    
            uniforms.refractionRatio.value = material.refractionRatio;
            uniforms.combine.value = material.combine;
            uniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;
    
        }
    
        function refreshUniformsLine ( uniforms, material ) {
    
            uniforms.diffuse.value = material.color;
            uniforms.opacity.value = material.opacity;
    
        }
    
        function refreshUniformsDash ( uniforms, material ) {
    
            uniforms.dashSize.value = material.dashSize;
            uniforms.totalSize.value = material.dashSize + material.gapSize;
            uniforms.scale.value = material.scale;
    
        }
    
        function refreshUniformsParticle ( uniforms, material ) {
    
            uniforms.psColor.value = material.color;
            uniforms.opacity.value = material.opacity;
            uniforms.size.value = material.size;
            uniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.
    
            uniforms.map.value = material.map;
    
        }
    
        function refreshUniformsFog ( uniforms, fog ) {
    
            uniforms.fogColor.value = fog.color;
    
            if ( fog instanceof THREE.Fog ) {
    
                uniforms.fogNear.value = fog.near;
                uniforms.fogFar.value = fog.far;
    
            } else if ( fog instanceof THREE.FogExp2 ) {
    
                uniforms.fogDensity.value = fog.density;
    
            }
    
        }
    
        function refreshUniformsPhong ( uniforms, material ) {
    
            uniforms.shininess.value = material.shininess;
    
            if ( _this.gammaInput ) {
    
                uniforms.ambient.value.copyGammaToLinear( material.ambient );
                uniforms.emissive.value.copyGammaToLinear( material.emissive );
                uniforms.specular.value.copyGammaToLinear( material.specular );
    
            } else {
    
                uniforms.ambient.value = material.ambient;
                uniforms.emissive.value = material.emissive;
                uniforms.specular.value = material.specular;
    
            }
    
            if ( material.wrapAround ) {
    
                uniforms.wrapRGB.value.copy( material.wrapRGB );
    
            }
    
        }
    
        function refreshUniformsLambert ( uniforms, material ) {
    
            if ( _this.gammaInput ) {
    
                uniforms.ambient.value.copyGammaToLinear( material.ambient );
                uniforms.emissive.value.copyGammaToLinear( material.emissive );
    
            } else {
    
                uniforms.ambient.value = material.ambient;
                uniforms.emissive.value = material.emissive;
    
            }
    
            if ( material.wrapAround ) {
    
                uniforms.wrapRGB.value.copy( material.wrapRGB );
    
            }
    
        }
    
        function refreshUniformsLights ( uniforms, lights ) {
    
            uniforms.ambientLightColor.value = lights.ambient;
    
            uniforms.directionalLightColor.value = lights.directional.colors;
            uniforms.directionalLightDirection.value = lights.directional.positions;
    
            uniforms.pointLightColor.value = lights.point.colors;
            uniforms.pointLightPosition.value = lights.point.positions;
            uniforms.pointLightDistance.value = lights.point.distances;
    
            uniforms.spotLightColor.value = lights.spot.colors;
            uniforms.spotLightPosition.value = lights.spot.positions;
            uniforms.spotLightDistance.value = lights.spot.distances;
            uniforms.spotLightDirection.value = lights.spot.directions;
            uniforms.spotLightAngleCos.value = lights.spot.anglesCos;
            uniforms.spotLightExponent.value = lights.spot.exponents;
    
            uniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;
            uniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;
            uniforms.hemisphereLightDirection.value = lights.hemi.positions;
    
        }
    
        // If uniforms are marked as clean, they don't need to be loaded to the GPU.
    
        function markUniformsLightsNeedsUpdate ( uniforms, boolean ) {
    
            uniforms.ambientLightColor.needsUpdate = boolean;
    
            uniforms.directionalLightColor.needsUpdate = boolean;
            uniforms.directionalLightDirection.needsUpdate = boolean;
    
            uniforms.pointLightColor.needsUpdate = boolean;
            uniforms.pointLightPosition.needsUpdate = boolean;
            uniforms.pointLightDistance.needsUpdate = boolean;
    
            uniforms.spotLightColor.needsUpdate = boolean;
            uniforms.spotLightPosition.needsUpdate = boolean;
            uniforms.spotLightDistance.needsUpdate = boolean;
            uniforms.spotLightDirection.needsUpdate = boolean;
            uniforms.spotLightAngleCos.needsUpdate = boolean;
            uniforms.spotLightExponent.needsUpdate = boolean;
    
            uniforms.hemisphereLightSkyColor.needsUpdate = boolean;
            uniforms.hemisphereLightGroundColor.needsUpdate = boolean;
            uniforms.hemisphereLightDirection.needsUpdate = boolean;
    
        }
    
        function refreshUniformsShadow ( uniforms, lights ) {
    
            if ( uniforms.shadowMatrix ) {
    
                var j = 0;
    
                for ( var i = 0, il = lights.length; i < il; i ++ ) {
    
                    var light = lights[ i ];
    
                    if ( ! light.castShadow ) continue;
    
                    if ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {
    
                        uniforms.shadowMap.value[ j ] = light.shadowMap;
                        uniforms.shadowMapSize.value[ j ] = light.shadowMapSize;
    
                        uniforms.shadowMatrix.value[ j ] = light.shadowMatrix;
    
                        uniforms.shadowDarkness.value[ j ] = light.shadowDarkness;
                        uniforms.shadowBias.value[ j ] = light.shadowBias;
    
                        j ++;
    
                    }
    
                }
    
            }
    
        }
    
        // Uniforms (load to GPU)
    
        function loadUniformsMatrices ( uniforms, object ) {
    
            _gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );
    
            if ( uniforms.normalMatrix ) {
    
                _gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );
    
            }
    
        }
    
        function getTextureUnit() {
    
            var textureUnit = _usedTextureUnits;
    
            if ( textureUnit >= _maxTextures ) {
    
                console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + _maxTextures );
    
            }
    
            _usedTextureUnits += 1;
    
            return textureUnit;
    
        }
    
        function loadUniformsGeneric ( uniforms ) {
    
            var texture, textureUnit, offset;
    
            for ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {
    
                var uniform = uniforms[ j ][ 0 ];
    
                // needsUpdate property is not added to all uniforms.
                if ( uniform.needsUpdate === false ) continue;
    
                var type = uniform.type;
                var value = uniform.value;
                var location = uniforms[ j ][ 1 ];
    
                switch ( type ) {
    
                    case '1i':
                        _gl.uniform1i( location, value );
                        break;
    
                    case '1f':
                        _gl.uniform1f( location, value );
                        break;
    
                    case '2f':
                        _gl.uniform2f( location, value[ 0 ], value[ 1 ] );
                        break;
    
                    case '3f':
                        _gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );
                        break;
    
                    case '4f':
                        _gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );
                        break;
    
                    case '1iv':
                        _gl.uniform1iv( location, value );
                        break;
    
                    case '3iv':
                        _gl.uniform3iv( location, value );
                        break;
    
                    case '1fv':
                        _gl.uniform1fv( location, value );
                        break;
    
                    case '2fv':
                        _gl.uniform2fv( location, value );
                        break;
    
                    case '3fv':
                        _gl.uniform3fv( location, value );
                        break;
    
                    case '4fv':
                        _gl.uniform4fv( location, value );
                        break;
    
                    case 'Matrix3fv':
                        _gl.uniformMatrix3fv( location, false, value );
                        break;
    
                    case 'Matrix4fv':
                        _gl.uniformMatrix4fv( location, false, value );
                        break;
    
                    //
    
                    case 'i':
    
                        // single integer
                        _gl.uniform1i( location, value );
    
                        break;
    
                    case 'f':
    
                        // single float
                        _gl.uniform1f( location, value );
    
                        break;
    
                    case 'v2':
    
                        // single THREE.Vector2
                        _gl.uniform2f( location, value.x, value.y );
    
                        break;
    
                    case 'v3':
    
                        // single THREE.Vector3
                        _gl.uniform3f( location, value.x, value.y, value.z );
    
                        break;
    
                    case 'v4':
    
                        // single THREE.Vector4
                        _gl.uniform4f( location, value.x, value.y, value.z, value.w );
    
                        break;
    
                    case 'c':
    
                        // single THREE.Color
                        _gl.uniform3f( location, value.r, value.g, value.b );
    
                        break;
    
                    case 'iv1':
    
                        // flat array of integers (JS or typed array)
                        _gl.uniform1iv( location, value );
    
                        break;
    
                    case 'iv':
    
                        // flat array of integers with 3 x N size (JS or typed array)
                        _gl.uniform3iv( location, value );
    
                        break;
    
                    case 'fv1':
    
                        // flat array of floats (JS or typed array)
                        _gl.uniform1fv( location, value );
    
                        break;
    
                    case 'fv':
    
                        // flat array of floats with 3 x N size (JS or typed array)
                        _gl.uniform3fv( location, value );
    
                        break;
    
                    case 'v2v':
    
                        // array of THREE.Vector2
    
                        if ( uniform._array === undefined ) {
    
                            uniform._array = new Float32Array( 2 * value.length );
    
                        }
    
                        for ( var i = 0, il = value.length; i < il; i ++ ) {
    
                            offset = i * 2;
    
                            uniform._array[ offset ]   = value[ i ].x;
                            uniform._array[ offset + 1 ] = value[ i ].y;
    
                        }
    
                        _gl.uniform2fv( location, uniform._array );
    
                        break;
    
                    case 'v3v':
    
                        // array of THREE.Vector3
    
                        if ( uniform._array === undefined ) {
    
                            uniform._array = new Float32Array( 3 * value.length );
    
                        }
    
                        for ( var i = 0, il = value.length; i < il; i ++ ) {
    
                            offset = i * 3;
    
                            uniform._array[ offset ]   = value[ i ].x;
                            uniform._array[ offset + 1 ] = value[ i ].y;
                            uniform._array[ offset + 2 ] = value[ i ].z;
    
                        }
    
                        _gl.uniform3fv( location, uniform._array );
    
                        break;
    
                    case 'v4v':
    
                        // array of THREE.Vector4
    
                        if ( uniform._array === undefined ) {
    
                            uniform._array = new Float32Array( 4 * value.length );
    
                        }
    
                        for ( var i = 0, il = value.length; i < il; i ++ ) {
    
                            offset = i * 4;
    
                            uniform._array[ offset ]   = value[ i ].x;
                            uniform._array[ offset + 1 ] = value[ i ].y;
                            uniform._array[ offset + 2 ] = value[ i ].z;
                            uniform._array[ offset + 3 ] = value[ i ].w;
    
                        }
    
                        _gl.uniform4fv( location, uniform._array );
    
                        break;
    
                    case 'm3':
    
                        // single THREE.Matrix3
                        _gl.uniformMatrix3fv( location, false, value.elements );
    
                        break;
    
                    case 'm3v':
    
                        // array of THREE.Matrix3
    
                        if ( uniform._array === undefined ) {
    
                            uniform._array = new Float32Array( 9 * value.length );
    
                        }
    
                        for ( var i = 0, il = value.length; i < il; i ++ ) {
    
                            value[ i ].flattenToArrayOffset( uniform._array, i * 9 );
    
                        }
    
                        _gl.uniformMatrix3fv( location, false, uniform._array );
    
                        break;
    
                    case 'm4':
    
                        // single THREE.Matrix4
                        _gl.uniformMatrix4fv( location, false, value.elements );
    
                        break;
    
                    case 'm4v':
    
                        // array of THREE.Matrix4
    
                        if ( uniform._array === undefined ) {
    
                            uniform._array = new Float32Array( 16 * value.length );
    
                        }
    
                        for ( var i = 0, il = value.length; i < il; i ++ ) {
    
                            value[ i ].flattenToArrayOffset( uniform._array, i * 16 );
    
                        }
    
                        _gl.uniformMatrix4fv( location, false, uniform._array );
    
                        break;
    
                    case 't':
    
                        // single THREE.Texture (2d or cube)
    
                        texture = value;
                        textureUnit = getTextureUnit();
    
                        _gl.uniform1i( location, textureUnit );
    
                        if ( ! texture ) continue;
    
                        if ( texture instanceof THREE.CubeTexture ||
                           ( texture.image instanceof Array && texture.image.length === 6 ) ) { // CompressedTexture can have Array in image :/
    
                            setCubeTexture( texture, textureUnit );
    
                        } else if ( texture instanceof THREE.WebGLRenderTargetCube ) {
    
                            setCubeTextureDynamic( texture, textureUnit );
    
                        } else {
    
                            _this.setTexture( texture, textureUnit );
    
                        }
    
                        break;
    
                    case 'tv':
    
                        // array of THREE.Texture (2d)
    
                        if ( uniform._array === undefined ) {
    
                            uniform._array = [];
    
                        }
    
                        for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {
    
                            uniform._array[ i ] = getTextureUnit();
    
                        }
    
                        _gl.uniform1iv( location, uniform._array );
    
                        for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {
    
                            texture = uniform.value[ i ];
                            textureUnit = uniform._array[ i ];
    
                            if ( ! texture ) continue;
    
                            _this.setTexture( texture, textureUnit );
    
                        }
    
                        break;
    
                    default:
    
                        console.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );
    
                }
    
            }
    
        }
    
        function setupMatrices ( object, camera ) {
    
            object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
            object._normalMatrix.getNormalMatrix( object._modelViewMatrix );
    
        }
    
        //
    
        function setColorGamma( array, offset, color, intensitySq ) {
    
            array[ offset ]     = color.r * color.r * intensitySq;
            array[ offset + 1 ] = color.g * color.g * intensitySq;
            array[ offset + 2 ] = color.b * color.b * intensitySq;
    
        }
    
        function setColorLinear( array, offset, color, intensity ) {
    
            array[ offset ]     = color.r * intensity;
            array[ offset + 1 ] = color.g * intensity;
            array[ offset + 2 ] = color.b * intensity;
    
        }
    
        function setupLights ( lights ) {
    
            var l, ll, light, n,
            r = 0, g = 0, b = 0,
            color, skyColor, groundColor,
            intensity,  intensitySq,
            position,
            distance,
    
            zlights = _lights,
    
            dirColors = zlights.directional.colors,
            dirPositions = zlights.directional.positions,
    
            pointColors = zlights.point.colors,
            pointPositions = zlights.point.positions,
            pointDistances = zlights.point.distances,
    
            spotColors = zlights.spot.colors,
            spotPositions = zlights.spot.positions,
            spotDistances = zlights.spot.distances,
            spotDirections = zlights.spot.directions,
            spotAnglesCos = zlights.spot.anglesCos,
            spotExponents = zlights.spot.exponents,
    
            hemiSkyColors = zlights.hemi.skyColors,
            hemiGroundColors = zlights.hemi.groundColors,
            hemiPositions = zlights.hemi.positions,
    
            dirLength = 0,
            pointLength = 0,
            spotLength = 0,
            hemiLength = 0,
    
            dirCount = 0,
            pointCount = 0,
            spotCount = 0,
            hemiCount = 0,
    
            dirOffset = 0,
            pointOffset = 0,
            spotOffset = 0,
            hemiOffset = 0;
    
            for ( l = 0, ll = lights.length; l < ll; l ++ ) {
    
                light = lights[ l ];
    
                if ( light.onlyShadow ) continue;
    
                color = light.color;
                intensity = light.intensity;
                distance = light.distance;
    
                if ( light instanceof THREE.AmbientLight ) {
    
                    if ( ! light.visible ) continue;
    
                    if ( _this.gammaInput ) {
    
                        r += color.r * color.r;
                        g += color.g * color.g;
                        b += color.b * color.b;
    
                    } else {
    
                        r += color.r;
                        g += color.g;
                        b += color.b;
    
                    }
    
                } else if ( light instanceof THREE.DirectionalLight ) {
    
                    dirCount += 1;
    
                    if ( ! light.visible ) continue;
    
                    _direction.setFromMatrixPosition( light.matrixWorld );
                    _vector3.setFromMatrixPosition( light.target.matrixWorld );
                    _direction.sub( _vector3 );
                    _direction.normalize();
    
                    dirOffset = dirLength * 3;
    
                    dirPositions[ dirOffset ]     = _direction.x;
                    dirPositions[ dirOffset + 1 ] = _direction.y;
                    dirPositions[ dirOffset + 2 ] = _direction.z;
    
                    if ( _this.gammaInput ) {
    
                        setColorGamma( dirColors, dirOffset, color, intensity * intensity );
    
                    } else {
    
                        setColorLinear( dirColors, dirOffset, color, intensity );
    
                    }
    
                    dirLength += 1;
    
                } else if ( light instanceof THREE.PointLight ) {
    
                    pointCount += 1;
    
                    if ( ! light.visible ) continue;
    
                    pointOffset = pointLength * 3;
    
                    if ( _this.gammaInput ) {
    
                        setColorGamma( pointColors, pointOffset, color, intensity * intensity );
    
                    } else {
    
                        setColorLinear( pointColors, pointOffset, color, intensity );
    
                    }
    
                    _vector3.setFromMatrixPosition( light.matrixWorld );
    
                    pointPositions[ pointOffset ]     = _vector3.x;
                    pointPositions[ pointOffset + 1 ] = _vector3.y;
                    pointPositions[ pointOffset + 2 ] = _vector3.z;
    
                    pointDistances[ pointLength ] = distance;
    
                    pointLength += 1;
    
                } else if ( light instanceof THREE.SpotLight ) {
    
                    spotCount += 1;
    
                    if ( ! light.visible ) continue;
    
                    spotOffset = spotLength * 3;
    
                    if ( _this.gammaInput ) {
    
                        setColorGamma( spotColors, spotOffset, color, intensity * intensity );
    
                    } else {
    
                        setColorLinear( spotColors, spotOffset, color, intensity );
    
                    }
    
                    _direction.setFromMatrixPosition( light.matrixWorld );
    
                    spotPositions[ spotOffset ]     = _direction.x;
                    spotPositions[ spotOffset + 1 ] = _direction.y;
                    spotPositions[ spotOffset + 2 ] = _direction.z;
    
                    spotDistances[ spotLength ] = distance;
    
                    _vector3.setFromMatrixPosition( light.target.matrixWorld );
                    _direction.sub( _vector3 );
                    _direction.normalize();
    
                    spotDirections[ spotOffset ]     = _direction.x;
                    spotDirections[ spotOffset + 1 ] = _direction.y;
                    spotDirections[ spotOffset + 2 ] = _direction.z;
    
                    spotAnglesCos[ spotLength ] = Math.cos( light.angle );
                    spotExponents[ spotLength ] = light.exponent;
    
                    spotLength += 1;
    
                } else if ( light instanceof THREE.HemisphereLight ) {
    
                    hemiCount += 1;
    
                    if ( ! light.visible ) continue;
    
                    _direction.setFromMatrixPosition( light.matrixWorld );
                    _direction.normalize();
    
                    hemiOffset = hemiLength * 3;
    
                    hemiPositions[ hemiOffset ]     = _direction.x;
                    hemiPositions[ hemiOffset + 1 ] = _direction.y;
                    hemiPositions[ hemiOffset + 2 ] = _direction.z;
    
                    skyColor = light.color;
                    groundColor = light.groundColor;
    
                    if ( _this.gammaInput ) {
    
                        intensitySq = intensity * intensity;
    
                        setColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );
                        setColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );
    
                    } else {
    
                        setColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );
                        setColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );
    
                    }
    
                    hemiLength += 1;
    
                }
    
            }
    
            // null eventual remains from removed lights
            // (this is to avoid if in shader)
    
            for ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;
            for ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;
            for ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;
            for ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;
            for ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;
    
            zlights.directional.length = dirLength;
            zlights.point.length = pointLength;
            zlights.spot.length = spotLength;
            zlights.hemi.length = hemiLength;
    
            zlights.ambient[ 0 ] = r;
            zlights.ambient[ 1 ] = g;
            zlights.ambient[ 2 ] = b;
    
        }
    
        // GL state setting
    
        this.setFaceCulling = function ( cullFace, frontFaceDirection ) {
    
            if ( cullFace === THREE.CullFaceNone ) {
    
                _gl.disable( _gl.CULL_FACE );
    
            } else {
    
                if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {
    
                    _gl.frontFace( _gl.CW );
    
                } else {
    
                    _gl.frontFace( _gl.CCW );
    
                }
    
                if ( cullFace === THREE.CullFaceBack ) {
    
                    _gl.cullFace( _gl.BACK );
    
                } else if ( cullFace === THREE.CullFaceFront ) {
    
                    _gl.cullFace( _gl.FRONT );
    
                } else {
    
                    _gl.cullFace( _gl.FRONT_AND_BACK );
    
                }
    
                _gl.enable( _gl.CULL_FACE );
    
            }
    
        };
    
        this.setMaterialFaces = function ( material ) {
    
            var doubleSided = material.side === THREE.DoubleSide;
            var flipSided = material.side === THREE.BackSide;
    
            if ( _oldDoubleSided !== doubleSided ) {
    
                if ( doubleSided ) {
    
                    _gl.disable( _gl.CULL_FACE );
    
                } else {
    
                    _gl.enable( _gl.CULL_FACE );
    
                }
    
                _oldDoubleSided = doubleSided;
    
            }
    
            if ( _oldFlipSided !== flipSided ) {
    
                if ( flipSided ) {
    
                    _gl.frontFace( _gl.CW );
    
                } else {
    
                    _gl.frontFace( _gl.CCW );
    
                }
    
                _oldFlipSided = flipSided;
    
            }
    
        };
    
        this.setDepthTest = function ( depthTest ) {
    
            if ( _oldDepthTest !== depthTest ) {
    
                if ( depthTest ) {
    
                    _gl.enable( _gl.DEPTH_TEST );
    
                } else {
    
                    _gl.disable( _gl.DEPTH_TEST );
    
                }
    
                _oldDepthTest = depthTest;
    
            }
    
        };
    
        this.setDepthWrite = function ( depthWrite ) {
    
            if ( _oldDepthWrite !== depthWrite ) {
    
                _gl.depthMask( depthWrite );
                _oldDepthWrite = depthWrite;
    
            }
    
        };
    
        function setLineWidth ( width ) {
    
            if ( width !== _oldLineWidth ) {
    
                _gl.lineWidth( width );
    
                _oldLineWidth = width;
    
            }
    
        }
    
        function setPolygonOffset ( polygonoffset, factor, units ) {
    
            if ( _oldPolygonOffset !== polygonoffset ) {
    
                if ( polygonoffset ) {
    
                    _gl.enable( _gl.POLYGON_OFFSET_FILL );
    
                } else {
    
                    _gl.disable( _gl.POLYGON_OFFSET_FILL );
    
                }
    
                _oldPolygonOffset = polygonoffset;
    
            }
    
            if ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {
    
                _gl.polygonOffset( factor, units );
    
                _oldPolygonOffsetFactor = factor;
                _oldPolygonOffsetUnits = units;
    
            }
    
        }
    
        this.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {
    
            if ( blending !== _oldBlending ) {
    
                if ( blending === THREE.NoBlending ) {
    
                    _gl.disable( _gl.BLEND );
    
                } else if ( blending === THREE.AdditiveBlending ) {
    
                    _gl.enable( _gl.BLEND );
                    _gl.blendEquation( _gl.FUNC_ADD );
                    _gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );
    
                } else if ( blending === THREE.SubtractiveBlending ) {
    
                    // TODO: Find blendFuncSeparate() combination
                    _gl.enable( _gl.BLEND );
                    _gl.blendEquation( _gl.FUNC_ADD );
                    _gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );
    
                } else if ( blending === THREE.MultiplyBlending ) {
    
                    // TODO: Find blendFuncSeparate() combination
                    _gl.enable( _gl.BLEND );
                    _gl.blendEquation( _gl.FUNC_ADD );
                    _gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );
    
                } else if ( blending === THREE.CustomBlending ) {
    
                    _gl.enable( _gl.BLEND );
    
                } else {
    
                    _gl.enable( _gl.BLEND );
                    _gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );
                    _gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );
    
                }
    
                _oldBlending = blending;
    
            }
    
            if ( blending === THREE.CustomBlending ) {
    
                if ( blendEquation !== _oldBlendEquation ) {
    
                    _gl.blendEquation( paramThreeToGL( blendEquation ) );
    
                    _oldBlendEquation = blendEquation;
    
                }
    
                if ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {
    
                    _gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );
    
                    _oldBlendSrc = blendSrc;
                    _oldBlendDst = blendDst;
    
                }
    
            } else {
    
                _oldBlendEquation = null;
                _oldBlendSrc = null;
                _oldBlendDst = null;
    
            }
    
        };
    
        // Textures
    
        function setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {
    
            var extension;
    
            if ( isImagePowerOfTwo ) {
    
                _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
                _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );
    
                _gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
                _gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );
    
            } else {
    
                _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
                _gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
    
                _gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
                _gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );
    
            }
    
            extension = extensions.get( 'EXT_texture_filter_anisotropic' );
    
            if ( extension && texture.type !== THREE.FloatType ) {
    
                if ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {
    
                    _gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );
                    texture.__oldAnisotropy = texture.anisotropy;
    
                }
    
            }
    
        }
    
        this.uploadTexture = function ( texture ) {
    
            if ( texture.__webglInit === undefined ) {
    
                texture.__webglInit = true;
    
                texture.addEventListener( 'dispose', onTextureDispose );
    
                texture.__webglTexture = _gl.createTexture();
    
                _this.info.memory.textures ++;
    
            }
    
            _gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );
    
            _gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
            _gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
            _gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
    
            texture.image = clampToMaxSize( texture.image, _maxTextureSize );
    
            var image = texture.image,
            isImagePowerOfTwo = THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height ),
            glFormat = paramThreeToGL( texture.format ),
            glType = paramThreeToGL( texture.type );
    
            setTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );
    
            var mipmap, mipmaps = texture.mipmaps;
    
            if ( texture instanceof THREE.DataTexture ) {
    
                // use manually created mipmaps if available
                // if there are no manual mipmaps
                // set 0 level mipmap and then use GL to generate other mipmap levels
    
                if ( mipmaps.length > 0 && isImagePowerOfTwo ) {
    
                    for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
    
                        mipmap = mipmaps[ i ];
                        _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
    
                    }
    
                    texture.generateMipmaps = false;
    
                } else {
    
                    _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );
    
                }
    
            } else if ( texture instanceof THREE.CompressedTexture ) {
    
                for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
    
                    mipmap = mipmaps[ i ];
    
                    if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {
    
                        if ( getCompressedTextureFormats().indexOf( glFormat ) > -1 ) {
    
                            _gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
    
                        } else {
    
                            console.warn( "Attempt to load unsupported compressed texture format" );
    
                        }
    
                    } else {
    
                        _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
    
                    }
    
                }
    
            } else { // regular Texture (image, video, canvas)
    
                // use manually created mipmaps if available
                // if there are no manual mipmaps
                // set 0 level mipmap and then use GL to generate other mipmap levels
    
                if ( mipmaps.length > 0 && isImagePowerOfTwo ) {
    
                    for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
    
                        mipmap = mipmaps[ i ];
                        _gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );
    
                    }
    
                    texture.generateMipmaps = false;
    
                } else {
    
                    _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );
    
                }
    
            }
    
            if ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
    
            texture.needsUpdate = false;
    
            if ( texture.onUpdate ) texture.onUpdate();
    
        };
    
        this.setTexture = function ( texture, slot ) {
    
            _gl.activeTexture( _gl.TEXTURE0 + slot );
    
            if ( texture.needsUpdate ) {
    
                _this.uploadTexture( texture );
    
            } else {
    
                _gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );
    
            }
    
        };
    
        function clampToMaxSize ( image, maxSize ) {
    
            if ( image.width > maxSize || image.height > maxSize ) {
    
                // Warning: Scaling through the canvas will only work with images that use
                // premultiplied alpha.
    
                var scale = maxSize / Math.max( image.width, image.height );
    
                var canvas = document.createElement( 'canvas' );
                canvas.width = Math.floor( image.width * scale );
                canvas.height = Math.floor( image.height * scale );
    
                var context = canvas.getContext( '2d' );
                context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );
    
                console.log( 'THREE.WebGLRenderer:', image, 'is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height + '.' );
    
                return canvas;
    
            }
    
            return image;
    
        }
    
        function setCubeTexture ( texture, slot ) {
    
            if ( texture.image.length === 6 ) {
    
                if ( texture.needsUpdate ) {
    
                    if ( ! texture.image.__webglTextureCube ) {
    
                        texture.addEventListener( 'dispose', onTextureDispose );
    
                        texture.image.__webglTextureCube = _gl.createTexture();
    
                        _this.info.memory.textures ++;
    
                    }
    
                    _gl.activeTexture( _gl.TEXTURE0 + slot );
                    _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );
    
                    _gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
    
                    var isCompressed = texture instanceof THREE.CompressedTexture;
                    var isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;
    
                    var cubeImage = [];
    
                    for ( var i = 0; i < 6; i ++ ) {
    
                        if ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {
    
                            cubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );
    
                        } else {
    
                            cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
    
                        }
    
                    }
    
                    var image = cubeImage[ 0 ],
                    isImagePowerOfTwo = THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height ),
                    glFormat = paramThreeToGL( texture.format ),
                    glType = paramThreeToGL( texture.type );
    
                    setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );
    
                    for ( var i = 0; i < 6; i ++ ) {
    
                        if ( ! isCompressed ) {
    
                            if ( isDataTexture ) {
    
                                _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
    
                            } else {
    
                                _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );
    
                            }
    
                        } else {
    
                            var mipmap, mipmaps = cubeImage[ i ].mipmaps;
    
                            for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {
    
                                mipmap = mipmaps[ j ];
    
                                if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {
    
                                    if ( getCompressedTextureFormats().indexOf( glFormat ) > -1 ) {
    
                                        _gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
    
                                    } else {
    
                                        console.warn( "Attempt to load unsupported compressed texture format" );
    
                                    }
    
                                } else {
    
                                    _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
    
                                }
    
                            }
    
                        }
    
                    }
    
                    if ( texture.generateMipmaps && isImagePowerOfTwo ) {
    
                        _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
    
                    }
    
                    texture.needsUpdate = false;
    
                    if ( texture.onUpdate ) texture.onUpdate();
    
                } else {
    
                    _gl.activeTexture( _gl.TEXTURE0 + slot );
                    _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );
    
                }
    
            }
    
        }
    
        function setCubeTextureDynamic ( texture, slot ) {
    
            _gl.activeTexture( _gl.TEXTURE0 + slot );
            _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );
    
        }
    
        // Render targets
    
        function setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {
    
            _gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
            _gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );
    
        }
    
        function setupRenderBuffer ( renderbuffer, renderTarget  ) {
    
            _gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );
    
            if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
    
                _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
                _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
    
            /* For some reason this is not working. Defaulting to RGBA4.
            } else if ( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
    
                _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );
                _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
            */
            } else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
    
                _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
                _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
    
            } else {
    
                _gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );
    
            }
    
        }
    
        this.setRenderTarget = function ( renderTarget ) {
    
            var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
    
            if ( renderTarget && renderTarget.__webglFramebuffer === undefined ) {
    
                if ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;
                if ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;
    
                renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
    
                renderTarget.__webglTexture = _gl.createTexture();
    
                _this.info.memory.textures ++;
    
                // Setup texture, create render and frame buffers
    
                var isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height ),
                    glFormat = paramThreeToGL( renderTarget.format ),
                    glType = paramThreeToGL( renderTarget.type );
    
                if ( isCube ) {
    
                    renderTarget.__webglFramebuffer = [];
                    renderTarget.__webglRenderbuffer = [];
    
                    _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
                    setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );
    
                    for ( var i = 0; i < 6; i ++ ) {
    
                        renderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();
                        renderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();
    
                        _gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
    
                        setupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );
                        setupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );
    
                    }
    
                    if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
    
                } else {
    
                    renderTarget.__webglFramebuffer = _gl.createFramebuffer();
    
                    if ( renderTarget.shareDepthFrom ) {
    
                        renderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;
    
                    } else {
    
                        renderTarget.__webglRenderbuffer = _gl.createRenderbuffer();
    
                    }
    
                    _gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
                    setTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );
    
                    _gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
    
                    setupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );
    
                    if ( renderTarget.shareDepthFrom ) {
    
                        if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
    
                            _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );
    
                        } else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
    
                            _gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );
    
                        }
    
                    } else {
    
                        setupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );
    
                    }
    
                    if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
    
                }
    
                // Release everything
    
                if ( isCube ) {
    
                    _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );
    
                } else {
    
                    _gl.bindTexture( _gl.TEXTURE_2D, null );
    
                }
    
                _gl.bindRenderbuffer( _gl.RENDERBUFFER, null );
                _gl.bindFramebuffer( _gl.FRAMEBUFFER, null );
    
            }
    
            var framebuffer, width, height, vx, vy;
    
            if ( renderTarget ) {
    
                if ( isCube ) {
    
                    framebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];
    
                } else {
    
                    framebuffer = renderTarget.__webglFramebuffer;
    
                }
    
                width = renderTarget.width;
                height = renderTarget.height;
    
                vx = 0;
                vy = 0;
    
            } else {
    
                framebuffer = null;
    
                width = _viewportWidth;
                height = _viewportHeight;
    
                vx = _viewportX;
                vy = _viewportY;
    
            }
    
            if ( framebuffer !== _currentFramebuffer ) {
    
                _gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
                _gl.viewport( vx, vy, width, height );
    
                _currentFramebuffer = framebuffer;
    
            }
    
            _currentWidth = width;
            _currentHeight = height;
    
        };
    
        function updateRenderTargetMipmap ( renderTarget ) {
    
            if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {
    
                _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
                _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
                _gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );
    
            } else {
    
                _gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
                _gl.generateMipmap( _gl.TEXTURE_2D );
                _gl.bindTexture( _gl.TEXTURE_2D, null );
    
            }
    
        }
    
        // Fallback filters for non-power-of-2 textures
    
        function filterFallback ( f ) {
    
            if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {
    
                return _gl.NEAREST;
    
            }
    
            return _gl.LINEAR;
    
        }
    
        // Map three.js constants to WebGL constants
    
        function paramThreeToGL ( p ) {
    
            var extension;
    
            if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
            if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
            if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;
    
            if ( p === THREE.NearestFilter ) return _gl.NEAREST;
            if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
            if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;
    
            if ( p === THREE.LinearFilter ) return _gl.LINEAR;
            if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
            if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;
    
            if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
            if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
            if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
            if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;
    
            if ( p === THREE.ByteType ) return _gl.BYTE;
            if ( p === THREE.ShortType ) return _gl.SHORT;
            if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
            if ( p === THREE.IntType ) return _gl.INT;
            if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
            if ( p === THREE.FloatType ) return _gl.FLOAT;
    
            if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
            if ( p === THREE.RGBFormat ) return _gl.RGB;
            if ( p === THREE.RGBAFormat ) return _gl.RGBA;
            if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
            if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
    
            if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
            if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
            if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;
    
            if ( p === THREE.ZeroFactor ) return _gl.ZERO;
            if ( p === THREE.OneFactor ) return _gl.ONE;
            if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
            if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
            if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
            if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
            if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
            if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;
    
            if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
            if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
            if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;
    
            extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
    
            if ( extension !== null ) {
    
                if ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                if ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                if ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                if ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
    
            }
    
            extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
    
            if ( extension !== null ) {
    
                if ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                if ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                if ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                if ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
    
            }
    
            extension = extensions.get( 'EXT_blend_minmax' );
    
            if ( extension !== null ) {
    
                if ( p === THREE.MinEquation ) return extension.MIN_EXT;
                if ( p === THREE.MaxEquation ) return extension.MAX_EXT;
    
            }
    
            return 0;
    
        }
    
        // Allocations
    
        function allocateBones ( object ) {
    
            if ( _supportsBoneTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {
    
                return 1024;
    
            } else {
    
                // default for when object is not specified
                // ( for example when prebuilding shader
                //   to be used with multiple objects )
                //
                //  - leave some extra space for other uniforms
                //  - limit here is ANGLE's 254 max uniform vectors
                //    (up to 54 should be safe)
    
                var nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );
                var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );
    
                var maxBones = nVertexMatrices;
    
                if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {
    
                    maxBones = Math.min( object.skeleton.bones.length, maxBones );
    
                    if ( maxBones < object.skeleton.bones.length ) {
    
                        console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );
    
                    }
    
                }
    
                return maxBones;
    
            }
    
        }
    
        function allocateLights( lights ) {
    
            var dirLights = 0;
            var pointLights = 0;
            var spotLights = 0;
            var hemiLights = 0;
    
            for ( var l = 0, ll = lights.length; l < ll; l ++ ) {
    
                var light = lights[ l ];
    
                if ( light.onlyShadow || light.visible === false ) continue;
    
                if ( light instanceof THREE.DirectionalLight ) dirLights ++;
                if ( light instanceof THREE.PointLight ) pointLights ++;
                if ( light instanceof THREE.SpotLight ) spotLights ++;
                if ( light instanceof THREE.HemisphereLight ) hemiLights ++;
    
            }
    
            return { 'directional': dirLights, 'point': pointLights, 'spot': spotLights, 'hemi': hemiLights };
    
        }
    
        function allocateShadows( lights ) {
    
            var maxShadows = 0;
    
            for ( var l = 0, ll = lights.length; l < ll; l ++ ) {
    
                var light = lights[ l ];
    
                if ( ! light.castShadow ) continue;
    
                if ( light instanceof THREE.SpotLight ) maxShadows ++;
                if ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;
    
            }
    
            return maxShadows;
    
        }
    
        // DEPRECATED
        
        this.initMaterial = function () {
    
            console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
    
        };
    
        this.addPrePlugin = function () {
    
            console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
    
        };
    
        this.addPostPlugin = function () {
    
            console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
    
        };
    
        this.updateShadowMap = function () {
    
            console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
    
        };
    
    };
    
    // File:src/renderers/WebGLRenderTarget.js
    
    /**
     * @author szimek / https://github.com/szimek/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.WebGLRenderTarget = function ( width, height, options ) {
    
        this.width = width;
        this.height = height;
    
        options = options || {};
    
        this.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;
        this.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;
    
        this.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;
        this.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;
    
        this.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;
    
        this.offset = new THREE.Vector2( 0, 0 );
        this.repeat = new THREE.Vector2( 1, 1 );
    
        this.format = options.format !== undefined ? options.format : THREE.RGBAFormat;
        this.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;
    
        this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
        this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
    
        this.generateMipmaps = true;
    
        this.shareDepthFrom = null;
    
    };
    
    THREE.WebGLRenderTarget.prototype = {
    
        constructor: THREE.WebGLRenderTarget,
    
        setSize: function ( width, height ) {
    
            this.width = width;
            this.height = height;
    
        },
    
        clone: function () {
    
            var tmp = new THREE.WebGLRenderTarget( this.width, this.height );
    
            tmp.wrapS = this.wrapS;
            tmp.wrapT = this.wrapT;
    
            tmp.magFilter = this.magFilter;
            tmp.minFilter = this.minFilter;
    
            tmp.anisotropy = this.anisotropy;
    
            tmp.offset.copy( this.offset );
            tmp.repeat.copy( this.repeat );
    
            tmp.format = this.format;
            tmp.type = this.type;
    
            tmp.depthBuffer = this.depthBuffer;
            tmp.stencilBuffer = this.stencilBuffer;
    
            tmp.generateMipmaps = this.generateMipmaps;
    
            tmp.shareDepthFrom = this.shareDepthFrom;
    
            return tmp;
    
        },
    
        dispose: function () {
    
            this.dispatchEvent( { type: 'dispose' } );
    
        }
    
    };
    
    THREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );
    
    // File:src/renderers/WebGLRenderTargetCube.js
    
    /**
     * @author alteredq / http://alteredqualia.com
     */
    
    THREE.WebGLRenderTargetCube = function ( width, height, options ) {
    
        THREE.WebGLRenderTarget.call( this, width, height, options );
    
        this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
    
    };
    
    THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );
    
    // File:src/renderers/webgl/WebGLExtensions.js
    
    THREE.WebGLExtensions = function ( gl ) {
    
        var extensions = {};
    
        this.get = function ( name ) {
    
            if ( extensions[ name ] !== undefined ) {
    
                return extensions[ name ];
    
            }
    
            var extension;
    
            switch ( name ) {
            
                case 'OES_texture_float':
                    extension = gl.getExtension( 'OES_texture_float' );
                    break;
    
                case 'OES_texture_float_linear':
                    extension = gl.getExtension( 'OES_texture_float_linear' );
                    break;
    
                case 'OES_standard_derivatives':
                    extension = gl.getExtension( 'OES_standard_derivatives' );
                    break;
    
                case 'EXT_texture_filter_anisotropic':
                    extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
                    break;
    
                case 'WEBGL_compressed_texture_s3tc':
                    extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
                    break;
    
                case 'WEBGL_compressed_texture_pvrtc':
                    extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
                    break;
    
                case 'OES_element_index_uint':
                    extension = gl.getExtension( 'OES_element_index_uint' );
                    break;
    
                case 'EXT_blend_minmax':
                    extension = gl.getExtension( 'EXT_blend_minmax' );
                    break;
    
                case 'EXT_frag_depth':
                    extension = gl.getExtension( 'EXT_frag_depth' );
                    break;
    
            }
    
            if ( extension === null ) {
    
                console.log( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
    
            }
    
            extensions[ name ] = extension;
    
            return extension;
    
        };
    
    };
    
    // File:src/renderers/webgl/WebGLProgram.js
    
    THREE.WebGLProgram = ( function () {
    
        var programIdCount = 0;
    
        var generateDefines = function ( defines ) {
    
            var value, chunk, chunks = [];
    
            for ( var d in defines ) {
    
                value = defines[ d ];
                if ( value === false ) continue;
    
                chunk = "#define " + d + " " + value;
                chunks.push( chunk );
    
            }
    
            return chunks.join( "\n" );
    
        };
    
        var cacheUniformLocations = function ( gl, program, identifiers ) {
    
            var uniforms = {};
    
            for ( var i = 0, l = identifiers.length; i < l; i ++ ) {
    
                var id = identifiers[ i ];
                uniforms[ id ] = gl.getUniformLocation( program, id );
    
            }
    
            return uniforms;
    
        };
    
        var cacheAttributeLocations = function ( gl, program, identifiers ) {
    
            var attributes = {};
    
            for ( var i = 0, l = identifiers.length; i < l; i ++ ) {
    
                var id = identifiers[ i ];
                attributes[ id ] = gl.getAttribLocation( program, id );
    
            }
    
            return attributes;
    
        };
    
        return function ( renderer, code, material, parameters ) {
    
            var _this = renderer;
            var _gl = _this.context;
    
            var defines = material.defines;
            var uniforms = material.__webglShader.uniforms;
            var attributes = material.attributes;
    
            var vertexShader = material.__webglShader.vertexShader;
            var fragmentShader = material.__webglShader.fragmentShader;
    
            var index0AttributeName = material.index0AttributeName;
    
            if ( index0AttributeName === undefined && parameters.morphTargets === true ) {
    
                // programs with morphTargets displace position out of attribute 0
    
                index0AttributeName = 'position';
    
            }
    
            var shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
    
            if ( parameters.shadowMapType === THREE.PCFShadowMap ) {
    
                shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    
            } else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {
    
                shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
    
            }
    
            // console.log( "building new program " );
    
            //
    
            var customDefines = generateDefines( defines );
    
            //
    
            var program = _gl.createProgram();
    
            var prefix_vertex, prefix_fragment;
    
            if ( material instanceof THREE.RawShaderMaterial ) {
    
                prefix_vertex = '';
                prefix_fragment = '';
    
            } else {
    
                prefix_vertex = [
    
                    "precision " + parameters.precision + " float;",
                    "precision " + parameters.precision + " int;",
    
                    customDefines,
    
                    parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
    
                    _this.gammaInput ? "#define GAMMA_INPUT" : "",
                    _this.gammaOutput ? "#define GAMMA_OUTPUT" : "",
    
                    "#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
                    "#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
                    "#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
                    "#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,
    
                    "#define MAX_SHADOWS " + parameters.maxShadows,
    
                    "#define MAX_BONES " + parameters.maxBones,
    
                    parameters.map ? "#define USE_MAP" : "",
                    parameters.envMap ? "#define USE_ENVMAP" : "",
                    parameters.lightMap ? "#define USE_LIGHTMAP" : "",
                    parameters.bumpMap ? "#define USE_BUMPMAP" : "",
                    parameters.normalMap ? "#define USE_NORMALMAP" : "",
                    parameters.specularMap ? "#define USE_SPECULARMAP" : "",
                    parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
                    parameters.vertexColors ? "#define USE_COLOR" : "",
    
                    parameters.skinning ? "#define USE_SKINNING" : "",
                    parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",
    
                    parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
                    parameters.morphNormals ? "#define USE_MORPHNORMALS" : "",
                    parameters.wrapAround ? "#define WRAP_AROUND" : "",
                    parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
                    parameters.flipSided ? "#define FLIP_SIDED" : "",
    
                    parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                    parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
                    parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
                    parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",
    
                    parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    
                    parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                    //_this._glExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    
    
                    "uniform mat4 modelMatrix;",
                    "uniform mat4 modelViewMatrix;",
                    "uniform mat4 projectionMatrix;",
                    "uniform mat4 viewMatrix;",
                    "uniform mat3 normalMatrix;",
                    "uniform vec3 cameraPosition;",
    
                    "attribute vec3 position;",
                    "attribute vec3 normal;",
                    "attribute vec2 uv;",
                    "attribute vec2 uv2;",
    
                    "#ifdef USE_COLOR",
    
                    "	attribute vec3 color;",
    
                    "#endif",
    
                    "#ifdef USE_MORPHTARGETS",
    
                    "	attribute vec3 morphTarget0;",
                    "	attribute vec3 morphTarget1;",
                    "	attribute vec3 morphTarget2;",
                    "	attribute vec3 morphTarget3;",
    
                    "	#ifdef USE_MORPHNORMALS",
    
                    "		attribute vec3 morphNormal0;",
                    "		attribute vec3 morphNormal1;",
                    "		attribute vec3 morphNormal2;",
                    "		attribute vec3 morphNormal3;",
    
                    "	#else",
    
                    "		attribute vec3 morphTarget4;",
                    "		attribute vec3 morphTarget5;",
                    "		attribute vec3 morphTarget6;",
                    "		attribute vec3 morphTarget7;",
    
                    "	#endif",
    
                    "#endif",
    
                    "#ifdef USE_SKINNING",
    
                    "	attribute vec4 skinIndex;",
                    "	attribute vec4 skinWeight;",
    
                    "#endif",
    
                    ""
    
                ].join( '\n' );
    
                prefix_fragment = [
    
                    "precision " + parameters.precision + " float;",
                    "precision " + parameters.precision + " int;",
    
                    ( parameters.bumpMap || parameters.normalMap ) ? "#extension GL_OES_standard_derivatives : enable" : "",
    
                    customDefines,
    
                    "#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
                    "#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
                    "#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
                    "#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,
    
                    "#define MAX_SHADOWS " + parameters.maxShadows,
    
                    parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest: "",
    
                    _this.gammaInput ? "#define GAMMA_INPUT" : "",
                    _this.gammaOutput ? "#define GAMMA_OUTPUT" : "",
    
                    ( parameters.useFog && parameters.fog ) ? "#define USE_FOG" : "",
                    ( parameters.useFog && parameters.fogExp ) ? "#define FOG_EXP2" : "",
    
                    parameters.map ? "#define USE_MAP" : "",
                    parameters.envMap ? "#define USE_ENVMAP" : "",
                    parameters.lightMap ? "#define USE_LIGHTMAP" : "",
                    parameters.bumpMap ? "#define USE_BUMPMAP" : "",
                    parameters.normalMap ? "#define USE_NORMALMAP" : "",
                    parameters.specularMap ? "#define USE_SPECULARMAP" : "",
                    parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
                    parameters.vertexColors ? "#define USE_COLOR" : "",
    
                    parameters.metal ? "#define METAL" : "",
                    parameters.wrapAround ? "#define WRAP_AROUND" : "",
                    parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
                    parameters.flipSided ? "#define FLIP_SIDED" : "",
    
                    parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
                    parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
                    parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
                    parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",
    
                    parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
                    //_this._glExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    
                    "uniform mat4 viewMatrix;",
                    "uniform vec3 cameraPosition;",
                    ""
    
                ].join( '\n' );
    
            }
    
            var glVertexShader = new THREE.WebGLShader( _gl, _gl.VERTEX_SHADER, prefix_vertex + vertexShader );
            var glFragmentShader = new THREE.WebGLShader( _gl, _gl.FRAGMENT_SHADER, prefix_fragment + fragmentShader );
    
            _gl.attachShader( program, glVertexShader );
            _gl.attachShader( program, glFragmentShader );
    
            if ( index0AttributeName !== undefined ) {
    
                // Force a particular attribute to index 0.
                // because potentially expensive emulation is done by browser if attribute 0 is disabled.
                // And, color, for example is often automatically bound to index 0 so disabling it
    
                _gl.bindAttribLocation( program, 0, index0AttributeName );
    
            }
    
            _gl.linkProgram( program );
    
            if ( _gl.getProgramParameter( program, _gl.LINK_STATUS ) === false ) {
    
                console.error( 'THREE.WebGLProgram: Could not initialise shader.' );
                console.error( 'gl.VALIDATE_STATUS', _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) );
                console.error( 'gl.getError()', _gl.getError() );
    
            }
    
            if ( _gl.getProgramInfoLog( program ) !== '' ) {
    
                console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', _gl.getProgramInfoLog( program ) );
    
            }
    
            // clean up
    
            _gl.deleteShader( glVertexShader );
            _gl.deleteShader( glFragmentShader );
    
            // cache uniform locations
    
            var identifiers = [
    
                'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition', 'morphTargetInfluences', 'bindMatrix', 'bindMatrixInverse'
    
            ];
    
            if ( parameters.useVertexTexture ) {
    
                identifiers.push( 'boneTexture' );
                identifiers.push( 'boneTextureWidth' );
                identifiers.push( 'boneTextureHeight' );
    
            } else {
    
                identifiers.push( 'boneGlobalMatrices' );
    
            }
    
            if ( parameters.logarithmicDepthBuffer ) {
    
                identifiers.push('logDepthBufFC');
    
            }
    
    
            for ( var u in uniforms ) {
    
                identifiers.push( u );
    
            }
    
            this.uniforms = cacheUniformLocations( _gl, program, identifiers );
    
            // cache attributes locations
    
            identifiers = [
    
                "position", "normal", "uv", "uv2", "tangent", "color",
                "skinIndex", "skinWeight", "lineDistance"
    
            ];
    
            for ( var i = 0; i < parameters.maxMorphTargets; i ++ ) {
    
                identifiers.push( "morphTarget" + i );
    
            }
    
            for ( var i = 0; i < parameters.maxMorphNormals; i ++ ) {
    
                identifiers.push( "morphNormal" + i );
    
            }
    
            for ( var a in attributes ) {
    
                identifiers.push( a );
    
            }
    
            this.attributes = cacheAttributeLocations( _gl, program, identifiers );
            this.attributesKeys = Object.keys( this.attributes );
    
            //
    
            this.id = programIdCount ++;
            this.code = code;
            this.usedTimes = 1;
            this.program = program;
            this.vertexShader = glVertexShader;
            this.fragmentShader = glFragmentShader;
    
            return this;
    
        };
    
    } )();
    
    // File:src/renderers/webgl/WebGLShader.js
    
    THREE.WebGLShader = ( function () {
    
        var addLineNumbers = function ( string ) {
    
            var lines = string.split( '\n' );
    
            for ( var i = 0; i < lines.length; i ++ ) {
    
                lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];
    
            }
    
            return lines.join( '\n' );
    
        };
    
        return function ( gl, type, string ) {
    
            var shader = gl.createShader( type ); 
    
            gl.shaderSource( shader, string );
            gl.compileShader( shader );
    
            if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {
    
                console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );
    
            }
    
            if ( gl.getShaderInfoLog( shader ) !== '' ) {
    
                console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', gl.getShaderInfoLog( shader ) );
                console.warn( addLineNumbers( string ) );
    
            }
    
            // --enable-privileged-webgl-extension
            // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
    
            return shader;
    
        };
    
    } )();
    
    // File:src/renderers/webgl/plugins/LensFlarePlugin.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.LensFlarePlugin = function ( renderer, flares ) {
    
        var gl = renderer.context;
    
        var vertexBuffer, elementBuffer;
        var program, attributes, uniforms;
        var hasVertexTexture;
    
        var tempTexture, occlusionTexture;
    
        var init = function () {
    
            var vertices = new Float32Array( [
                -1, -1,  0, 0,
                 1, -1,  1, 0,
                 1,  1,  1, 1,
                -1,  1,  0, 1
            ] );
    
            var faces = new Uint16Array( [
                0, 1, 2,
                0, 2, 3
            ] );
    
            // buffers
    
            vertexBuffer     = gl.createBuffer();
            elementBuffer    = gl.createBuffer();
    
            gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
            gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );
    
            gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
            gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );
    
            // textures
    
            tempTexture      = gl.createTexture();
            occlusionTexture = gl.createTexture();
    
            gl.bindTexture( gl.TEXTURE_2D, tempTexture );
            gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
    
            gl.bindTexture( gl.TEXTURE_2D, occlusionTexture );
            gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
            gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
    
            hasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;
    
            var shader;
    
            if ( hasVertexTexture ) {
    
                shader = {
    
                    vertexShader: [
    
                        "uniform lowp int renderType;",
    
                        "uniform vec3 screenPosition;",
                        "uniform vec2 scale;",
                        "uniform float rotation;",
    
                        "uniform sampler2D occlusionMap;",
    
                        "attribute vec2 position;",
                        "attribute vec2 uv;",
    
                        "varying vec2 vUV;",
                        "varying float vVisibility;",
    
                        "void main() {",
    
                            "vUV = uv;",
    
                            "vec2 pos = position;",
    
                            "if( renderType == 2 ) {",
    
                                "vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
                                "visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
                                "visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
                                "visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
                                "visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
                                "visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
                                "visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
                                "visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
                                "visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",
    
                                "vVisibility =        visibility.r / 9.0;",
                                "vVisibility *= 1.0 - visibility.g / 9.0;",
                                "vVisibility *=       visibility.b / 9.0;",
                                "vVisibility *= 1.0 - visibility.a / 9.0;",
    
                                "pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
                                "pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",
    
                            "}",
    
                            "gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",
    
                        "}"
    
                    ].join( "\n" ),
    
                    fragmentShader: [
    
                        "uniform lowp int renderType;",
    
                        "uniform sampler2D map;",
                        "uniform float opacity;",
                        "uniform vec3 color;",
    
                        "varying vec2 vUV;",
                        "varying float vVisibility;",
    
                        "void main() {",
    
                            // pink square
    
                            "if( renderType == 0 ) {",
    
                                "gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",
    
                            // restore
    
                            "} else if( renderType == 1 ) {",
    
                                "gl_FragColor = texture2D( map, vUV );",
    
                            // flare
    
                            "} else {",
    
                                "vec4 texture = texture2D( map, vUV );",
                                "texture.a *= opacity * vVisibility;",
                                "gl_FragColor = texture;",
                                "gl_FragColor.rgb *= color;",
    
                            "}",
    
                        "}"
    
                    ].join( "\n" )
    
                };
    
            } else {
    
                shader = {
    
                    vertexShader: [
    
                        "uniform lowp int renderType;",
    
                        "uniform vec3 screenPosition;",
                        "uniform vec2 scale;",
                        "uniform float rotation;",
    
                        "attribute vec2 position;",
                        "attribute vec2 uv;",
    
                        "varying vec2 vUV;",
    
                        "void main() {",
    
                            "vUV = uv;",
    
                            "vec2 pos = position;",
    
                            "if( renderType == 2 ) {",
    
                                "pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
                                "pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",
    
                            "}",
    
                            "gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",
    
                        "}"
    
                    ].join( "\n" ),
    
                    fragmentShader: [
    
                        "precision mediump float;",
    
                        "uniform lowp int renderType;",
    
                        "uniform sampler2D map;",
                        "uniform sampler2D occlusionMap;",
                        "uniform float opacity;",
                        "uniform vec3 color;",
    
                        "varying vec2 vUV;",
    
                        "void main() {",
    
                            // pink square
    
                            "if( renderType == 0 ) {",
    
                                "gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",
    
                            // restore
    
                            "} else if( renderType == 1 ) {",
    
                                "gl_FragColor = texture2D( map, vUV );",
    
                            // flare
    
                            "} else {",
    
                                "float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;",
                                "visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;",
                                "visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;",
                                "visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",
                                "visibility = ( 1.0 - visibility / 4.0 );",
    
                                "vec4 texture = texture2D( map, vUV );",
                                "texture.a *= opacity * visibility;",
                                "gl_FragColor = texture;",
                                "gl_FragColor.rgb *= color;",
    
                            "}",
    
                        "}"
    
                    ].join( "\n" )
    
                };
    
            }
    
            program = createProgram( shader );
    
            attributes = {
                vertex: gl.getAttribLocation ( program, "position" ),
                uv:     gl.getAttribLocation ( program, "uv" )
            }
    
            uniforms = {
                renderType:     gl.getUniformLocation( program, "renderType" ),
                map:            gl.getUniformLocation( program, "map" ),
                occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
                opacity:        gl.getUniformLocation( program, "opacity" ),
                color:          gl.getUniformLocation( program, "color" ),
                scale:          gl.getUniformLocation( program, "scale" ),
                rotation:       gl.getUniformLocation( program, "rotation" ),
                screenPosition: gl.getUniformLocation( program, "screenPosition" )
            };
    
        };
    
        /*
         * Render lens flares
         * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
         *         reads these back and calculates occlusion.
         */
    
        this.render = function ( scene, camera, viewportWidth, viewportHeight ) {
    
            if ( flares.length === 0 ) return;
    
            var tempPosition = new THREE.Vector3();
    
            var invAspect = viewportHeight / viewportWidth,
                halfViewportWidth = viewportWidth * 0.5,
                halfViewportHeight = viewportHeight * 0.5;
    
            var size = 16 / viewportHeight,
                scale = new THREE.Vector2( size * invAspect, size );
    
            var screenPosition = new THREE.Vector3( 1, 1, 0 ),
                screenPositionPixels = new THREE.Vector2( 1, 1 );
    
            if ( program === undefined ) {
    
                init();
    
            }
    
            gl.useProgram( program );
    
            gl.enableVertexAttribArray( attributes.vertex );
            gl.enableVertexAttribArray( attributes.uv );
    
            // loop through all lens flares to update their occlusion and positions
            // setup gl and common used attribs/unforms
    
            gl.uniform1i( uniforms.occlusionMap, 0 );
            gl.uniform1i( uniforms.map, 1 );
    
            gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
            gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
            gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );
    
            gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
    
            gl.disable( gl.CULL_FACE );
            gl.depthMask( false );
    
            for ( var i = 0, l = flares.length; i < l; i ++ ) {
    
                size = 16 / viewportHeight;
                scale.set( size * invAspect, size );
    
                // calc object screen position
    
                var flare = flares[ i ];
                
                tempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );
    
                tempPosition.applyMatrix4( camera.matrixWorldInverse );
                tempPosition.applyProjection( camera.projectionMatrix );
    
                // setup arrays for gl programs
    
                screenPosition.copy( tempPosition )
    
                screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
                screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;
    
                // screen cull
    
                if ( hasVertexTexture || (
                    screenPositionPixels.x > 0 &&
                    screenPositionPixels.x < viewportWidth &&
                    screenPositionPixels.y > 0 &&
                    screenPositionPixels.y < viewportHeight ) ) {
    
                    // save current RGB to temp texture
    
                    gl.activeTexture( gl.TEXTURE1 );
                    gl.bindTexture( gl.TEXTURE_2D, tempTexture );
                    gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );
    
    
                    // render pink quad
    
                    gl.uniform1i( uniforms.renderType, 0 );
                    gl.uniform2f( uniforms.scale, scale.x, scale.y );
                    gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
    
                    gl.disable( gl.BLEND );
                    gl.enable( gl.DEPTH_TEST );
    
                    gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
    
    
                    // copy result to occlusionMap
    
                    gl.activeTexture( gl.TEXTURE0 );
                    gl.bindTexture( gl.TEXTURE_2D, occlusionTexture );
                    gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );
    
    
                    // restore graphics
    
                    gl.uniform1i( uniforms.renderType, 1 );
                    gl.disable( gl.DEPTH_TEST );
    
                    gl.activeTexture( gl.TEXTURE1 );
                    gl.bindTexture( gl.TEXTURE_2D, tempTexture );
                    gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
    
    
                    // update object positions
    
                    flare.positionScreen.copy( screenPosition )
    
                    if ( flare.customUpdateCallback ) {
    
                        flare.customUpdateCallback( flare );
    
                    } else {
    
                        flare.updateLensFlares();
    
                    }
    
                    // render flares
    
                    gl.uniform1i( uniforms.renderType, 2 );
                    gl.enable( gl.BLEND );
    
                    for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {
    
                        var sprite = flare.lensFlares[ j ];
    
                        if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {
    
                            screenPosition.x = sprite.x;
                            screenPosition.y = sprite.y;
                            screenPosition.z = sprite.z;
    
                            size = sprite.size * sprite.scale / viewportHeight;
    
                            scale.x = size * invAspect;
                            scale.y = size;
    
                            gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
                            gl.uniform2f( uniforms.scale, scale.x, scale.y );
                            gl.uniform1f( uniforms.rotation, sprite.rotation );
    
                            gl.uniform1f( uniforms.opacity, sprite.opacity );
                            gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );
    
                            renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
                            renderer.setTexture( sprite.texture, 1 );
    
                            gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
    
                        }
    
                    }
    
                }
    
            }
    
            // restore gl
    
            gl.enable( gl.CULL_FACE );
            gl.enable( gl.DEPTH_TEST );
            gl.depthMask( true );
    
            renderer.resetGLState();
    
        };
    
        function createProgram ( shader ) {
    
            var program = gl.createProgram();
    
            var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
            var vertexShader = gl.createShader( gl.VERTEX_SHADER );
    
            var prefix = "precision " + renderer.getPrecision() + " float;\n";
    
            gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
            gl.shaderSource( vertexShader, prefix + shader.vertexShader );
    
            gl.compileShader( fragmentShader );
            gl.compileShader( vertexShader );
    
            gl.attachShader( program, fragmentShader );
            gl.attachShader( program, vertexShader );
    
            gl.linkProgram( program );
    
            return program;
    
        }
    
    };
    
    // File:src/renderers/webgl/plugins/ShadowMapPlugin.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.ShadowMapPlugin = function ( _renderer, _lights, _webglObjects, _webglObjectsImmediate ) {
    
        var _gl = _renderer.context;
    
        var _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,
    
        _frustum = new THREE.Frustum(),
        _projScreenMatrix = new THREE.Matrix4(),
    
        _min = new THREE.Vector3(),
        _max = new THREE.Vector3(),
    
        _matrixPosition = new THREE.Vector3(),
        
        _renderList = [];
    
        // init
    
        var depthShader = THREE.ShaderLib[ "depthRGBA" ];
        var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );
    
        _depthMaterial = new THREE.ShaderMaterial( {
            uniforms: depthUniforms,
            vertexShader: depthShader.vertexShader,
            fragmentShader: depthShader.fragmentShader
         } );
    
        _depthMaterialMorph = new THREE.ShaderMaterial( {
            uniforms: depthUniforms,
            vertexShader: depthShader.vertexShader,
            fragmentShader: depthShader.fragmentShader,
            morphTargets: true
        } );
    
        _depthMaterialSkin = new THREE.ShaderMaterial( {
            uniforms: depthUniforms,
            vertexShader: depthShader.vertexShader,
            fragmentShader: depthShader.fragmentShader,
            skinning: true
        } );
    
        _depthMaterialMorphSkin = new THREE.ShaderMaterial( {
            uniforms: depthUniforms,
            vertexShader: depthShader.vertexShader,
            fragmentShader: depthShader.fragmentShader,
            morphTargets: true,
            skinning: true
        } );
    
        _depthMaterial._shadowPass = true;
        _depthMaterialMorph._shadowPass = true;
        _depthMaterialSkin._shadowPass = true;
        _depthMaterialMorphSkin._shadowPass = true;
    
        this.render = function ( scene, camera ) {
    
            if ( _renderer.shadowMapEnabled === false ) return;
    
            var i, il, j, jl, n,
    
            shadowMap, shadowMatrix, shadowCamera,
            program, buffer, material,
            webglObject, object, light,
    
            lights = [],
            k = 0,
    
            fog = null;
    
            // set GL state for depth map
    
            _gl.clearColor( 1, 1, 1, 1 );
            _gl.disable( _gl.BLEND );
    
            _gl.enable( _gl.CULL_FACE );
            _gl.frontFace( _gl.CCW );
    
            if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {
    
                _gl.cullFace( _gl.FRONT );
    
            } else {
    
                _gl.cullFace( _gl.BACK );
    
            }
    
            _renderer.setDepthTest( true );
    
            // preprocess lights
            // 	- skip lights that are not casting shadows
            //	- create virtual lights for cascaded shadow maps
    
            for ( i = 0, il = _lights.length; i < il; i ++ ) {
    
                light = _lights[ i ];
    
                if ( ! light.castShadow ) continue;
    
                if ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {
    
                    for ( n = 0; n < light.shadowCascadeCount; n ++ ) {
    
                        var virtualLight;
    
                        if ( ! light.shadowCascadeArray[ n ] ) {
    
                            virtualLight = createVirtualLight( light, n );
                            virtualLight.originalCamera = camera;
    
                            var gyro = new THREE.Gyroscope();
                            gyro.position.copy( light.shadowCascadeOffset );
    
                            gyro.add( virtualLight );
                            gyro.add( virtualLight.target );
    
                            camera.add( gyro );
    
                            light.shadowCascadeArray[ n ] = virtualLight;
    
                            console.log( "Created virtualLight", virtualLight );
    
                        } else {
    
                            virtualLight = light.shadowCascadeArray[ n ];
    
                        }
    
                        updateVirtualLight( light, n );
    
                        lights[ k ] = virtualLight;
                        k ++;
    
                    }
    
                } else {
    
                    lights[ k ] = light;
                    k ++;
    
                }
    
            }
    
            // render depth map
    
            for ( i = 0, il = lights.length; i < il; i ++ ) {
    
                light = lights[ i ];
    
                if ( ! light.shadowMap ) {
    
                    var shadowFilter = THREE.LinearFilter;
    
                    if ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {
    
                        shadowFilter = THREE.NearestFilter;
    
                    }
    
                    var pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };
    
                    light.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );
                    light.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );
    
                    light.shadowMatrix = new THREE.Matrix4();
    
                }
    
                if ( ! light.shadowCamera ) {
    
                    if ( light instanceof THREE.SpotLight ) {
    
                        light.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );
    
                    } else if ( light instanceof THREE.DirectionalLight ) {
    
                        light.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );
    
                    } else {
    
                        console.error( "Unsupported light type for shadow" );
                        continue;
    
                    }
    
                    scene.add( light.shadowCamera );
    
                    if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
    
                }
    
                if ( light.shadowCameraVisible && ! light.cameraHelper ) {
    
                    light.cameraHelper = new THREE.CameraHelper( light.shadowCamera );
                    scene.add( light.cameraHelper );
    
                }
    
                if ( light.isVirtual && virtualLight.originalCamera == camera ) {
    
                    updateShadowCamera( camera, light );
    
                }
    
                shadowMap = light.shadowMap;
                shadowMatrix = light.shadowMatrix;
                shadowCamera = light.shadowCamera;
    
                //
    
                shadowCamera.position.setFromMatrixPosition( light.matrixWorld );
                _matrixPosition.setFromMatrixPosition( light.target.matrixWorld );
                shadowCamera.lookAt( _matrixPosition );
                shadowCamera.updateMatrixWorld();
    
                shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );
    
                //
    
                if ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;
                if ( light.shadowCameraVisible ) light.cameraHelper.update();
    
                // compute shadow matrix
    
                shadowMatrix.set(
                    0.5, 0.0, 0.0, 0.5,
                    0.0, 0.5, 0.0, 0.5,
                    0.0, 0.0, 0.5, 0.5,
                    0.0, 0.0, 0.0, 1.0
                );
    
                shadowMatrix.multiply( shadowCamera.projectionMatrix );
                shadowMatrix.multiply( shadowCamera.matrixWorldInverse );
    
                // update camera matrices and frustum
    
                _projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
                _frustum.setFromMatrix( _projScreenMatrix );
    
                // render shadow map
    
                _renderer.setRenderTarget( shadowMap );
                _renderer.clear();
    
                // set object matrices & frustum culling
    
                _renderList.length = 0;
    
                projectObject( scene, scene, shadowCamera );
    
    
                // render regular objects
    
                var objectMaterial, useMorphing, useSkinning;
    
                for ( j = 0, jl = _renderList.length; j < jl; j ++ ) {
    
                    webglObject = _renderList[ j ];
    
                    object = webglObject.object;
                    buffer = webglObject.buffer;
    
                    // culling is overriden globally for all objects
                    // while rendering depth map
    
                    // need to deal with MeshFaceMaterial somehow
                    // in that case just use the first of material.materials for now
                    // (proper solution would require to break objects by materials
                    //  similarly to regular rendering and then set corresponding
                    //  depth materials per each chunk instead of just once per object)
    
                    objectMaterial = getObjectMaterial( object );
    
                    useMorphing = object.geometry.morphTargets !== undefined && object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
                    useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;
    
                    if ( object.customDepthMaterial ) {
    
                        material = object.customDepthMaterial;
    
                    } else if ( useSkinning ) {
    
                        material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;
    
                    } else if ( useMorphing ) {
    
                        material = _depthMaterialMorph;
    
                    } else {
    
                        material = _depthMaterial;
    
                    }
    
                    _renderer.setMaterialFaces( objectMaterial );
    
                    if ( buffer instanceof THREE.BufferGeometry ) {
    
                        _renderer.renderBufferDirect( shadowCamera, _lights, fog, material, buffer, object );
    
                    } else {
    
                        _renderer.renderBuffer( shadowCamera, _lights, fog, material, buffer, object );
    
                    }
    
                }
    
                // set matrices and render immediate objects
    
                for ( j = 0, jl = _webglObjectsImmediate.length; j < jl; j ++ ) {
    
                    webglObject = _webglObjectsImmediate[ j ];
                    object = webglObject.object;
    
                    if ( object.visible && object.castShadow ) {
    
                        object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
    
                        _renderer.renderImmediateObject( shadowCamera, _lights, fog, _depthMaterial, object );
    
                    }
    
                }
    
            }
    
            // restore GL state
    
            var clearColor = _renderer.getClearColor(),
            clearAlpha = _renderer.getClearAlpha();
    
            _gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );
            _gl.enable( _gl.BLEND );
    
            if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {
    
                _gl.cullFace( _gl.BACK );
    
            }
    
            _renderer.resetGLState();
    
        };
    
        function projectObject( scene, object, shadowCamera ){
    
            if ( object.visible ) {
    
                var webglObjects = _webglObjects[ object.id ];
    
                if ( webglObjects && object.castShadow && (object.frustumCulled === false || _frustum.intersectsObject( object ) === true) ) {
    
                    for ( var i = 0, l = webglObjects.length; i < l; i ++ ) {
    
                        var webglObject = webglObjects[ i ];
    
                        object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
                        _renderList.push( webglObject );
    
                    }
    
                }
    
                for ( var i = 0, l = object.children.length; i < l; i ++ ) {
    
                    projectObject( scene, object.children[ i ], shadowCamera );
    
                }
    
            }
    
        }
    
        function createVirtualLight( light, cascade ) {
    
            var virtualLight = new THREE.DirectionalLight();
    
            virtualLight.isVirtual = true;
    
            virtualLight.onlyShadow = true;
            virtualLight.castShadow = true;
    
            virtualLight.shadowCameraNear = light.shadowCameraNear;
            virtualLight.shadowCameraFar = light.shadowCameraFar;
    
            virtualLight.shadowCameraLeft = light.shadowCameraLeft;
            virtualLight.shadowCameraRight = light.shadowCameraRight;
            virtualLight.shadowCameraBottom = light.shadowCameraBottom;
            virtualLight.shadowCameraTop = light.shadowCameraTop;
    
            virtualLight.shadowCameraVisible = light.shadowCameraVisible;
    
            virtualLight.shadowDarkness = light.shadowDarkness;
    
            virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];
            virtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];
            virtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];
    
            virtualLight.pointsWorld = [];
            virtualLight.pointsFrustum = [];
    
            var pointsWorld = virtualLight.pointsWorld,
                pointsFrustum = virtualLight.pointsFrustum;
    
            for ( var i = 0; i < 8; i ++ ) {
    
                pointsWorld[ i ] = new THREE.Vector3();
                pointsFrustum[ i ] = new THREE.Vector3();
    
            }
    
            var nearZ = light.shadowCascadeNearZ[ cascade ];
            var farZ = light.shadowCascadeFarZ[ cascade ];
    
            pointsFrustum[ 0 ].set( - 1, - 1, nearZ );
            pointsFrustum[ 1 ].set(  1, - 1, nearZ );
            pointsFrustum[ 2 ].set( - 1,  1, nearZ );
            pointsFrustum[ 3 ].set(  1,  1, nearZ );
    
            pointsFrustum[ 4 ].set( - 1, - 1, farZ );
            pointsFrustum[ 5 ].set(  1, - 1, farZ );
            pointsFrustum[ 6 ].set( - 1,  1, farZ );
            pointsFrustum[ 7 ].set(  1,  1, farZ );
    
            return virtualLight;
    
        }
    
        // Synchronize virtual light with the original light
    
        function updateVirtualLight( light, cascade ) {
    
            var virtualLight = light.shadowCascadeArray[ cascade ];
    
            virtualLight.position.copy( light.position );
            virtualLight.target.position.copy( light.target.position );
            virtualLight.lookAt( virtualLight.target );
    
            virtualLight.shadowCameraVisible = light.shadowCameraVisible;
            virtualLight.shadowDarkness = light.shadowDarkness;
    
            virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];
    
            var nearZ = light.shadowCascadeNearZ[ cascade ];
            var farZ = light.shadowCascadeFarZ[ cascade ];
    
            var pointsFrustum = virtualLight.pointsFrustum;
    
            pointsFrustum[ 0 ].z = nearZ;
            pointsFrustum[ 1 ].z = nearZ;
            pointsFrustum[ 2 ].z = nearZ;
            pointsFrustum[ 3 ].z = nearZ;
    
            pointsFrustum[ 4 ].z = farZ;
            pointsFrustum[ 5 ].z = farZ;
            pointsFrustum[ 6 ].z = farZ;
            pointsFrustum[ 7 ].z = farZ;
    
        }
    
        // Fit shadow camera's ortho frustum to camera frustum
    
        function updateShadowCamera( camera, light ) {
    
            var shadowCamera = light.shadowCamera,
                pointsFrustum = light.pointsFrustum,
                pointsWorld = light.pointsWorld;
    
            _min.set( Infinity, Infinity, Infinity );
            _max.set( - Infinity, - Infinity, - Infinity );
    
            for ( var i = 0; i < 8; i ++ ) {
    
                var p = pointsWorld[ i ];
    
                p.copy( pointsFrustum[ i ] );
                p.unproject( camera );
    
                p.applyMatrix4( shadowCamera.matrixWorldInverse );
    
                if ( p.x < _min.x ) _min.x = p.x;
                if ( p.x > _max.x ) _max.x = p.x;
    
                if ( p.y < _min.y ) _min.y = p.y;
                if ( p.y > _max.y ) _max.y = p.y;
    
                if ( p.z < _min.z ) _min.z = p.z;
                if ( p.z > _max.z ) _max.z = p.z;
    
            }
    
            shadowCamera.left = _min.x;
            shadowCamera.right = _max.x;
            shadowCamera.top = _max.y;
            shadowCamera.bottom = _min.y;
    
            // can't really fit near/far
            //shadowCamera.near = _min.z;
            //shadowCamera.far = _max.z;
    
            shadowCamera.updateProjectionMatrix();
    
        }
    
        // For the moment just ignore objects that have multiple materials with different animation methods
        // Only the first material will be taken into account for deciding which depth material to use for shadow maps
    
        function getObjectMaterial( object ) {
    
            return object.material instanceof THREE.MeshFaceMaterial
                ? object.material.materials[ 0 ]
                : object.material;
    
        };
    
    };
    
    // File:src/renderers/webgl/plugins/SpritePlugin.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.SpritePlugin = function ( renderer, sprites ) {
    
        var gl = renderer.context;
    
        var vertexBuffer, elementBuffer;
        var program, attributes, uniforms;
    
        var texture;
        
        var init = function () {
    
            var vertices = new Float32Array( [
                - 0.5, - 0.5,  0, 0,
                  0.5, - 0.5,  1, 0,
                  0.5,   0.5,  1, 1,
                - 0.5,   0.5,  0, 1
            ] );
    
            var faces = new Uint16Array( [
                0, 1, 2,
                0, 2, 3
            ] );
    
            vertexBuffer  = gl.createBuffer();
            elementBuffer = gl.createBuffer();
    
            gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
            gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );
    
            gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
            gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );
    
            program = createProgram();
    
            attributes = {
                position:			gl.getAttribLocation ( program, 'position' ),
                uv:					gl.getAttribLocation ( program, 'uv' )
            };
    
            uniforms = {
                uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
                uvScale:			gl.getUniformLocation( program, 'uvScale' ),
    
                rotation:			gl.getUniformLocation( program, 'rotation' ),
                scale:				gl.getUniformLocation( program, 'scale' ),
    
                color:				gl.getUniformLocation( program, 'color' ),
                map:				gl.getUniformLocation( program, 'map' ),
                opacity:			gl.getUniformLocation( program, 'opacity' ),
    
                modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
                projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),
    
                fogType:			gl.getUniformLocation( program, 'fogType' ),
                fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
                fogNear:			gl.getUniformLocation( program, 'fogNear' ),
                fogFar:				gl.getUniformLocation( program, 'fogFar' ),
                fogColor:			gl.getUniformLocation( program, 'fogColor' ),
    
                alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
            };
    
            var canvas = document.createElement( 'canvas' );
            canvas.width = 8;
            canvas.height = 8;
    
            var context = canvas.getContext( '2d' );
            context.fillStyle = 'white';
            context.fillRect( 0, 0, 8, 8 );
    
            texture = new THREE.Texture( canvas );
            texture.needsUpdate = true;
    
        };
    
        this.render = function ( scene, camera ) {
    
            if ( sprites.length === 0 ) return;
    
            // setup gl
    
            if ( program === undefined ) {
    
                init();
    
            }
    
            gl.useProgram( program );
    
            gl.enableVertexAttribArray( attributes.position );
            gl.enableVertexAttribArray( attributes.uv );
    
            gl.disable( gl.CULL_FACE );
            gl.enable( gl.BLEND );
    
            gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
            gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
            gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );
    
            gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
    
            gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );
    
            gl.activeTexture( gl.TEXTURE0 );
            gl.uniform1i( uniforms.map, 0 );
    
            var oldFogType = 0;
            var sceneFogType = 0;
            var fog = scene.fog;
    
            if ( fog ) {
    
                gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );
    
                if ( fog instanceof THREE.Fog ) {
    
                    gl.uniform1f( uniforms.fogNear, fog.near );
                    gl.uniform1f( uniforms.fogFar, fog.far );
    
                    gl.uniform1i( uniforms.fogType, 1 );
                    oldFogType = 1;
                    sceneFogType = 1;
    
                } else if ( fog instanceof THREE.FogExp2 ) {
    
                    gl.uniform1f( uniforms.fogDensity, fog.density );
    
                    gl.uniform1i( uniforms.fogType, 2 );
                    oldFogType = 2;
                    sceneFogType = 2;
    
                }
    
            } else {
    
                gl.uniform1i( uniforms.fogType, 0 );
                oldFogType = 0;
                sceneFogType = 0;
    
            }
    
    
            // update positions and sort
    
            for ( var i = 0, l = sprites.length; i < l; i ++ ) {
    
                var sprite = sprites[ i ];
    
                sprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
    
                if ( sprite.renderDepth === null ) {
    
                    sprite.z = - sprite._modelViewMatrix.elements[ 14 ];
    
                } else {
    
                    sprite.z = sprite.renderDepth;
    
                }
    
            }
    
            sprites.sort( painterSortStable );
    
            // render all sprites
    
            var scale = [];
    
            for ( var i = 0, l = sprites.length; i < l; i ++ ) {
    
                var sprite = sprites[ i ];
                var material = sprite.material;
    
                gl.uniform1f( uniforms.alphaTest, material.alphaTest );
                gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );
    
                scale[ 0 ] = sprite.scale.x;
                scale[ 1 ] = sprite.scale.y;
    
                var fogType = 0;
    
                if ( scene.fog && material.fog ) {
    
                    fogType = sceneFogType;
    
                }
    
                if ( oldFogType !== fogType ) {
    
                    gl.uniform1i( uniforms.fogType, fogType );
                    oldFogType = fogType;
    
                }
    
                if ( material.map !== null ) {
    
                    gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
                    gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );
    
                } else {
    
                    gl.uniform2f( uniforms.uvOffset, 0, 0 );
                    gl.uniform2f( uniforms.uvScale, 1, 1 );
    
                }
    
                gl.uniform1f( uniforms.opacity, material.opacity );
                gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );
    
                gl.uniform1f( uniforms.rotation, material.rotation );
                gl.uniform2fv( uniforms.scale, scale );
    
                renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
                renderer.setDepthTest( material.depthTest );
                renderer.setDepthWrite( material.depthWrite );
    
                if ( material.map && material.map.image && material.map.image.width ) {
    
                    renderer.setTexture( material.map, 0 );
    
                } else {
    
                    renderer.setTexture( texture, 0 );
    
                }
    
                gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
    
            }
    
            // restore gl
    
            gl.enable( gl.CULL_FACE );
            
            renderer.resetGLState();
    
        };
    
        function createProgram () {
    
            var program = gl.createProgram();
    
            var vertexShader = gl.createShader( gl.VERTEX_SHADER );
            var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
    
            gl.shaderSource( vertexShader, [
    
                'precision ' + renderer.getPrecision() + ' float;',
    
                'uniform mat4 modelViewMatrix;',
                'uniform mat4 projectionMatrix;',
                'uniform float rotation;',
                'uniform vec2 scale;',
                'uniform vec2 uvOffset;',
                'uniform vec2 uvScale;',
    
                'attribute vec2 position;',
                'attribute vec2 uv;',
    
                'varying vec2 vUV;',
    
                'void main() {',
    
                    'vUV = uvOffset + uv * uvScale;',
    
                    'vec2 alignedPosition = position * scale;',
    
                    'vec2 rotatedPosition;',
                    'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
                    'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',
    
                    'vec4 finalPosition;',
    
                    'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
                    'finalPosition.xy += rotatedPosition;',
                    'finalPosition = projectionMatrix * finalPosition;',
    
                    'gl_Position = finalPosition;',
    
                '}'
    
            ].join( '\n' ) );
    
            gl.shaderSource( fragmentShader, [
    
                'precision ' + renderer.getPrecision() + ' float;',
    
                'uniform vec3 color;',
                'uniform sampler2D map;',
                'uniform float opacity;',
    
                'uniform int fogType;',
                'uniform vec3 fogColor;',
                'uniform float fogDensity;',
                'uniform float fogNear;',
                'uniform float fogFar;',
                'uniform float alphaTest;',
    
                'varying vec2 vUV;',
    
                'void main() {',
    
                    'vec4 texture = texture2D( map, vUV );',
    
                    'if ( texture.a < alphaTest ) discard;',
    
                    'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',
    
                    'if ( fogType > 0 ) {',
    
                        'float depth = gl_FragCoord.z / gl_FragCoord.w;',
                        'float fogFactor = 0.0;',
    
                        'if ( fogType == 1 ) {',
    
                            'fogFactor = smoothstep( fogNear, fogFar, depth );',
    
                        '} else {',
    
                            'const float LOG2 = 1.442695;',
                            'float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
                            'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',
    
                        '}',
    
                        'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',
    
                    '}',
    
                '}'
    
            ].join( '\n' ) );
    
            gl.compileShader( vertexShader );
            gl.compileShader( fragmentShader );
    
            gl.attachShader( program, vertexShader );
            gl.attachShader( program, fragmentShader );
    
            gl.linkProgram( program );
    
            return program;
    
        };
    
        function painterSortStable ( a, b ) {
    
            if ( a.z !== b.z ) {
    
                return b.z - a.z;
    
            } else {
    
                return b.id - a.id;
    
            }
    
        };
    
    };
    
    // File:src/extras/GeometryUtils.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.GeometryUtils = {
    
        merge: function ( geometry1, geometry2, materialIndexOffset ) {
    
            console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
    
            var matrix;
    
            if ( geometry2 instanceof THREE.Mesh ) {
    
                geometry2.matrixAutoUpdate && geometry2.updateMatrix();
    
                matrix = geometry2.matrix;
                geometry2 = geometry2.geometry;
    
            }
    
            geometry1.merge( geometry2, matrix, materialIndexOffset );
    
        },
    
        center: function ( geometry ) {
    
            console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
            return geometry.center();
    
        }
    
    };
    
    // File:src/extras/ImageUtils.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     * @author Daosheng Mu / https://github.com/DaoshengMu/
     */
    
    THREE.ImageUtils = {
    
        crossOrigin: undefined,
    
        loadTexture: function ( url, mapping, onLoad, onError ) {
    
            var loader = new THREE.ImageLoader();
            loader.crossOrigin = this.crossOrigin;
    
            var texture = new THREE.Texture( undefined, mapping );
    
            loader.load( url, function ( image ) {
    
                texture.image = image;
                texture.needsUpdate = true;
    
                if ( onLoad ) onLoad( texture );
    
            }, undefined, function ( event ) {
    
                if ( onError ) onError( event );
    
            } );
    
            texture.sourceFile = url;
    
            return texture;
    
        },
    
        loadTextureCube: function ( array, mapping, onLoad, onError ) {
    
            var images = [];
    
            var loader = new THREE.ImageLoader();
            loader.crossOrigin = this.crossOrigin;
    
            var texture = new THREE.CubeTexture( images, mapping );
    
            // no flipping needed for cube textures
    
            texture.flipY = false;
    
            var loaded = 0;
    
            var loadTexture = function ( i ) {
    
                loader.load( array[ i ], function ( image ) {
    
                    texture.images[ i ] = image;
    
                    loaded += 1;
    
                    if ( loaded === 6 ) {
    
                        texture.needsUpdate = true;
    
                        if ( onLoad ) onLoad( texture );
    
                    }
    
                } );
    
            }
    
            for ( var i = 0, il = array.length; i < il; ++ i ) {
    
                loadTexture( i );
    
            }
    
            return texture;
    
        },
    
        loadCompressedTexture: function () {
    
            console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' )
    
        },
    
        loadCompressedTextureCube: function () {
    
            console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' )
    
        },
    
        getNormalMap: function ( image, depth ) {
    
            // Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/
    
            var cross = function ( a, b ) {
    
                return [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];
    
            }
    
            var subtract = function ( a, b ) {
    
                return [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];
    
            }
    
            var normalize = function ( a ) {
    
                var l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );
                return [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];
    
            }
    
            depth = depth | 1;
    
            var width = image.width;
            var height = image.height;
    
            var canvas = document.createElement( 'canvas' );
            canvas.width = width;
            canvas.height = height;
    
            var context = canvas.getContext( '2d' );
            context.drawImage( image, 0, 0 );
    
            var data = context.getImageData( 0, 0, width, height ).data;
            var imageData = context.createImageData( width, height );
            var output = imageData.data;
    
            for ( var x = 0; x < width; x ++ ) {
    
                for ( var y = 0; y < height; y ++ ) {
    
                    var ly = y - 1 < 0 ? 0 : y - 1;
                    var uy = y + 1 > height - 1 ? height - 1 : y + 1;
                    var lx = x - 1 < 0 ? 0 : x - 1;
                    var ux = x + 1 > width - 1 ? width - 1 : x + 1;
    
                    var points = [];
                    var origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];
                    points.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );
                    points.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );
                    points.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );
                    points.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );
                    points.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );
                    points.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );
                    points.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );
                    points.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );
    
                    var normals = [];
                    var num_points = points.length;
    
                    for ( var i = 0; i < num_points; i ++ ) {
    
                        var v1 = points[ i ];
                        var v2 = points[ ( i + 1 ) % num_points ];
                        v1 = subtract( v1, origin );
                        v2 = subtract( v2, origin );
                        normals.push( normalize( cross( v1, v2 ) ) );
    
                    }
    
                    var normal = [ 0, 0, 0 ];
    
                    for ( var i = 0; i < normals.length; i ++ ) {
    
                        normal[ 0 ] += normals[ i ][ 0 ];
                        normal[ 1 ] += normals[ i ][ 1 ];
                        normal[ 2 ] += normals[ i ][ 2 ];
    
                    }
    
                    normal[ 0 ] /= normals.length;
                    normal[ 1 ] /= normals.length;
                    normal[ 2 ] /= normals.length;
    
                    var idx = ( y * width + x ) * 4;
    
                    output[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;
                    output[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;
                    output[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;
                    output[ idx + 3 ] = 255;
    
                }
    
            }
    
            context.putImageData( imageData, 0, 0 );
    
            return canvas;
    
        },
    
        generateDataTexture: function ( width, height, color ) {
    
            var size = width * height;
            var data = new Uint8Array( 3 * size );
    
            var r = Math.floor( color.r * 255 );
            var g = Math.floor( color.g * 255 );
            var b = Math.floor( color.b * 255 );
    
            for ( var i = 0; i < size; i ++ ) {
    
                data[ i * 3 ] 	   = r;
                data[ i * 3 + 1 ] = g;
                data[ i * 3 + 2 ] = b;
    
            }
    
            var texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );
            texture.needsUpdate = true;
    
            return texture;
    
        }
    
    };
    
    // File:src/extras/SceneUtils.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.SceneUtils = {
    
        createMultiMaterialObject: function ( geometry, materials ) {
    
            var group = new THREE.Object3D();
    
            for ( var i = 0, l = materials.length; i < l; i ++ ) {
    
                group.add( new THREE.Mesh( geometry, materials[ i ] ) );
    
            }
    
            return group;
    
        },
    
        detach: function ( child, parent, scene ) {
    
            child.applyMatrix( parent.matrixWorld );
            parent.remove( child );
            scene.add( child );
    
        },
    
        attach: function ( child, scene, parent ) {
    
            var matrixWorldInverse = new THREE.Matrix4();
            matrixWorldInverse.getInverse( parent.matrixWorld );
            child.applyMatrix( matrixWorldInverse );
    
            scene.remove( child );
            parent.add( child );
    
        }
    
    };
    
    // File:src/extras/FontUtils.js
    
    /**
     * @author zz85 / http://www.lab4games.net/zz85/blog
     * @author alteredq / http://alteredqualia.com/
     *
     * For Text operations in three.js (See TextGeometry)
     *
     * It uses techniques used in:
     *
     * 	typeface.js and canvastext
     * 		For converting fonts and rendering with javascript
     *		http://typeface.neocracy.org
     *
     *	Triangulation ported from AS3
     *		Simple Polygon Triangulation
     *		http://actionsnippet.com/?p=1462
     *
     * 	A Method to triangulate shapes with holes
     *		http://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/
     *
     */
    
    THREE.FontUtils = {
    
        faces: {},
    
        // Just for now. face[weight][style]
    
        face: 'helvetiker',
        weight: 'normal',
        style: 'normal',
        size: 150,
        divisions: 10,
    
        getFace: function () {
    
            try {
    
                return this.faces[ this.face ][ this.weight ][ this.style ];
    
            } catch (e) {
    
                throw "The font " + this.face + " with " + this.weight + " weight and " + this.style + " style is missing."
    
            };
    
        },
    
        loadFace: function ( data ) {
    
            var family = data.familyName.toLowerCase();
    
            var ThreeFont = this;
    
            ThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};
    
            ThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};
            ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;
    
            var face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;
    
            return data;
    
        },
    
        drawText: function ( text ) {
    
            var characterPts = [], allPts = [];
    
            // RenderText
    
            var i, p,
                face = this.getFace(),
                scale = this.size / face.resolution,
                offset = 0,
                chars = String( text ).split( '' ),
                length = chars.length;
    
            var fontPaths = [];
    
            for ( i = 0; i < length; i ++ ) {
    
                var path = new THREE.Path();
    
                var ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );
                offset += ret.offset;
    
                fontPaths.push( ret.path );
    
            }
    
            // get the width
    
            var width = offset / 2;
            //
            // for ( p = 0; p < allPts.length; p++ ) {
            //
            // 	allPts[ p ].x -= width;
            //
            // }
    
            //var extract = this.extractPoints( allPts, characterPts );
            //extract.contour = allPts;
    
            //extract.paths = fontPaths;
            //extract.offset = width;
    
            return { paths: fontPaths, offset: width };
    
        },
    
    
    
    
        extractGlyphPoints: function ( c, face, scale, offset, path ) {
    
            var pts = [];
    
            var i, i2, divisions,
                outline, action, length,
                scaleX, scaleY,
                x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,
                laste,
                glyph = face.glyphs[ c ] || face.glyphs[ '?' ];
    
            if ( ! glyph ) return;
    
            if ( glyph.o ) {
    
                outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
                length = outline.length;
    
                scaleX = scale;
                scaleY = scale;
    
                for ( i = 0; i < length; ) {
    
                    action = outline[ i ++ ];
    
                    //console.log( action );
    
                    switch ( action ) {
    
                    case 'm':
    
                        // Move To
    
                        x = outline[ i ++ ] * scaleX + offset;
                        y = outline[ i ++ ] * scaleY;
    
                        path.moveTo( x, y );
                        break;
    
                    case 'l':
    
                        // Line To
    
                        x = outline[ i ++ ] * scaleX + offset;
                        y = outline[ i ++ ] * scaleY;
                        path.lineTo( x,y );
                        break;
    
                    case 'q':
    
                        // QuadraticCurveTo
    
                        cpx  = outline[ i ++ ] * scaleX + offset;
                        cpy  = outline[ i ++ ] * scaleY;
                        cpx1 = outline[ i ++ ] * scaleX + offset;
                        cpy1 = outline[ i ++ ] * scaleY;
    
                        path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );
    
                        laste = pts[ pts.length - 1 ];
    
                        if ( laste ) {
    
                            cpx0 = laste.x;
                            cpy0 = laste.y;
    
                            for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {
    
                                var t = i2 / divisions;
                                var tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
                                var ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );
                          }
    
                      }
    
                      break;
    
                    case 'b':
    
                        // Cubic Bezier Curve
    
                        cpx  = outline[ i ++ ] *  scaleX + offset;
                        cpy  = outline[ i ++ ] *  scaleY;
                        cpx1 = outline[ i ++ ] *  scaleX + offset;
                        cpy1 = outline[ i ++ ] *  scaleY;
                        cpx2 = outline[ i ++ ] *  scaleX + offset;
                        cpy2 = outline[ i ++ ] *  scaleY;
    
                        path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );
    
                        laste = pts[ pts.length - 1 ];
    
                        if ( laste ) {
    
                            cpx0 = laste.x;
                            cpy0 = laste.y;
    
                            for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {
    
                                var t = i2 / divisions;
                                var tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
                                var ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );
    
                            }
    
                        }
    
                        break;
    
                    }
    
                }
            }
    
    
    
            return { offset: glyph.ha * scale, path:path };
        }
    
    };
    
    
    THREE.FontUtils.generateShapes = function ( text, parameters ) {
    
        // Parameters 
    
        parameters = parameters || {};
    
        var size = parameters.size !== undefined ? parameters.size : 100;
        var curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments : 4;
    
        var font = parameters.font !== undefined ? parameters.font : 'helvetiker';
        var weight = parameters.weight !== undefined ? parameters.weight : 'normal';
        var style = parameters.style !== undefined ? parameters.style : 'normal';
    
        THREE.FontUtils.size = size;
        THREE.FontUtils.divisions = curveSegments;
    
        THREE.FontUtils.face = font;
        THREE.FontUtils.weight = weight;
        THREE.FontUtils.style = style;
    
        // Get a Font data json object
    
        var data = THREE.FontUtils.drawText( text );
    
        var paths = data.paths;
        var shapes = [];
    
        for ( var p = 0, pl = paths.length; p < pl; p ++ ) {
    
            Array.prototype.push.apply( shapes, paths[ p ].toShapes() );
    
        }
    
        return shapes;
    
    };
    
    
    /**
     * This code is a quick port of code written in C++ which was submitted to
     * flipcode.com by John W. Ratcliff  // July 22, 2000
     * See original code and more information here:
     * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
     *
     * ported to actionscript by Zevan Rosser
     * www.actionsnippet.com
     *
     * ported to javascript by Joshua Koo
     * http://www.lab4games.net/zz85/blog
     *
     */
    
    
    ( function ( namespace ) {
    
        var EPSILON = 0.0000000001;
    
        // takes in an contour array and returns
    
        var process = function ( contour, indices ) {
    
            var n = contour.length;
    
            if ( n < 3 ) return null;
    
            var result = [],
                verts = [],
                vertIndices = [];
    
            /* we want a counter-clockwise polygon in verts */
    
            var u, v, w;
    
            if ( area( contour ) > 0.0 ) {
    
                for ( v = 0; v < n; v ++ ) verts[ v ] = v;
    
            } else {
    
                for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;
    
            }
    
            var nv = n;
    
            /*  remove nv - 2 vertices, creating 1 triangle every time */
    
            var count = 2 * nv;   /* error detection */
    
            for ( v = nv - 1; nv > 2; ) {
    
                /* if we loop, it is probably a non-simple polygon */
    
                if ( ( count -- ) <= 0 ) {
    
                    //** Triangulate: ERROR - probable bad polygon!
    
                    //throw ( "Warning, unable to triangulate polygon!" );
                    //return null;
                    // Sometimes warning is fine, especially polygons are triangulated in reverse.
                    console.log( 'Warning, unable to triangulate polygon!' );
    
                    if ( indices ) return vertIndices;
                    return result;
    
                }
    
                /* three consecutive vertices in current polygon, <u,v,w> */
    
                u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
                v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
                w = v + 1;  if ( nv <= w ) w = 0;     /* next     */
    
                if ( snip( contour, u, v, w, nv, verts ) ) {
    
                    var a, b, c, s, t;
    
                    /* true names of the vertices */
    
                    a = verts[ u ];
                    b = verts[ v ];
                    c = verts[ w ];
    
                    /* output Triangle */
    
                    result.push( [ contour[ a ],
                        contour[ b ],
                        contour[ c ] ] );
    
    
                    vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );
    
                    /* remove v from the remaining polygon */
    
                    for ( s = v, t = v + 1; t < nv; s++, t++ ) {
    
                        verts[ s ] = verts[ t ];
    
                    }
    
                    nv --;
    
                    /* reset error detection counter */
    
                    count = 2 * nv;
    
                }
    
            }
    
            if ( indices ) return vertIndices;
            return result;
    
        };
    
        // calculate area of the contour polygon
    
        var area = function ( contour ) {
    
            var n = contour.length;
            var a = 0.0;
    
            for ( var p = n - 1, q = 0; q < n; p = q ++ ) {
    
                a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
    
            }
    
            return a * 0.5;
    
        };
    
        var snip = function ( contour, u, v, w, n, verts ) {
    
            var p;
            var ax, ay, bx, by;
            var cx, cy, px, py;
    
            ax = contour[ verts[ u ] ].x;
            ay = contour[ verts[ u ] ].y;
    
            bx = contour[ verts[ v ] ].x;
            by = contour[ verts[ v ] ].y;
    
            cx = contour[ verts[ w ] ].x;
            cy = contour[ verts[ w ] ].y;
    
            if ( EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;
    
            var aX, aY, bX, bY, cX, cY;
            var apx, apy, bpx, bpy, cpx, cpy;
            var cCROSSap, bCROSScp, aCROSSbp;
    
            aX = cx - bx;  aY = cy - by;
            bX = ax - cx;  bY = ay - cy;
            cX = bx - ax;  cY = by - ay;
    
            for ( p = 0; p < n; p ++ ) {
    
                px = contour[ verts[ p ] ].x
                py = contour[ verts[ p ] ].y
    
                if ( ( ( px === ax ) && ( py === ay ) ) ||
                     ( ( px === bx ) && ( py === by ) ) ||
                     ( ( px === cx ) && ( py === cy ) ) )	continue;
    
                apx = px - ax;  apy = py - ay;
                bpx = px - bx;  bpy = py - by;
                cpx = px - cx;  cpy = py - cy;
    
                // see if p is inside triangle abc
    
                aCROSSbp = aX * bpy - aY * bpx;
                cCROSSap = cX * apy - cY * apx;
                bCROSScp = bX * cpy - bY * cpx;
    
                if ( ( aCROSSbp >= - EPSILON ) && ( bCROSScp >= - EPSILON ) && ( cCROSSap >= - EPSILON ) ) return false;
    
            }
    
            return true;
    
        };
    
    
        namespace.Triangulate = process;
        namespace.Triangulate.area = area;
    
        return namespace;
    
    } )( THREE.FontUtils );
    
    // To use the typeface.js face files, hook up the API
    self._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };
    THREE.typeface_js = self._typeface_js;
    
    // File:src/extras/audio/Audio.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.Audio = function ( listener ) {
    
        THREE.Object3D.call( this );
    
        this.type = 'Audio';
    
        this.context = listener.context;
        this.source = this.context.createBufferSource();
    
        this.gain = this.context.createGain();
        this.gain.connect( this.context.destination );
    
        this.panner = this.context.createPanner();
        this.panner.connect( this.gain );
    
    };
    
    THREE.Audio.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.Audio.prototype.load = function ( file ) {
    
        var scope = this;
    
        var request = new XMLHttpRequest();
        request.open( 'GET', file, true );
        request.responseType = 'arraybuffer';
        request.onload = function ( e ) {
    
            scope.context.decodeAudioData( this.response, function ( buffer ) {
    
                scope.source.buffer = buffer;
                scope.source.connect( scope.panner );
                scope.source.start( 0 );
    
            } );
    
        };
        request.send();
    
        return this;
    
    };
    
    THREE.Audio.prototype.setLoop = function ( value ) {
    
        this.source.loop = value;
    
    };
    
    THREE.Audio.prototype.setRefDistance = function ( value ) {
    
        this.panner.refDistance = value;
    
    };
    
    THREE.Audio.prototype.setRolloffFactor = function ( value ) {
    
        this.panner.rolloffFactor = value;
    
    };
    
    THREE.Audio.prototype.updateMatrixWorld = ( function () {
    
        var position = new THREE.Vector3();
    
        return function ( force ) {
    
            THREE.Object3D.prototype.updateMatrixWorld.call( this, force );
    
            position.setFromMatrixPosition( this.matrixWorld );
    
            this.panner.setPosition( position.x, position.y, position.z );
    
        };
    
    } )();
    
    // File:src/extras/audio/AudioListener.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.AudioListener = function () {
    
        THREE.Object3D.call( this );
    
        this.type = 'AudioListener';
    
        this.context = new ( window.AudioContext || window.webkitAudioContext )();
    
    };
    
    THREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.AudioListener.prototype.updateMatrixWorld = ( function () {
    
        var position = new THREE.Vector3();
        var quaternion = new THREE.Quaternion();
        var scale = new THREE.Vector3();
    
        var orientation = new THREE.Vector3();
        var velocity = new THREE.Vector3();
    
        var positionPrev = new THREE.Vector3();
    
        return function ( force ) {
    
            THREE.Object3D.prototype.updateMatrixWorld.call( this, force );
    
            var listener = this.context.listener;
    
            this.matrixWorld.decompose( position, quaternion, scale );
    
            orientation.set( 0, 0, -1 ).applyQuaternion( quaternion );
            velocity.subVectors( position, positionPrev );
    
            listener.setPosition( position.x, position.y, position.z );
            listener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );
            listener.setVelocity( velocity.x, velocity.y, velocity.z );
    
            positionPrev.copy( position );
    
        };
    
    } )();
    
    // File:src/extras/core/Curve.js
    
    /**
     * @author zz85 / http://www.lab4games.net/zz85/blog
     * Extensible curve object
     *
     * Some common of Curve methods
     * .getPoint(t), getTangent(t)
     * .getPointAt(u), getTagentAt(u)
     * .getPoints(), .getSpacedPoints()
     * .getLength()
     * .updateArcLengths()
     *
     * This following classes subclasses THREE.Curve:
     *
     * -- 2d classes --
     * THREE.LineCurve
     * THREE.QuadraticBezierCurve
     * THREE.CubicBezierCurve
     * THREE.SplineCurve
     * THREE.ArcCurve
     * THREE.EllipseCurve
     *
     * -- 3d classes --
     * THREE.LineCurve3
     * THREE.QuadraticBezierCurve3
     * THREE.CubicBezierCurve3
     * THREE.SplineCurve3
     * THREE.ClosedSplineCurve3
     *
     * A series of curves can be represented as a THREE.CurvePath
     *
     **/
    
    /**************************************************************
     *	Abstract Curve base class
     **************************************************************/
    
    THREE.Curve = function () {
    
    };
    
    // Virtual base class method to overwrite and implement in subclasses
    //	- t [0 .. 1]
    
    THREE.Curve.prototype.getPoint = function ( t ) {
    
        console.log( "Warning, getPoint() not implemented!" );
        return null;
    
    };
    
    // Get point at relative position in curve according to arc length
    // - u [0 .. 1]
    
    THREE.Curve.prototype.getPointAt = function ( u ) {
    
        var t = this.getUtoTmapping( u );
        return this.getPoint( t );
    
    };
    
    // Get sequence of points using getPoint( t )
    
    THREE.Curve.prototype.getPoints = function ( divisions ) {
    
        if ( ! divisions ) divisions = 5;
    
        var d, pts = [];
    
        for ( d = 0; d <= divisions; d ++ ) {
    
            pts.push( this.getPoint( d / divisions ) );
    
        }
    
        return pts;
    
    };
    
    // Get sequence of points using getPointAt( u )
    
    THREE.Curve.prototype.getSpacedPoints = function ( divisions ) {
    
        if ( ! divisions ) divisions = 5;
    
        var d, pts = [];
    
        for ( d = 0; d <= divisions; d ++ ) {
    
            pts.push( this.getPointAt( d / divisions ) );
    
        }
    
        return pts;
    
    };
    
    // Get total curve arc length
    
    THREE.Curve.prototype.getLength = function () {
    
        var lengths = this.getLengths();
        return lengths[ lengths.length - 1 ];
    
    };
    
    // Get list of cumulative segment lengths
    
    THREE.Curve.prototype.getLengths = function ( divisions ) {
    
        if ( ! divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;
    
        if ( this.cacheArcLengths
            && ( this.cacheArcLengths.length == divisions + 1 )
            && ! this.needsUpdate) {
    
            //console.log( "cached", this.cacheArcLengths );
            return this.cacheArcLengths;
    
        }
    
        this.needsUpdate = false;
    
        var cache = [];
        var current, last = this.getPoint( 0 );
        var p, sum = 0;
    
        cache.push( 0 );
    
        for ( p = 1; p <= divisions; p ++ ) {
    
            current = this.getPoint ( p / divisions );
            sum += current.distanceTo( last );
            cache.push( sum );
            last = current;
    
        }
    
        this.cacheArcLengths = cache;
    
        return cache; // { sums: cache, sum:sum }; Sum is in the last element.
    
    };
    
    
    THREE.Curve.prototype.updateArcLengths = function() {
        this.needsUpdate = true;
        this.getLengths();
    };
    
    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance
    
    THREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {
    
        var arcLengths = this.getLengths();
    
        var i = 0, il = arcLengths.length;
    
        var targetArcLength; // The targeted u distance value to get
    
        if ( distance ) {
    
            targetArcLength = distance;
    
        } else {
    
            targetArcLength = u * arcLengths[ il - 1 ];
    
        }
    
        //var time = Date.now();
    
        // binary search for the index with largest value smaller than target u distance
    
        var low = 0, high = il - 1, comparison;
    
        while ( low <= high ) {
    
            i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
    
            comparison = arcLengths[ i ] - targetArcLength;
    
            if ( comparison < 0 ) {
    
                low = i + 1;
                continue;
    
            } else if ( comparison > 0 ) {
    
                high = i - 1;
                continue;
    
            } else {
    
                high = i;
                break;
    
                // DONE
    
            }
    
        }
    
        i = high;
    
        //console.log('b' , i, low, high, Date.now()- time);
    
        if ( arcLengths[ i ] == targetArcLength ) {
    
            var t = i / ( il - 1 );
            return t;
    
        }
    
        // we could get finer grain at lengths, or use simple interpolatation between two points
    
        var lengthBefore = arcLengths[ i ];
        var lengthAfter = arcLengths[ i + 1 ];
    
        var segmentLength = lengthAfter - lengthBefore;
    
        // determine where we are between the 'before' and 'after' points
    
        var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
    
        // add that fractional amount to t
    
        var t = ( i + segmentFraction ) / ( il -1 );
    
        return t;
    
    };
    
    // Returns a unit vector tangent at t
    // In case any sub curve does not implement its tangent derivation,
    // 2 points a small delta apart will be used to find its gradient
    // which seems to give a reasonable approximation
    
    THREE.Curve.prototype.getTangent = function( t ) {
    
        var delta = 0.0001;
        var t1 = t - delta;
        var t2 = t + delta;
    
        // Capping in case of danger
    
        if ( t1 < 0 ) t1 = 0;
        if ( t2 > 1 ) t2 = 1;
    
        var pt1 = this.getPoint( t1 );
        var pt2 = this.getPoint( t2 );
    
        var vec = pt2.clone().sub(pt1);
        return vec.normalize();
    
    };
    
    
    THREE.Curve.prototype.getTangentAt = function ( u ) {
    
        var t = this.getUtoTmapping( u );
        return this.getTangent( t );
    
    };
    
    
    
    
    
    /**************************************************************
     *	Utils
     **************************************************************/
    
    THREE.Curve.Utils = {
    
        tangentQuadraticBezier: function ( t, p0, p1, p2 ) {
    
            return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );
    
        },
    
        // Puay Bing, thanks for helping with this derivative!
    
        tangentCubicBezier: function (t, p0, p1, p2, p3 ) {
    
            return - 3 * p0 * (1 - t) * (1 - t)  +
                3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +
                6 * t *  p2 * (1-t) - 3 * t * t * p2 +
                3 * t * t * p3;
    
        },
    
        tangentSpline: function ( t, p0, p1, p2, p3 ) {
    
            // To check if my formulas are correct
    
            var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
            var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
            var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
            var h11 = 3 * t * t - 2 * t;	// t3 − t2
    
            return h00 + h10 + h01 + h11;
    
        },
    
        // Catmull-Rom
    
        interpolate: function( p0, p1, p2, p3, t ) {
    
            var v0 = ( p2 - p0 ) * 0.5;
            var v1 = ( p3 - p1 ) * 0.5;
            var t2 = t * t;
            var t3 = t * t2;
            return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
    
        }
    
    };
    
    
    // TODO: Transformation for Curves?
    
    /**************************************************************
     *	3D Curves
     **************************************************************/
    
    // A Factory method for creating new curve subclasses
    
    THREE.Curve.create = function ( constructor, getPointFunc ) {
    
        constructor.prototype = Object.create( THREE.Curve.prototype );
        constructor.prototype.getPoint = getPointFunc;
    
        return constructor;
    
    };
    
    // File:src/extras/core/CurvePath.js
    
    /**
     * @author zz85 / http://www.lab4games.net/zz85/blog
     *
     **/
    
    /**************************************************************
     *	Curved Path - a curve path is simply a array of connected
     *  curves, but retains the api of a curve
     **************************************************************/
    
    THREE.CurvePath = function () {
    
        this.curves = [];
        this.bends = [];
        
        this.autoClose = false; // Automatically closes the path
    };
    
    THREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );
    
    THREE.CurvePath.prototype.add = function ( curve ) {
    
        this.curves.push( curve );
    
    };
    
    THREE.CurvePath.prototype.checkConnection = function() {
        // TODO
        // If the ending of curve is not connected to the starting
        // or the next curve, then, this is not a real path
    };
    
    THREE.CurvePath.prototype.closePath = function() {
        // TODO Test
        // and verify for vector3 (needs to implement equals)
        // Add a line curve if start and end of lines are not connected
        var startPoint = this.curves[0].getPoint(0);
        var endPoint = this.curves[this.curves.length-1].getPoint(1);
        
        if (! startPoint.equals(endPoint)) {
            this.curves.push( new THREE.LineCurve(endPoint, startPoint) );
        }
        
    };
    
    // To get accurate point with reference to
    // entire path distance at time t,
    // following has to be done:
    
    // 1. Length of each sub path have to be known
    // 2. Locate and identify type of curve
    // 3. Get t for the curve
    // 4. Return curve.getPointAt(t')
    
    THREE.CurvePath.prototype.getPoint = function( t ) {
    
        var d = t * this.getLength();
        var curveLengths = this.getCurveLengths();
        var i = 0, diff, curve;
    
        // To think about boundaries points.
    
        while ( i < curveLengths.length ) {
    
            if ( curveLengths[ i ] >= d ) {
    
                diff = curveLengths[ i ] - d;
                curve = this.curves[ i ];
    
                var u = 1 - diff / curve.getLength();
    
                return curve.getPointAt( u );
    
                break;
            }
    
            i ++;
    
        }
    
        return null;
    
        // loop where sum != 0, sum > d , sum+1 <d
    
    };
    
    /*
    THREE.CurvePath.prototype.getTangent = function( t ) {
    };*/
    
    
    // We cannot use the default THREE.Curve getPoint() with getLength() because in
    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
    // getPoint() depends on getLength
    
    THREE.CurvePath.prototype.getLength = function() {
    
        var lens = this.getCurveLengths();
        return lens[ lens.length - 1 ];
    
    };
    
    // Compute lengths and cache them
    // We cannot overwrite getLengths() because UtoT mapping uses it.
    
    THREE.CurvePath.prototype.getCurveLengths = function() {
    
        // We use cache values if curves and cache array are same length
    
        if ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {
    
            return this.cacheLengths;
    
        };
    
        // Get length of subsurve
        // Push sums into cached array
    
        var lengths = [], sums = 0;
        var i, il = this.curves.length;
    
        for ( i = 0; i < il; i ++ ) {
    
            sums += this.curves[ i ].getLength();
            lengths.push( sums );
    
        }
    
        this.cacheLengths = lengths;
    
        return lengths;
    
    };
    
    
    
    // Returns min and max coordinates
    
    THREE.CurvePath.prototype.getBoundingBox = function () {
    
        var points = this.getPoints();
    
        var maxX, maxY, maxZ;
        var minX, minY, minZ;
    
        maxX = maxY = Number.NEGATIVE_INFINITY;
        minX = minY = Number.POSITIVE_INFINITY;
    
        var p, i, il, sum;
    
        var v3 = points[0] instanceof THREE.Vector3;
    
        sum = v3 ? new THREE.Vector3() : new THREE.Vector2();
    
        for ( i = 0, il = points.length; i < il; i ++ ) {
    
            p = points[ i ];
    
            if ( p.x > maxX ) maxX = p.x;
            else if ( p.x < minX ) minX = p.x;
    
            if ( p.y > maxY ) maxY = p.y;
            else if ( p.y < minY ) minY = p.y;
    
            if ( v3 ) {
    
                if ( p.z > maxZ ) maxZ = p.z;
                else if ( p.z < minZ ) minZ = p.z;
    
            }
    
            sum.add( p );
    
        }
    
        var ret = {
    
            minX: minX,
            minY: minY,
            maxX: maxX,
            maxY: maxY
    
        };
    
        if ( v3 ) {
    
            ret.maxZ = maxZ;
            ret.minZ = minZ;
    
        }
    
        return ret;
    
    };
    
    /**************************************************************
     *	Create Geometries Helpers
     **************************************************************/
    
    /// Generate geometry from path points (for Line or Points objects)
    
    THREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {
    
        var pts = this.getPoints( divisions, true );
        return this.createGeometry( pts );
    
    };
    
    // Generate geometry from equidistance sampling along the path
    
    THREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {
    
        var pts = this.getSpacedPoints( divisions, true );
        return this.createGeometry( pts );
    
    };
    
    THREE.CurvePath.prototype.createGeometry = function( points ) {
    
        var geometry = new THREE.Geometry();
    
        for ( var i = 0; i < points.length; i ++ ) {
    
            geometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );
    
        }
    
        return geometry;
    
    };
    
    
    /**************************************************************
     *	Bend / Wrap Helper Methods
     **************************************************************/
    
    // Wrap path / Bend modifiers?
    
    THREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {
    
        this.bends.push( bendpath );
    
    };
    
    THREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {
    
        var oldPts = this.getPoints( segments ); // getPoints getSpacedPoints
        var i, il;
    
        if ( ! bends ) {
    
            bends = this.bends;
    
        }
    
        for ( i = 0, il = bends.length; i < il; i ++ ) {
    
            oldPts = this.getWrapPoints( oldPts, bends[ i ] );
    
        }
    
        return oldPts;
    
    };
    
    THREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {
    
        var oldPts = this.getSpacedPoints( segments );
    
        var i, il;
    
        if ( ! bends ) {
    
            bends = this.bends;
    
        }
    
        for ( i = 0, il = bends.length; i < il; i ++ ) {
    
            oldPts = this.getWrapPoints( oldPts, bends[ i ] );
    
        }
    
        return oldPts;
    
    };
    
    // This returns getPoints() bend/wrapped around the contour of a path.
    // Read http://www.planetclegg.com/projects/WarpingTextToSplines.html
    
    THREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {
    
        var bounds = this.getBoundingBox();
    
        var i, il, p, oldX, oldY, xNorm;
    
        for ( i = 0, il = oldPts.length; i < il; i ++ ) {
    
            p = oldPts[ i ];
    
            oldX = p.x;
            oldY = p.y;
    
            xNorm = oldX / bounds.maxX;
    
            // If using actual distance, for length > path, requires line extrusions
            //xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance
    
            xNorm = path.getUtoTmapping( xNorm, oldX );
    
            // check for out of bounds?
    
            var pathPt = path.getPoint( xNorm );
            var normal = path.getTangent( xNorm );
            normal.set( - normal.y, normal.x ).multiplyScalar( oldY );
    
            p.x = pathPt.x + normal.x;
            p.y = pathPt.y + normal.y;
    
        }
    
        return oldPts;
    
    };
    
    
    // File:src/extras/core/Gyroscope.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Gyroscope = function () {
    
        THREE.Object3D.call( this );
    
    };
    
    THREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.Gyroscope.prototype.updateMatrixWorld = ( function () {
    
        var translationObject = new THREE.Vector3();
        var quaternionObject = new THREE.Quaternion();
        var scaleObject = new THREE.Vector3();
    
        var translationWorld = new THREE.Vector3();
        var quaternionWorld = new THREE.Quaternion();
        var scaleWorld = new THREE.Vector3();
    
        return function ( force ) {
    
            this.matrixAutoUpdate && this.updateMatrix();
    
            // update matrixWorld
    
            if ( this.matrixWorldNeedsUpdate || force ) {
    
                if ( this.parent ) {
    
                    this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
    
                    this.matrixWorld.decompose( translationWorld, quaternionWorld, scaleWorld );
                    this.matrix.decompose( translationObject, quaternionObject, scaleObject );
    
                    this.matrixWorld.compose( translationWorld, quaternionObject, scaleWorld );
    
    
                } else {
    
                    this.matrixWorld.copy( this.matrix );
    
                }
    
    
                this.matrixWorldNeedsUpdate = false;
    
                force = true;
    
            }
    
            // update children
    
            for ( var i = 0, l = this.children.length; i < l; i ++ ) {
    
                this.children[ i ].updateMatrixWorld( force );
    
            }
    
        };
        
    }() );
    
    // File:src/extras/core/Path.js
    
    /**
     * @author zz85 / http://www.lab4games.net/zz85/blog
     * Creates free form 2d path using series of points, lines or curves.
     *
     **/
    
    THREE.Path = function ( points ) {
    
        THREE.CurvePath.call(this);
    
        this.actions = [];
    
        if ( points ) {
    
            this.fromPoints( points );
    
        }
    
    };
    
    THREE.Path.prototype = Object.create( THREE.CurvePath.prototype );
    
    THREE.PathActions = {
    
        MOVE_TO: 'moveTo',
        LINE_TO: 'lineTo',
        QUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve
        BEZIER_CURVE_TO: 'bezierCurveTo', 		// Bezier cubic curve
        CSPLINE_THRU: 'splineThru',				// Catmull-rom spline
        ARC: 'arc',								// Circle
        ELLIPSE: 'ellipse'
    };
    
    // TODO Clean up PATH API
    
    // Create path using straight lines to connect all points
    // - vectors: array of Vector2
    
    THREE.Path.prototype.fromPoints = function ( vectors ) {
    
        this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );
    
        for ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {
    
            this.lineTo( vectors[ v ].x, vectors[ v ].y );
    
        };
    
    };
    
    // startPath() endPath()?
    
    THREE.Path.prototype.moveTo = function ( x, y ) {
    
        var args = Array.prototype.slice.call( arguments );
        this.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );
    
    };
    
    THREE.Path.prototype.lineTo = function ( x, y ) {
    
        var args = Array.prototype.slice.call( arguments );
    
        var lastargs = this.actions[ this.actions.length - 1 ].args;
    
        var x0 = lastargs[ lastargs.length - 2 ];
        var y0 = lastargs[ lastargs.length - 1 ];
    
        var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
        this.curves.push( curve );
    
        this.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );
    
    };
    
    THREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {
    
        var args = Array.prototype.slice.call( arguments );
    
        var lastargs = this.actions[ this.actions.length - 1 ].args;
    
        var x0 = lastargs[ lastargs.length - 2 ];
        var y0 = lastargs[ lastargs.length - 1 ];
    
        var curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),
                                                    new THREE.Vector2( aCPx, aCPy ),
                                                    new THREE.Vector2( aX, aY ) );
        this.curves.push( curve );
    
        this.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );
    
    };
    
    THREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,
                                                   aCP2x, aCP2y,
                                                   aX, aY ) {
    
        var args = Array.prototype.slice.call( arguments );
    
        var lastargs = this.actions[ this.actions.length - 1 ].args;
    
        var x0 = lastargs[ lastargs.length - 2 ];
        var y0 = lastargs[ lastargs.length - 1 ];
    
        var curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),
                                                new THREE.Vector2( aCP1x, aCP1y ),
                                                new THREE.Vector2( aCP2x, aCP2y ),
                                                new THREE.Vector2( aX, aY ) );
        this.curves.push( curve );
    
        this.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );
    
    };
    
    THREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {
    
        var args = Array.prototype.slice.call( arguments );
        var lastargs = this.actions[ this.actions.length - 1 ].args;
    
        var x0 = lastargs[ lastargs.length - 2 ];
        var y0 = lastargs[ lastargs.length - 1 ];
    //---
        var npts = [ new THREE.Vector2( x0, y0 ) ];
        Array.prototype.push.apply( npts, pts );
    
        var curve = new THREE.SplineCurve( npts );
        this.curves.push( curve );
    
        this.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );
    
    };
    
    // FUTURE: Change the API or follow canvas API?
    
    THREE.Path.prototype.arc = function ( aX, aY, aRadius,
                                          aStartAngle, aEndAngle, aClockwise ) {
    
        var lastargs = this.actions[ this.actions.length - 1].args;
        var x0 = lastargs[ lastargs.length - 2 ];
        var y0 = lastargs[ lastargs.length - 1 ];
    
        this.absarc(aX + x0, aY + y0, aRadius,
            aStartAngle, aEndAngle, aClockwise );
    
     };
    
     THREE.Path.prototype.absarc = function ( aX, aY, aRadius,
                                          aStartAngle, aEndAngle, aClockwise ) {
        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
     };
    
    THREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,
                                          aStartAngle, aEndAngle, aClockwise ) {
    
        var lastargs = this.actions[ this.actions.length - 1].args;
        var x0 = lastargs[ lastargs.length - 2 ];
        var y0 = lastargs[ lastargs.length - 1 ];
    
        this.absellipse(aX + x0, aY + y0, xRadius, yRadius,
            aStartAngle, aEndAngle, aClockwise );
    
     };
    
    
    THREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,
                                          aStartAngle, aEndAngle, aClockwise ) {
    
        var args = Array.prototype.slice.call( arguments );
        var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,
                                        aStartAngle, aEndAngle, aClockwise );
        this.curves.push( curve );
    
        var lastPoint = curve.getPoint(1);
        args.push(lastPoint.x);
        args.push(lastPoint.y);
    
        this.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );
    
     };
    
    THREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {
    
        if ( ! divisions ) divisions = 40;
    
        var points = [];
    
        for ( var i = 0; i < divisions; i ++ ) {
    
            points.push( this.getPoint( i / divisions ) );
    
            //if( !this.getPoint( i / divisions ) ) throw "DIE";
    
        }
    
        // if ( closedPath ) {
        //
        // 	points.push( points[ 0 ] );
        //
        // }
    
        return points;
    
    };
    
    /* Return an array of vectors based on contour of the path */
    
    THREE.Path.prototype.getPoints = function( divisions, closedPath ) {
    
        if (this.useSpacedPoints) {
            console.log('tata');
            return this.getSpacedPoints( divisions, closedPath );
        }
    
        divisions = divisions || 12;
    
        var points = [];
    
        var i, il, item, action, args;
        var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
            laste, j,
            t, tx, ty;
    
        for ( i = 0, il = this.actions.length; i < il; i ++ ) {
    
            item = this.actions[ i ];
    
            action = item.action;
            args = item.args;
    
            switch( action ) {
    
            case THREE.PathActions.MOVE_TO:
    
                points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );
    
                break;
    
            case THREE.PathActions.LINE_TO:
    
                points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );
    
                break;
    
            case THREE.PathActions.QUADRATIC_CURVE_TO:
    
                cpx  = args[ 2 ];
                cpy  = args[ 3 ];
    
                cpx1 = args[ 0 ];
                cpy1 = args[ 1 ];
    
                if ( points.length > 0 ) {
    
                    laste = points[ points.length - 1 ];
    
                    cpx0 = laste.x;
                    cpy0 = laste.y;
    
                } else {
    
                    laste = this.actions[ i - 1 ].args;
    
                    cpx0 = laste[ laste.length - 2 ];
                    cpy0 = laste[ laste.length - 1 ];
    
                }
    
                for ( j = 1; j <= divisions; j ++ ) {
    
                    t = j / divisions;
    
                    tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
                    ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );
    
                    points.push( new THREE.Vector2( tx, ty ) );
    
                }
    
                break;
    
            case THREE.PathActions.BEZIER_CURVE_TO:
    
                cpx  = args[ 4 ];
                cpy  = args[ 5 ];
    
                cpx1 = args[ 0 ];
                cpy1 = args[ 1 ];
    
                cpx2 = args[ 2 ];
                cpy2 = args[ 3 ];
    
                if ( points.length > 0 ) {
    
                    laste = points[ points.length - 1 ];
    
                    cpx0 = laste.x;
                    cpy0 = laste.y;
    
                } else {
    
                    laste = this.actions[ i - 1 ].args;
    
                    cpx0 = laste[ laste.length - 2 ];
                    cpy0 = laste[ laste.length - 1 ];
    
                }
    
    
                for ( j = 1; j <= divisions; j ++ ) {
    
                    t = j / divisions;
    
                    tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
                    ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );
    
                    points.push( new THREE.Vector2( tx, ty ) );
    
                }
    
                break;
    
            case THREE.PathActions.CSPLINE_THRU:
    
                laste = this.actions[ i - 1 ].args;
    
                var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
                var spts = [ last ];
    
                var n = divisions * args[ 0 ].length;
    
                spts = spts.concat( args[ 0 ] );
    
                var spline = new THREE.SplineCurve( spts );
    
                for ( j = 1; j <= n; j ++ ) {
    
                    points.push( spline.getPointAt( j / n ) ) ;
    
                }
    
                break;
    
            case THREE.PathActions.ARC:
    
                var aX = args[ 0 ], aY = args[ 1 ],
                    aRadius = args[ 2 ],
                    aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
                    aClockwise = !! args[ 5 ];
    
                var deltaAngle = aEndAngle - aStartAngle;
                var angle;
                var tdivisions = divisions * 2;
    
                for ( j = 1; j <= tdivisions; j ++ ) {
    
                    t = j / tdivisions;
    
                    if ( ! aClockwise ) {
    
                        t = 1 - t;
    
                    }
    
                    angle = aStartAngle + t * deltaAngle;
    
                    tx = aX + aRadius * Math.cos( angle );
                    ty = aY + aRadius * Math.sin( angle );
    
                    //console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);
    
                    points.push( new THREE.Vector2( tx, ty ) );
    
                }
    
                //console.log(points);
    
              break;
              
            case THREE.PathActions.ELLIPSE:
    
                var aX = args[ 0 ], aY = args[ 1 ],
                    xRadius = args[ 2 ],
                    yRadius = args[ 3 ],
                    aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
                    aClockwise = !! args[ 6 ];
    
    
                var deltaAngle = aEndAngle - aStartAngle;
                var angle;
                var tdivisions = divisions * 2;
    
                for ( j = 1; j <= tdivisions; j ++ ) {
    
                    t = j / tdivisions;
    
                    if ( ! aClockwise ) {
    
                        t = 1 - t;
    
                    }
    
                    angle = aStartAngle + t * deltaAngle;
    
                    tx = aX + xRadius * Math.cos( angle );
                    ty = aY + yRadius * Math.sin( angle );
    
                    //console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);
    
                    points.push( new THREE.Vector2( tx, ty ) );
    
                }
    
                //console.log(points);
    
              break;
    
            } // end switch
    
        }
    
    
    
        // Normalize to remove the closing point by default.
        var lastPoint = points[ points.length - 1];
        var EPSILON = 0.0000000001;
        if ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&
                 Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)
            points.splice( points.length - 1, 1);
        if ( closedPath ) {
    
            points.push( points[ 0 ] );
    
        }
    
        return points;
    
    };
    
    //
    // Breaks path into shapes
    //
    //	Assumptions (if parameter isCCW==true the opposite holds):
    //	- solid shapes are defined clockwise (CW)
    //	- holes are defined counterclockwise (CCW)
    //
    //	If parameter noHoles==true:
    //  - all subPaths are regarded as solid shapes
    //  - definition order CW/CCW has no relevance
    //
    
    THREE.Path.prototype.toShapes = function( isCCW, noHoles ) {
    
        function extractSubpaths( inActions ) {
    
            var i, il, item, action, args;
    
            var subPaths = [], lastPath = new THREE.Path();
    
            for ( i = 0, il = inActions.length; i < il; i ++ ) {
    
                item = inActions[ i ];
    
                args = item.args;
                action = item.action;
    
                if ( action == THREE.PathActions.MOVE_TO ) {
    
                    if ( lastPath.actions.length != 0 ) {
    
                        subPaths.push( lastPath );
                        lastPath = new THREE.Path();
    
                    }
    
                }
    
                lastPath[ action ].apply( lastPath, args );
    
            }
    
            if ( lastPath.actions.length != 0 ) {
    
                subPaths.push( lastPath );
    
            }
    
            // console.log(subPaths);
    
            return	subPaths;
        }
    
        function toShapesNoHoles( inSubpaths ) {
    
            var shapes = [];
    
            for ( var i = 0, il = inSubpaths.length; i < il; i ++ ) {
    
                var tmpPath = inSubpaths[ i ];
    
                var tmpShape = new THREE.Shape();
                tmpShape.actions = tmpPath.actions;
                tmpShape.curves = tmpPath.curves;
    
                shapes.push( tmpShape );
            }
    
            //console.log("shape", shapes);
    
            return shapes;
        };
    
        function isPointInsidePolygon( inPt, inPolygon ) {
            var EPSILON = 0.0000000001;
    
            var polyLen = inPolygon.length;
    
            // inPt on polygon contour => immediate success    or
            // toggling of inside/outside at every single! intersection point of an edge
            //  with the horizontal line through inPt, left of inPt
            //  not counting lowerY endpoints of edges and whole edges on that line
            var inside = false;
            for( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
                var edgeLowPt  = inPolygon[ p ];
                var edgeHighPt = inPolygon[ q ];
    
                var edgeDx = edgeHighPt.x - edgeLowPt.x;
                var edgeDy = edgeHighPt.y - edgeLowPt.y;
    
                if ( Math.abs(edgeDy) > EPSILON ) {			// not parallel
                    if ( edgeDy < 0 ) {
                        edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
                        edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
                    }
                    if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
    
                    if ( inPt.y == edgeLowPt.y ) {
                        if ( inPt.x == edgeLowPt.x )		return	true;		// inPt is on contour ?
                        // continue;				// no intersection or edgeLowPt => doesn't count !!!
                    } else {
                        var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                        if ( perpEdge == 0 )				return	true;		// inPt is on contour ?
                        if ( perpEdge < 0 ) 				continue;
                        inside = ! inside;		// true intersection left of inPt
                    }
                } else {		// parallel or colinear
                    if ( inPt.y != edgeLowPt.y ) 		continue;			// parallel
                    // egde lies on the same horizontal line as inPt
                    if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
                         ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
                    // continue;
                }
            }
    
            return	inside;
        }
    
    
        var subPaths = extractSubpaths( this.actions );
        if ( subPaths.length == 0 ) return [];
    
        if ( noHoles === true )	return	toShapesNoHoles( subPaths );
    
    
        var solid, tmpPath, tmpShape, shapes = [];
    
        if ( subPaths.length == 1) {
    
            tmpPath = subPaths[0];
            tmpShape = new THREE.Shape();
            tmpShape.actions = tmpPath.actions;
            tmpShape.curves = tmpPath.curves;
            shapes.push( tmpShape );
            return shapes;
    
        }
    
        var holesFirst = ! THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );
        holesFirst = isCCW ? ! holesFirst : holesFirst;
    
        // console.log("Holes first", holesFirst);
        
        var betterShapeHoles = [];
        var newShapes = [];
        var newShapeHoles = [];
        var mainIdx = 0;
        var tmpPoints;
    
        newShapes[mainIdx] = undefined;
        newShapeHoles[mainIdx] = [];
    
        var i, il;
    
        for ( i = 0, il = subPaths.length; i < il; i ++ ) {
    
            tmpPath = subPaths[ i ];
            tmpPoints = tmpPath.getPoints();
            solid = THREE.Shape.Utils.isClockWise( tmpPoints );
            solid = isCCW ? ! solid : solid;
    
            if ( solid ) {
    
                if ( (! holesFirst ) && ( newShapes[mainIdx] ) )	mainIdx ++;
    
                newShapes[mainIdx] = { s: new THREE.Shape(), p: tmpPoints };
                newShapes[mainIdx].s.actions = tmpPath.actions;
                newShapes[mainIdx].s.curves = tmpPath.curves;
                
                if ( holesFirst )	mainIdx ++;
                newShapeHoles[mainIdx] = [];
    
                //console.log('cw', i);
    
            } else {
    
                newShapeHoles[mainIdx].push( { h: tmpPath, p: tmpPoints[0] } );
    
                //console.log('ccw', i);
    
            }
    
        }
    
        // only Holes? -> probably all Shapes with wrong orientation
        if ( ! newShapes[0] )	return	toShapesNoHoles( subPaths );
    
    
        if ( newShapes.length > 1 ) {
            var ambigious = false;
            var toChange = [];
    
            for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
                betterShapeHoles[sIdx] = [];
            }
            for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
                var sh = newShapes[sIdx];
                var sho = newShapeHoles[sIdx];
                for (var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
                    var ho = sho[hIdx];
                    var hole_unassigned = true;
                    for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
                        if ( isPointInsidePolygon( ho.p, newShapes[s2Idx].p ) ) {
                            if ( sIdx != s2Idx )		toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
                            if ( hole_unassigned ) {
                                hole_unassigned = false;
                                betterShapeHoles[s2Idx].push( ho );
                            } else {
                                ambigious = true;
                            }
                        }
                    }
                    if ( hole_unassigned ) { betterShapeHoles[sIdx].push( ho ); }
                }
            }
            // console.log("ambigious: ", ambigious);
            if ( toChange.length > 0 ) {
                // console.log("to change: ", toChange);
                if (! ambigious)	newShapeHoles = betterShapeHoles;
            }
        }
    
        var tmpHoles, j, jl;
        for ( i = 0, il = newShapes.length; i < il; i ++ ) {
            tmpShape = newShapes[i].s;
            shapes.push( tmpShape );
            tmpHoles = newShapeHoles[i];
            for ( j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
                tmpShape.holes.push( tmpHoles[j].h );
            }
        }
    
        //console.log("shape", shapes);
    
        return shapes;
    
    };
    
    // File:src/extras/core/Shape.js
    
    /**
     * @author zz85 / http://www.lab4games.net/zz85/blog
     * Defines a 2d shape plane using paths.
     **/
    
    // STEP 1 Create a path.
    // STEP 2 Turn path into shape.
    // STEP 3 ExtrudeGeometry takes in Shape/Shapes
    // STEP 3a - Extract points from each shape, turn to vertices
    // STEP 3b - Triangulate each shape, add faces.
    
    THREE.Shape = function () {
    
        THREE.Path.apply( this, arguments );
        this.holes = [];
    
    };
    
    THREE.Shape.prototype = Object.create( THREE.Path.prototype );
    
    // Convenience method to return ExtrudeGeometry
    
    THREE.Shape.prototype.extrude = function ( options ) {
    
        var extruded = new THREE.ExtrudeGeometry( this, options );
        return extruded;
    
    };
    
    // Convenience method to return ShapeGeometry
    
    THREE.Shape.prototype.makeGeometry = function ( options ) {
    
        var geometry = new THREE.ShapeGeometry( this, options );
        return geometry;
    
    };
    
    // Get points of holes
    
    THREE.Shape.prototype.getPointsHoles = function ( divisions ) {
    
        var i, il = this.holes.length, holesPts = [];
    
        for ( i = 0; i < il; i ++ ) {
    
            holesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );
    
        }
    
        return holesPts;
    
    };
    
    // Get points of holes (spaced by regular distance)
    
    THREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {
    
        var i, il = this.holes.length, holesPts = [];
    
        for ( i = 0; i < il; i ++ ) {
    
            holesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );
    
        }
    
        return holesPts;
    
    };
    
    
    // Get points of shape and holes (keypoints based on segments parameter)
    
    THREE.Shape.prototype.extractAllPoints = function ( divisions ) {
    
        return {
    
            shape: this.getTransformedPoints( divisions ),
            holes: this.getPointsHoles( divisions )
    
        };
    
    };
    
    THREE.Shape.prototype.extractPoints = function ( divisions ) {
    
        if (this.useSpacedPoints) {
            return this.extractAllSpacedPoints(divisions);
        }
    
        return this.extractAllPoints(divisions);
    
    };
    
    //
    // THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {
    //
    // 	return {
    //
    // 		shape: this.transform( bend, divisions ),
    // 		holes: this.getPointsHoles( divisions, bend )
    //
    // 	};
    //
    // };
    
    // Get points of shape and holes (spaced by regular distance)
    
    THREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {
    
        return {
    
            shape: this.getTransformedSpacedPoints( divisions ),
            holes: this.getSpacedPointsHoles( divisions )
    
        };
    
    };
    
    /**************************************************************
     *	Utils
     **************************************************************/
    
    THREE.Shape.Utils = {
    
        triangulateShape: function ( contour, holes ) {
    
            function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {
                // inOtherPt needs to be colinear to the inSegment
                if ( inSegPt1.x != inSegPt2.x ) {
                    if ( inSegPt1.x < inSegPt2.x ) {
                        return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );
                    } else {
                        return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );
                    }
                } else {
                    if ( inSegPt1.y < inSegPt2.y ) {
                        return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );
                    } else {
                        return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );
                    }
                }
            }
    
            function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {
                var EPSILON = 0.0000000001;
    
                var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
                var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;
    
                var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
                var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;
    
                var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
                var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;
    
                if ( Math.abs(limit) > EPSILON ) {			// not parallel
    
                    var perpSeg2;
                    if ( limit > 0 ) {
                        if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
                        perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
                        if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];
                    } else {
                        if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
                        perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
                        if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];
                    }
    
                    // i.e. to reduce rounding errors
                    // intersection at endpoint of segment#1?
                    if ( perpSeg2 == 0 ) {
                        if ( ( inExcludeAdjacentSegs ) &&
                             ( ( perpSeg1 == 0 ) || ( perpSeg1 == limit ) ) )		return [];
                        return  [ inSeg1Pt1 ];
                    }
                    if ( perpSeg2 == limit ) {
                        if ( ( inExcludeAdjacentSegs ) &&
                             ( ( perpSeg1 == 0 ) || ( perpSeg1 == limit ) ) )		return [];
                        return  [ inSeg1Pt2 ];
                    }
                    // intersection at endpoint of segment#2?
                    if ( perpSeg1 == 0 )		return  [ inSeg2Pt1 ];
                    if ( perpSeg1 == limit )	return  [ inSeg2Pt2 ];
    
                    // return real intersection point
                    var factorSeg1 = perpSeg2 / limit;
                    return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
                                y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];
    
                } else {		// parallel or colinear
                    if ( ( perpSeg1 != 0 ) ||
                         ( seg2dy * seg1seg2dx != seg2dx * seg1seg2dy ) ) 			return [];
    
                    // they are collinear or degenerate
                    var seg1Pt = ( (seg1dx == 0) && (seg1dy == 0) );	// segment1 ist just a point?
                    var seg2Pt = ( (seg2dx == 0) && (seg2dy == 0) );	// segment2 ist just a point?
                    // both segments are points
                    if ( seg1Pt && seg2Pt ) {
                        if ( (inSeg1Pt1.x != inSeg2Pt1.x) ||
                             (inSeg1Pt1.y != inSeg2Pt1.y) )		return [];   	// they are distinct  points
                        return  [ inSeg1Pt1 ];                 					// they are the same point
                    }
                    // segment#1  is a single point
                    if ( seg1Pt ) {
                        if (! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
                        return  [ inSeg1Pt1 ];
                    }
                    // segment#2  is a single point
                    if ( seg2Pt ) {
                        if (! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
                        return  [ inSeg2Pt1 ];
                    }
    
                    // they are collinear segments, which might overlap
                    var seg1min, seg1max, seg1minVal, seg1maxVal;
                    var seg2min, seg2max, seg2minVal, seg2maxVal;
                    if (seg1dx != 0) {		// the segments are NOT on a vertical line
                        if ( inSeg1Pt1.x < inSeg1Pt2.x ) {
                            seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
                            seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;
                        } else {
                            seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
                            seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;
                        }
                        if ( inSeg2Pt1.x < inSeg2Pt2.x ) {
                            seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
                            seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;
                        } else {
                            seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
                            seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;
                        }
                    } else {				// the segments are on a vertical line
                        if ( inSeg1Pt1.y < inSeg1Pt2.y ) {
                            seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
                            seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;
                        } else {
                            seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
                            seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;
                        }
                        if ( inSeg2Pt1.y < inSeg2Pt2.y ) {
                            seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
                            seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;
                        } else {
                            seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
                            seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;
                        }
                    }
                    if ( seg1minVal <= seg2minVal ) {
                        if ( seg1maxVal <  seg2minVal )	return [];
                        if ( seg1maxVal == seg2minVal )	{
                            if ( inExcludeAdjacentSegs )		return [];
                            return [ seg2min ];
                        }
                        if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
                        return	[ seg2min, seg2max ];
                    } else {
                        if ( seg1minVal >  seg2maxVal )	return [];
                        if ( seg1minVal == seg2maxVal )	{
                            if ( inExcludeAdjacentSegs )		return [];
                            return [ seg1min ];
                        }
                        if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
                        return	[ seg1min, seg2max ];
                    }
                }
            }
    
            function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {
                // The order of legs is important
    
                var EPSILON = 0.0000000001;
    
                // translation of all points, so that Vertex is at (0,0)
                var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
                var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
                var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;
    
                // main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
                var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
                var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;
    
                if ( Math.abs(from2toAngle) > EPSILON ) {			// angle != 180 deg.
    
                    var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
                    // console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );
    
                    if ( from2toAngle > 0 ) {				// main angle < 180 deg.
                        return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );
                    } else {								// main angle > 180 deg.
                        return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );
                    }
                } else {										// angle == 180 deg.
                    // console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
                    return	( from2otherAngle > 0 );
                }
            }
    
    
            function removeHoles( contour, holes ) {
    
                var shape = contour.concat(); // work on this shape
                var hole;
    
                function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {
                    // Check if hole point lies within angle around shape point
                    var lastShapeIdx = shape.length - 1;
    
                    var prevShapeIdx = inShapeIdx - 1;
                    if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;
    
                    var nextShapeIdx = inShapeIdx + 1;
                    if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;
    
                    var insideAngle = isPointInsideAngle( shape[inShapeIdx], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[inHoleIdx] );
                    if (! insideAngle ) {
                        // console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
                        return	false;
                    }
    
                    // Check if shape point lies within angle around hole point
                    var lastHoleIdx = hole.length - 1;
    
                    var prevHoleIdx = inHoleIdx - 1;
                    if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;
    
                    var nextHoleIdx = inHoleIdx + 1;
                    if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;
    
                    insideAngle = isPointInsideAngle( hole[inHoleIdx], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[inShapeIdx] );
                    if (! insideAngle ) {
                        // console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
                        return	false;
                    }
    
                    return	true;
                }
    
                function intersectsShapeEdge( inShapePt, inHolePt ) {
                    // checks for intersections with shape edges
                    var sIdx, nextIdx, intersection;
                    for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {
                        nextIdx = sIdx+1; nextIdx %= shape.length;
                        intersection = intersect_segments_2D( inShapePt, inHolePt, shape[sIdx], shape[nextIdx], true );
                        if ( intersection.length > 0 )		return	true;
                    }
    
                    return	false;
                }
    
                var indepHoles = [];
    
                function intersectsHoleEdge( inShapePt, inHolePt ) {
                    // checks for intersections with hole edges
                    var ihIdx, chkHole,
                        hIdx, nextIdx, intersection;
                    for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {
                        chkHole = holes[indepHoles[ihIdx]];
                        for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {
                            nextIdx = hIdx+1; nextIdx %= chkHole.length;
                            intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[hIdx], chkHole[nextIdx], true );
                            if ( intersection.length > 0 )		return	true;
                        }
                    }
                    return	false;
                }
    
                var holeIndex, shapeIndex,
                    shapePt, holePt,
                    holeIdx, cutKey, failedCuts = [],
                    tmpShape1, tmpShape2,
                    tmpHole1, tmpHole2;
    
                for ( var h = 0, hl = holes.length; h < hl; h ++ ) {
    
                    indepHoles.push( h );
    
                }
    
                var minShapeIndex = 0;
                var counter = indepHoles.length * 2;
                while ( indepHoles.length > 0 ) {
                    counter --;
                    if ( counter < 0 ) {
                        console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
                        break;
                    }
    
                    // search for shape-vertex and hole-vertex,
                    // which can be connected without intersections
                    for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {
    
                        shapePt = shape[ shapeIndex ];
                        holeIndex	= - 1;
    
                        // search for hole which can be reached without intersections
                        for ( var h = 0; h < indepHoles.length; h ++ ) {
                            holeIdx = indepHoles[h];
    
                            // prevent multiple checks
                            cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
                            if ( failedCuts[cutKey] !== undefined )			continue;
    
                            hole = holes[holeIdx];
                            for ( var h2 = 0; h2 < hole.length; h2 ++ ) {
                                holePt = hole[ h2 ];
                                if (! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
                                if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
                                if ( intersectsHoleEdge( shapePt, holePt ) )		continue;
    
                                holeIndex = h2;
                                indepHoles.splice(h,1);
    
                                tmpShape1 = shape.slice( 0, shapeIndex+1 );
                                tmpShape2 = shape.slice( shapeIndex );
                                tmpHole1 = hole.slice( holeIndex );
                                tmpHole2 = hole.slice( 0, holeIndex+1 );
    
                                shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );
    
                                minShapeIndex = shapeIndex;
    
                                // Debug only, to show the selected cuts
                                // glob_CutLines.push( [ shapePt, holePt ] );
    
                                break;
                            }
                            if ( holeIndex >= 0 )	break;		// hole-vertex found
    
                            failedCuts[cutKey] = true;			// remember failure
                        }
                        if ( holeIndex >= 0 )	break;		// hole-vertex found
                    }
                }
    
                return shape; 			/* shape with no holes */
            }
    
    
            var i, il, f, face,
                key, index,
                allPointsMap = {};
    
            // To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.
    
            var allpoints = contour.concat();
    
            for ( var h = 0, hl = holes.length; h < hl; h ++ ) {
    
                Array.prototype.push.apply( allpoints, holes[h] );
    
            }
    
            //console.log( "allpoints",allpoints, allpoints.length );
    
            // prepare all points map
    
            for ( i = 0, il = allpoints.length; i < il; i ++ ) {
    
                key = allpoints[ i ].x + ":" + allpoints[ i ].y;
    
                if ( allPointsMap[ key ] !== undefined ) {
    
                    console.log( "Duplicate point", key );
    
                }
    
                allPointsMap[ key ] = i;
    
            }
    
            // remove holes by cutting paths to holes and adding them to the shape
            var shapeWithoutHoles = removeHoles( contour, holes );
    
            var triangles = THREE.FontUtils.Triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
            //console.log( "triangles",triangles, triangles.length );
    
            // check all face vertices against all points map
    
            for ( i = 0, il = triangles.length; i < il; i ++ ) {
    
                face = triangles[ i ];
    
                for ( f = 0; f < 3; f ++ ) {
    
                    key = face[ f ].x + ":" + face[ f ].y;
    
                    index = allPointsMap[ key ];
    
                    if ( index !== undefined ) {
    
                        face[ f ] = index;
    
                    }
    
                }
    
            }
    
            return triangles.concat();
    
        },
    
        isClockWise: function ( pts ) {
    
            return THREE.FontUtils.Triangulate.area( pts ) < 0;
    
        },
    
        // Bezier Curves formulas obtained from
        // http://en.wikipedia.org/wiki/B%C3%A9zier_curve
    
        // Quad Bezier Functions
    
        b2p0: function ( t, p ) {
    
            var k = 1 - t;
            return k * k * p;
    
        },
    
        b2p1: function ( t, p ) {
    
            return 2 * ( 1 - t ) * t * p;
    
        },
    
        b2p2: function ( t, p ) {
    
            return t * t * p;
    
        },
    
        b2: function ( t, p0, p1, p2 ) {
    
            return this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );
    
        },
    
        // Cubic Bezier Functions
    
        b3p0: function ( t, p ) {
    
            var k = 1 - t;
            return k * k * k * p;
    
        },
    
        b3p1: function ( t, p ) {
    
            var k = 1 - t;
            return 3 * k * k * t * p;
    
        },
    
        b3p2: function ( t, p ) {
    
            var k = 1 - t;
            return 3 * k * t * t * p;
    
        },
    
        b3p3: function ( t, p ) {
    
            return t * t * t * p;
    
        },
    
        b3: function ( t, p0, p1, p2, p3 ) {
    
            return this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );
    
        }
    
    };
    
    
    // File:src/extras/curves/LineCurve.js
    
    /**************************************************************
     *	Line
     **************************************************************/
    
    THREE.LineCurve = function ( v1, v2 ) {
    
        this.v1 = v1;
        this.v2 = v2;
    
    };
    
    THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );
    
    THREE.LineCurve.prototype.getPoint = function ( t ) {
    
        var point = this.v2.clone().sub(this.v1);
        point.multiplyScalar( t ).add( this.v1 );
    
        return point;
    
    };
    
    // Line curve is linear, so we can overwrite default getPointAt
    
    THREE.LineCurve.prototype.getPointAt = function ( u ) {
    
        return this.getPoint( u );
    
    };
    
    THREE.LineCurve.prototype.getTangent = function( t ) {
    
        var tangent = this.v2.clone().sub(this.v1);
    
        return tangent.normalize();
    
    };
    
    // File:src/extras/curves/QuadraticBezierCurve.js
    
    /**************************************************************
     *	Quadratic Bezier curve
     **************************************************************/
    
    
    THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {
    
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
    
    };
    
    THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );
    
    
    THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {
    
        var vector = new THREE.Vector2();
    
        vector.x = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
        vector.y = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );
    
        return vector;
    
    };
    
    
    THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {
    
        var vector = new THREE.Vector2();
    
        vector.x = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );
        vector.y = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );
    
        // returns unit vector
    
        return vector.normalize();
    
    };
    
    // File:src/extras/curves/CubicBezierCurve.js
    
    /**************************************************************
     *	Cubic Bezier curve
     **************************************************************/
    
    THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {
    
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    
    };
    
    THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );
    
    THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {
    
        var tx, ty;
    
        tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
        ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );
    
        return new THREE.Vector2( tx, ty );
    
    };
    
    THREE.CubicBezierCurve.prototype.getTangent = function( t ) {
    
        var tx, ty;
    
        tx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
        ty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );
    
        var tangent = new THREE.Vector2( tx, ty );
        tangent.normalize();
    
        return tangent;
    
    };
    
    // File:src/extras/curves/SplineCurve.js
    
    /**************************************************************
     *	Spline curve
     **************************************************************/
    
    THREE.SplineCurve = function ( points /* array of Vector2 */ ) {
    
        this.points = ( points == undefined ) ? [] : points;
    
    };
    
    THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );
    
    THREE.SplineCurve.prototype.getPoint = function ( t ) {
    
        var points = this.points;
        var point = ( points.length - 1 ) * t;
    
        var intPoint = Math.floor( point );
        var weight = point - intPoint;
    
        var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ]
        var point1 = points[ intPoint ]
        var point2 = points[ intPoint > points.length - 2 ? points.length -1 : intPoint + 1 ]
        var point3 = points[ intPoint > points.length - 3 ? points.length -1 : intPoint + 2 ]
    
        var vector = new THREE.Vector2();
    
        vector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );
        vector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );
    
        return vector;
    
    };
    
    // File:src/extras/curves/EllipseCurve.js
    
    /**************************************************************
     *	Ellipse curve
     **************************************************************/
    
    THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise ) {
    
        this.aX = aX;
        this.aY = aY;
    
        this.xRadius = xRadius;
        this.yRadius = yRadius;
    
        this.aStartAngle = aStartAngle;
        this.aEndAngle = aEndAngle;
    
        this.aClockwise = aClockwise;
    
    };
    
    THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );
    
    THREE.EllipseCurve.prototype.getPoint = function ( t ) {
    
        var deltaAngle = this.aEndAngle - this.aStartAngle;
    
        if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;
        if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;
    
        var angle;
    
        if ( this.aClockwise === true ) {
    
            angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );
    
        } else {
    
            angle = this.aStartAngle + t * deltaAngle;
    
        }
        
        var vector = new THREE.Vector2();
    
        vector.x = this.aX + this.xRadius * Math.cos( angle );
        vector.y = this.aY + this.yRadius * Math.sin( angle );
    
        return vector;
    
    };
    
    // File:src/extras/curves/ArcCurve.js
    
    /**************************************************************
     *	Arc curve
     **************************************************************/
    
    THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
    
        THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
    };
    
    THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );
    
    // File:src/extras/curves/LineCurve3.js
    
    /**************************************************************
     *	Line3D
     **************************************************************/
    
    THREE.LineCurve3 = THREE.Curve.create(
    
        function ( v1, v2 ) {
    
            this.v1 = v1;
            this.v2 = v2;
    
        },
    
        function ( t ) {
    
            var vector = new THREE.Vector3();
    
            vector.subVectors( this.v2, this.v1 ); // diff
            vector.multiplyScalar( t );
            vector.add( this.v1 );
    
            return vector;
    
        }
    
    );
    
    // File:src/extras/curves/QuadraticBezierCurve3.js
    
    /**************************************************************
     *	Quadratic Bezier 3D curve
     **************************************************************/
    
    THREE.QuadraticBezierCurve3 = THREE.Curve.create(
    
        function ( v0, v1, v2 ) {
    
            this.v0 = v0;
            this.v1 = v1;
            this.v2 = v2;
    
        },
    
        function ( t ) {
    
            var vector = new THREE.Vector3();
    
            vector.x = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
            vector.y = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );
            vector.z = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );
    
            return vector;
    
        }
    
    );
    
    // File:src/extras/curves/CubicBezierCurve3.js
    
    /**************************************************************
     *	Cubic Bezier 3D curve
     **************************************************************/
    
    THREE.CubicBezierCurve3 = THREE.Curve.create(
    
        function ( v0, v1, v2, v3 ) {
    
            this.v0 = v0;
            this.v1 = v1;
            this.v2 = v2;
            this.v3 = v3;
    
        },
    
        function ( t ) {
    
            var vector = new THREE.Vector3();
    
            vector.x = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
            vector.y = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );
            vector.z = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );
    
            return vector;
    
        }
    
    );
    
    // File:src/extras/curves/SplineCurve3.js
    
    /**************************************************************
     *	Spline 3D curve
     **************************************************************/
    
    
    THREE.SplineCurve3 = THREE.Curve.create(
    
        function ( points /* array of Vector3 */) {
    
            this.points = ( points == undefined ) ? [] : points;
    
        },
    
        function ( t ) {
    
            var points = this.points;
            var point = ( points.length - 1 ) * t;
    
            var intPoint = Math.floor( point );
            var weight = point - intPoint;
    
            var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
            var point1 = points[ intPoint ];
            var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
            var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
    
            var vector = new THREE.Vector3();
    
            vector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );
            vector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );
            vector.z = THREE.Curve.Utils.interpolate( point0.z, point1.z, point2.z, point3.z, weight );
    
            return vector;
    
        }
    
    );
    
    // File:src/extras/curves/ClosedSplineCurve3.js
    
    /**************************************************************
     *	Closed Spline 3D curve
     **************************************************************/
    
    
    THREE.ClosedSplineCurve3 = THREE.Curve.create(
    
        function ( points /* array of Vector3 */) {
    
            this.points = ( points == undefined ) ? [] : points;
    
        },
    
        function ( t ) {
    
            var points = this.points;
            var point = ( points.length - 0 ) * t; // This needs to be from 0-length +1
    
            var intPoint = Math.floor( point );
            var weight = point - intPoint;
    
            intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;
    
            var point0 = points[ ( intPoint - 1 ) % points.length ];
            var point1 = points[ ( intPoint     ) % points.length ];
            var point2 = points[ ( intPoint + 1 ) % points.length ];
            var point3 = points[ ( intPoint + 2 ) % points.length ];
    
            var vector = new THREE.Vector3();
    
            vector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );
            vector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );
            vector.z = THREE.Curve.Utils.interpolate( point0.z, point1.z, point2.z, point3.z, weight );
    
            return vector;
    
        }
    
    );
    
    // File:src/extras/animation/AnimationHandler.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     */
    
    THREE.AnimationHandler = {
    
        LINEAR: 0,
        CATMULLROM: 1,
        CATMULLROM_FORWARD: 2,
    
        //
    
        add: function () { console.warn( 'THREE.AnimationHandler.add() has been deprecated.' ); },
        get: function () { console.warn( 'THREE.AnimationHandler.get() has been deprecated.' ); },
        remove: function () { console.warn( 'THREE.AnimationHandler.remove() has been deprecated.' ); },
    
        //
    
        animations: [],
    
        init: function ( data ) {
    
            if ( data.initialized === true ) return;
    
            // loop through all keys
    
            for ( var h = 0; h < data.hierarchy.length; h ++ ) {
    
                for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {
    
                    // remove minus times
    
                    if ( data.hierarchy[ h ].keys[ k ].time < 0 ) {
    
                         data.hierarchy[ h ].keys[ k ].time = 0;
    
                    }
    
                    // create quaternions
    
                    if ( data.hierarchy[ h ].keys[ k ].rot !== undefined &&
                      ! ( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {
    
                        var quat = data.hierarchy[ h ].keys[ k ].rot;
                        data.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion().fromArray( quat );
    
                    }
    
                }
    
                // prepare morph target keys
    
                if ( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {
    
                    // get all used
    
                    var usedMorphTargets = {};
    
                    for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {
    
                        for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {
    
                            var morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];
                            usedMorphTargets[ morphTargetName ] = - 1;
    
                        }
    
                    }
    
                    data.hierarchy[ h ].usedMorphTargets = usedMorphTargets;
    
    
                    // set all used on all frames
    
                    for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {
    
                        var influences = {};
    
                        for ( var morphTargetName in usedMorphTargets ) {
    
                            for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {
    
                                if ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {
    
                                    influences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];
                                    break;
    
                                }
    
                            }
    
                            if ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {
    
                                influences[ morphTargetName ] = 0;
    
                            }
    
                        }
    
                        data.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;
    
                    }
    
                }
    
    
                // remove all keys that are on the same time
    
                for ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {
    
                    if ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {
    
                        data.hierarchy[ h ].keys.splice( k, 1 );
                        k --;
    
                    }
    
                }
    
    
                // set index
    
                for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {
    
                    data.hierarchy[ h ].keys[ k ].index = k;
    
                }
    
            }
    
            data.initialized = true;
    
            return data;
    
        },
    
        parse: function ( root ) {
    
            var parseRecurseHierarchy = function ( root, hierarchy ) {
    
                hierarchy.push( root );
    
                for ( var c = 0; c < root.children.length; c ++ )
                    parseRecurseHierarchy( root.children[ c ], hierarchy );
    
            };
    
            // setup hierarchy
    
            var hierarchy = [];
    
            if ( root instanceof THREE.SkinnedMesh ) {
    
                for ( var b = 0; b < root.skeleton.bones.length; b ++ ) {
    
                    hierarchy.push( root.skeleton.bones[ b ] );
    
                }
    
            } else {
    
                parseRecurseHierarchy( root, hierarchy );
    
            }
    
            return hierarchy;
    
        },
    
        play: function ( animation ) {
    
            if ( this.animations.indexOf( animation ) === - 1 ) {
    
                this.animations.push( animation );
    
            }
    
        },
    
        stop: function ( animation ) {
    
            var index = this.animations.indexOf( animation );
    
            if ( index !== - 1 ) {
    
                this.animations.splice( index, 1 );
    
            }
    
        },
    
        update: function ( deltaTimeMS ) {
    
            for ( var i = 0; i < this.animations.length; i ++ ) {
    
                this.animations[ i ].resetBlendWeights( );
    
            }
    
            for ( var i = 0; i < this.animations.length; i ++ ) {
    
                this.animations[ i ].update( deltaTimeMS );
    
            }
    
        }
    
    };
    
    // File:src/extras/animation/Animation.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.Animation = function ( root, data ) {
    
        this.root = root;
        this.data = THREE.AnimationHandler.init( data );
        this.hierarchy = THREE.AnimationHandler.parse( root );
    
        this.currentTime = 0;
        this.timeScale = 1;
    
        this.isPlaying = false;
        this.loop = true;
        this.weight = 0;
    
        this.interpolationType = THREE.AnimationHandler.LINEAR;
    
    };
    
    
    THREE.Animation.prototype.keyTypes = [ "pos", "rot", "scl" ];
    
    
    THREE.Animation.prototype.play = function ( startTime, weight ) {
    
        this.currentTime = startTime !== undefined ? startTime : 0;
        this.weight = weight !== undefined ? weight: 1;
    
        this.isPlaying = true;
    
        this.reset();
    
        THREE.AnimationHandler.play( this );
    
    };
    
    
    THREE.Animation.prototype.stop = function() {
    
        this.isPlaying = false;
    
        THREE.AnimationHandler.stop( this );
    
    };
    
    THREE.Animation.prototype.reset = function () {
    
        for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {
    
            var object = this.hierarchy[ h ];
    
            object.matrixAutoUpdate = true;
    
            if ( object.animationCache === undefined ) {
    
                object.animationCache = {
                    animations: {},
                    blending: {
                        positionWeight: 0.0,
                        quaternionWeight: 0.0,
                        scaleWeight: 0.0
                    }
                };
            }
    
            if ( object.animationCache.animations[this.data.name] === undefined ) {
    
                object.animationCache.animations[this.data.name] = {};
                object.animationCache.animations[this.data.name].prevKey = { pos: 0, rot: 0, scl: 0 };
                object.animationCache.animations[this.data.name].nextKey = { pos: 0, rot: 0, scl: 0 };
                object.animationCache.animations[this.data.name].originalMatrix = object.matrix;
    
            }
    
            var animationCache = object.animationCache.animations[this.data.name];
    
            // Get keys to match our current time
    
            for ( var t = 0; t < 3; t ++ ) {
    
                var type = this.keyTypes[ t ];
    
                var prevKey = this.data.hierarchy[ h ].keys[ 0 ];
                var nextKey = this.getNextKeyWith( type, h, 1 );
    
                while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {
    
                    prevKey = nextKey;
                    nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );
    
                }
    
                animationCache.prevKey[ type ] = prevKey;
                animationCache.nextKey[ type ] = nextKey;
    
            }
    
        }
    
    };
    
    THREE.Animation.prototype.resetBlendWeights = function () {
    
        for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {
    
            var object = this.hierarchy[ h ];
    
            if ( object.animationCache !== undefined ) {
    
                object.animationCache.blending.positionWeight = 0.0;
                object.animationCache.blending.quaternionWeight = 0.0;
                object.animationCache.blending.scaleWeight = 0.0;
    
            }
    
        }
    
    };
    
    THREE.Animation.prototype.update = (function(){
    
        var points = [];
        var target = new THREE.Vector3();
        var newVector = new THREE.Vector3();
        var newQuat = new THREE.Quaternion();
    
        // Catmull-Rom spline
    
        var interpolateCatmullRom = function ( points, scale ) {
    
            var c = [], v3 = [],
            point, intPoint, weight, w2, w3,
            pa, pb, pc, pd;
    
            point = ( points.length - 1 ) * scale;
            intPoint = Math.floor( point );
            weight = point - intPoint;
    
            c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
            c[ 1 ] = intPoint;
            c[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;
            c[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;
    
            pa = points[ c[ 0 ] ];
            pb = points[ c[ 1 ] ];
            pc = points[ c[ 2 ] ];
            pd = points[ c[ 3 ] ];
    
            w2 = weight * weight;
            w3 = weight * w2;
    
            v3[ 0 ] = interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );
            v3[ 1 ] = interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );
            v3[ 2 ] = interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );
    
            return v3;
    
        };
    
        var interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {
    
            var v0 = ( p2 - p0 ) * 0.5,
                v1 = ( p3 - p1 ) * 0.5;
    
            return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;
    
        };
    
        return function ( delta ) {
    
            if ( this.isPlaying === false ) return;
    
            this.currentTime += delta * this.timeScale;
    
            if ( this.weight === 0 )
                return;
    
            //
    
            var duration = this.data.length;
    
            if ( this.currentTime > duration || this.currentTime < 0 ) {
    
                if ( this.loop ) {
    
                    this.currentTime %= duration;
    
                    if ( this.currentTime < 0 )
                        this.currentTime += duration;
    
                    this.reset();
    
                } else {
    
                    this.stop();
                    return;
    
                }
    
            }
    
            for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {
    
                var object = this.hierarchy[ h ];
                var animationCache = object.animationCache.animations[this.data.name];
                var blending = object.animationCache.blending;
    
                // loop through pos/rot/scl
    
                for ( var t = 0; t < 3; t ++ ) {
    
                    // get keys
    
                    var type    = this.keyTypes[ t ];
                    var prevKey = animationCache.prevKey[ type ];
                    var nextKey = animationCache.nextKey[ type ];
    
                    if ( ( this.timeScale > 0 && nextKey.time <= this.currentTime ) ||
                        ( this.timeScale < 0 && prevKey.time >= this.currentTime ) ) {
    
                        prevKey = this.data.hierarchy[ h ].keys[ 0 ];
                        nextKey = this.getNextKeyWith( type, h, 1 );
    
                        while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {
    
                            prevKey = nextKey;
                            nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );
    
                        }
    
                        animationCache.prevKey[ type ] = prevKey;
                        animationCache.nextKey[ type ] = nextKey;
    
                    }
    
                    object.matrixAutoUpdate = true;
                    object.matrixWorldNeedsUpdate = true;
    
                    var scale = ( this.currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );
    
                    var prevXYZ = prevKey[ type ];
                    var nextXYZ = nextKey[ type ];
    
                    if ( scale < 0 ) scale = 0;
                    if ( scale > 1 ) scale = 1;
    
                    // interpolate
    
                    if ( type === "pos" ) {
    
                        if ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {
    
                            newVector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
                            newVector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
                            newVector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;
    
                            // blend
                            var proportionalWeight = this.weight / ( this.weight + blending.positionWeight );
                            object.position.lerp( newVector, proportionalWeight );
                            blending.positionWeight += this.weight;
    
                        } else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
                                    this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {
    
                            points[ 0 ] = this.getPrevKeyWith( "pos", h, prevKey.index - 1 )[ "pos" ];
                            points[ 1 ] = prevXYZ;
                            points[ 2 ] = nextXYZ;
                            points[ 3 ] = this.getNextKeyWith( "pos", h, nextKey.index + 1 )[ "pos" ];
    
                            scale = scale * 0.33 + 0.33;
    
                            var currentPoint = interpolateCatmullRom( points, scale );
                            var proportionalWeight = this.weight / ( this.weight + blending.positionWeight );
                            blending.positionWeight += this.weight;
    
                            // blend
    
                            var vector = object.position;
                            
                            vector.x = vector.x + ( currentPoint[ 0 ] - vector.x ) * proportionalWeight;
                            vector.y = vector.y + ( currentPoint[ 1 ] - vector.y ) * proportionalWeight;
                            vector.z = vector.z + ( currentPoint[ 2 ] - vector.z ) * proportionalWeight;
    
                            if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {
    
                                var forwardPoint = interpolateCatmullRom( points, scale * 1.01 );
    
                                target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );
                                target.sub( vector );
                                target.y = 0;
                                target.normalize();
    
                                var angle = Math.atan2( target.x, target.z );
                                object.rotation.set( 0, angle, 0 );
    
                            }
    
                        }
    
                    } else if ( type === "rot" ) {
    
                        THREE.Quaternion.slerp( prevXYZ, nextXYZ, newQuat, scale );
    
                        // Avoid paying the cost of an additional slerp if we don't have to
                        if ( blending.quaternionWeight === 0 ) {
    
                            object.quaternion.copy(newQuat);
                            blending.quaternionWeight = this.weight;
    
                        } else {
    
                            var proportionalWeight = this.weight / ( this.weight + blending.quaternionWeight );
                            THREE.Quaternion.slerp( object.quaternion, newQuat, object.quaternion, proportionalWeight );
                            blending.quaternionWeight += this.weight;
    
                        }
    
                    } else if ( type === "scl" ) {
    
                        newVector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
                        newVector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
                        newVector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;
    
                        var proportionalWeight = this.weight / ( this.weight + blending.scaleWeight );
                        object.scale.lerp( newVector, proportionalWeight );
                        blending.scaleWeight += this.weight;
    
                    }
    
                }
    
            }
    
            return true;
    
        };
    
    })();
    
    
    
    
    
    // Get next key with
    
    THREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {
    
        var keys = this.data.hierarchy[ h ].keys;
    
        if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
             this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {
    
            key = key < keys.length - 1 ? key : keys.length - 1;
    
        } else {
    
            key = key % keys.length;
    
        }
    
        for ( ; key < keys.length; key ++ ) {
    
            if ( keys[ key ][ type ] !== undefined ) {
    
                return keys[ key ];
    
            }
    
        }
    
        return this.data.hierarchy[ h ].keys[ 0 ];
    
    };
    
    // Get previous key with
    
    THREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {
    
        var keys = this.data.hierarchy[ h ].keys;
    
        if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
            this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {
    
            key = key > 0 ? key : 0;
    
        } else {
    
            key = key >= 0 ? key : key + keys.length;
    
        }
    
    
        for ( ; key >= 0; key -- ) {
    
            if ( keys[ key ][ type ] !== undefined ) {
    
                return keys[ key ];
    
            }
    
        }
    
        return this.data.hierarchy[ h ].keys[ keys.length - 1 ];
    
    };
    
    // File:src/extras/animation/KeyFrameAnimation.js
    
    /**
     * @author mikael emtinger / http://gomo.se/
     * @author mrdoob / http://mrdoob.com/
     * @author alteredq / http://alteredqualia.com/
     * @author khang duong
     * @author erik kitson
     */
    
    THREE.KeyFrameAnimation = function ( data ) {
    
        this.root = data.node;
        this.data = THREE.AnimationHandler.init( data );
        this.hierarchy = THREE.AnimationHandler.parse( this.root );
        this.currentTime = 0;
        this.timeScale = 0.001;
        this.isPlaying = false;
        this.isPaused = true;
        this.loop = true;
    
        // initialize to first keyframes
    
        for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {
    
            var keys = this.data.hierarchy[h].keys,
                sids = this.data.hierarchy[h].sids,
                obj = this.hierarchy[h];
    
            if ( keys.length && sids ) {
    
                for ( var s = 0; s < sids.length; s ++ ) {
    
                    var sid = sids[ s ],
                        next = this.getNextKeyWith( sid, h, 0 );
    
                    if ( next ) {
    
                        next.apply( sid );
    
                    }
    
                }
    
                obj.matrixAutoUpdate = false;
                this.data.hierarchy[h].node.updateMatrix();
                obj.matrixWorldNeedsUpdate = true;
    
            }
    
        }
    
    };
    
    
    THREE.KeyFrameAnimation.prototype.play = function ( startTime ) {
    
        this.currentTime = startTime !== undefined ? startTime : 0;
    
        if ( this.isPlaying === false ) {
    
            this.isPlaying = true;
    
            // reset key cache
    
            var h, hl = this.hierarchy.length,
                object,
                node;
    
            for ( h = 0; h < hl; h ++ ) {
    
                object = this.hierarchy[ h ];
                node = this.data.hierarchy[ h ];
    
                if ( node.animationCache === undefined ) {
    
                    node.animationCache = {};
                    node.animationCache.prevKey = null;
                    node.animationCache.nextKey = null;
                    node.animationCache.originalMatrix = object.matrix;
    
                }
    
                var keys = this.data.hierarchy[h].keys;
    
                if (keys.length) {
    
                    node.animationCache.prevKey = keys[ 0 ];
                    node.animationCache.nextKey = keys[ 1 ];
    
                    this.startTime = Math.min( keys[0].time, this.startTime );
                    this.endTime = Math.max( keys[keys.length - 1].time, this.endTime );
    
                }
    
            }
    
            this.update( 0 );
    
        }
    
        this.isPaused = false;
    
        THREE.AnimationHandler.play( this );
    
    };
    
    
    THREE.KeyFrameAnimation.prototype.stop = function() {
    
        this.isPlaying = false;
        this.isPaused  = false;
    
        THREE.AnimationHandler.stop( this );
    
        // reset JIT matrix and remove cache
    
        for ( var h = 0; h < this.data.hierarchy.length; h ++ ) {
            
            var obj = this.hierarchy[ h ];
            var node = this.data.hierarchy[ h ];
    
            if ( node.animationCache !== undefined ) {
    
                var original = node.animationCache.originalMatrix;
    
                original.copy( obj.matrix );
                obj.matrix = original;
    
                delete node.animationCache;
    
            }
    
        }
    
    };
    
    
    // Update
    
    THREE.KeyFrameAnimation.prototype.update = function ( delta ) {
    
        if ( this.isPlaying === false ) return;
    
        this.currentTime += delta * this.timeScale;
    
        //
    
        var duration = this.data.length;
    
        if ( this.loop === true && this.currentTime > duration ) {
    
            this.currentTime %= duration;
    
        }
    
        this.currentTime = Math.min( this.currentTime, duration );
    
        for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {
    
            var object = this.hierarchy[ h ];
            var node = this.data.hierarchy[ h ];
    
            var keys = node.keys,
                animationCache = node.animationCache;
    
    
            if ( keys.length ) {
    
                var prevKey = animationCache.prevKey;
                var nextKey = animationCache.nextKey;
    
                if ( nextKey.time <= this.currentTime ) {
    
                    while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {
    
                        prevKey = nextKey;
                        nextKey = keys[ prevKey.index + 1 ];
    
                    }
    
                    animationCache.prevKey = prevKey;
                    animationCache.nextKey = nextKey;
    
                }
    
                if ( nextKey.time >= this.currentTime ) {
    
                    prevKey.interpolate( nextKey, this.currentTime );
    
                } else {
    
                    prevKey.interpolate( nextKey, nextKey.time );
    
                }
    
                this.data.hierarchy[ h ].node.updateMatrix();
                object.matrixWorldNeedsUpdate = true;
    
            }
    
        }
    
    };
    
    // Get next key with
    
    THREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {
    
        var keys = this.data.hierarchy[ h ].keys;
        key = key % keys.length;
    
        for ( ; key < keys.length; key ++ ) {
    
            if ( keys[ key ].hasTarget( sid ) ) {
    
                return keys[ key ];
    
            }
    
        }
    
        return keys[ 0 ];
    
    };
    
    // Get previous key with
    
    THREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {
    
        var keys = this.data.hierarchy[ h ].keys;
        key = key >= 0 ? key : key + keys.length;
    
        for ( ; key >= 0; key -- ) {
    
            if ( keys[ key ].hasTarget( sid ) ) {
    
                return keys[ key ];
    
            }
    
        }
    
        return keys[ keys.length - 1 ];
    
    };
    
    // File:src/extras/animation/MorphAnimation.js
    
    /**
     * @author mrdoob / http://mrdoob.com
     */
    
    THREE.MorphAnimation = function ( mesh ) {
    
        this.mesh = mesh;
        this.frames = mesh.morphTargetInfluences.length;
        this.currentTime = 0;
        this.duration = 1000;
        this.loop = true;
    
        this.isPlaying = false;
    
    };
    
    THREE.MorphAnimation.prototype = {
    
        play: function () {
    
            this.isPlaying = true;
    
        },
    
        pause: function () {
    
            this.isPlaying = false;
    
        },
    
        update: ( function () {
    
            var lastFrame = 0;
            var currentFrame = 0;
    
            return function ( delta ) {
    
                if ( this.isPlaying === false ) return;
    
                this.currentTime += delta;
    
                if ( this.loop === true && this.currentTime > this.duration ) {
    
                    this.currentTime %= this.duration;
    
                }
    
                this.currentTime = Math.min( this.currentTime, this.duration );
    
                var interpolation = this.duration / this.frames;
                var frame = Math.floor( this.currentTime / interpolation );
    
                if ( frame != currentFrame ) {
    
                    this.mesh.morphTargetInfluences[ lastFrame ] = 0;
                    this.mesh.morphTargetInfluences[ currentFrame ] = 1;
                    this.mesh.morphTargetInfluences[ frame ] = 0;
    
                    lastFrame = currentFrame;
                    currentFrame = frame;
    
                }
    
                this.mesh.morphTargetInfluences[ frame ] = ( this.currentTime % interpolation ) / interpolation;
                this.mesh.morphTargetInfluences[ lastFrame ] = 1 - this.mesh.morphTargetInfluences[ frame ];
    
            }
    
        } )()
    
    };
    
    // File:src/extras/geometries/BoxGeometry.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
     */
    
    THREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'BoxGeometry';
    
        this.parameters = {
            width: width,
            height: height,
            depth: depth,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            depthSegments: depthSegments
        };
    
        this.widthSegments = widthSegments || 1;
        this.heightSegments = heightSegments || 1;
        this.depthSegments = depthSegments || 1;
    
        var scope = this;
    
        var width_half = width / 2;
        var height_half = height / 2;
        var depth_half = depth / 2;
    
        buildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px
        buildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx
        buildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py
        buildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny
        buildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz
        buildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz
    
        function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {
    
            var w, ix, iy,
            gridX = scope.widthSegments,
            gridY = scope.heightSegments,
            width_half = width / 2,
            height_half = height / 2,
            offset = scope.vertices.length;
    
            if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {
    
                w = 'z';
    
            } else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {
    
                w = 'y';
                gridY = scope.depthSegments;
    
            } else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {
    
                w = 'x';
                gridX = scope.depthSegments;
    
            }
    
            var gridX1 = gridX + 1,
            gridY1 = gridY + 1,
            segment_width = width / gridX,
            segment_height = height / gridY,
            normal = new THREE.Vector3();
    
            normal[ w ] = depth > 0 ? 1 : - 1;
    
            for ( iy = 0; iy < gridY1; iy ++ ) {
    
                for ( ix = 0; ix < gridX1; ix ++ ) {
    
                    var vector = new THREE.Vector3();
                    vector[ u ] = ( ix * segment_width - width_half ) * udir;
                    vector[ v ] = ( iy * segment_height - height_half ) * vdir;
                    vector[ w ] = depth;
    
                    scope.vertices.push( vector );
    
                }
    
            }
    
            for ( iy = 0; iy < gridY; iy ++ ) {
    
                for ( ix = 0; ix < gridX; ix ++ ) {
    
                    var a = ix + gridX1 * iy;
                    var b = ix + gridX1 * ( iy + 1 );
                    var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
                    var d = ( ix + 1 ) + gridX1 * iy;
    
                    var uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );
                    var uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );
                    var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );
                    var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );
    
                    var face = new THREE.Face3( a + offset, b + offset, d + offset );
                    face.normal.copy( normal );
                    face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
                    face.materialIndex = materialIndex;
    
                    scope.faces.push( face );
                    scope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );
    
                    face = new THREE.Face3( b + offset, c + offset, d + offset );
                    face.normal.copy( normal );
                    face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
                    face.materialIndex = materialIndex;
    
                    scope.faces.push( face );
                    scope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );
    
                }
    
            }
    
        }
    
        this.mergeVertices();
    
    };
    
    THREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/CircleGeometry.js
    
    /**
     * @author hughes
     */
    
    THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'CircleGeometry';
    
        this.parameters = {
            radius: radius,
            segments: segments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
    
        radius = radius || 50;
        segments = segments !== undefined ? Math.max( 3, segments ) : 8;
    
        thetaStart = thetaStart !== undefined ? thetaStart : 0;
        thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
    
        var i, uvs = [],
        center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );
    
        this.vertices.push(center);
        uvs.push( centerUV );
    
        for ( i = 0; i <= segments; i ++ ) {
    
            var vertex = new THREE.Vector3();
            var segment = thetaStart + i / segments * thetaLength;
    
            vertex.x = radius * Math.cos( segment );
            vertex.y = radius * Math.sin( segment );
    
            this.vertices.push( vertex );
            uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, ( vertex.y / radius + 1 ) / 2 ) );
    
        }
    
        var n = new THREE.Vector3( 0, 0, 1 );
    
        for ( i = 1; i <= segments; i ++ ) {
    
            this.faces.push( new THREE.Face3( i, i + 1, 0, [ n.clone(), n.clone(), n.clone() ] ) );
            this.faceVertexUvs[ 0 ].push( [ uvs[ i ].clone(), uvs[ i + 1 ].clone(), centerUV.clone() ] );
    
        }
    
        this.computeFaceNormals();
    
        this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );
    
    };
    
    THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/CubeGeometry.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    
    THREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {
    
        console.warn( 'THREE.CubeGeometry has been renamed to THREE.BoxGeometry.' );
        return new THREE.BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments );
    
     };
    
    // File:src/extras/geometries/CylinderGeometry.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'CylinderGeometry';
    
        this.parameters = {
            radiusTop: radiusTop,
            radiusBottom: radiusBottom,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded
        };
    
        radiusTop = radiusTop !== undefined ? radiusTop : 20;
        radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
        height = height !== undefined ? height : 100;
    
        radialSegments = radialSegments || 8;
        heightSegments = heightSegments || 1;
    
        openEnded = openEnded !== undefined ? openEnded : false;
    
        var heightHalf = height / 2;
    
        var x, y, vertices = [], uvs = [];
    
        for ( y = 0; y <= heightSegments; y ++ ) {
    
            var verticesRow = [];
            var uvsRow = [];
    
            var v = y / heightSegments;
            var radius = v * ( radiusBottom - radiusTop ) + radiusTop;
    
            for ( x = 0; x <= radialSegments; x ++ ) {
    
                var u = x / radialSegments;
    
                var vertex = new THREE.Vector3();
                vertex.x = radius * Math.sin( u * Math.PI * 2 );
                vertex.y = - v * height + heightHalf;
                vertex.z = radius * Math.cos( u * Math.PI * 2 );
    
                this.vertices.push( vertex );
    
                verticesRow.push( this.vertices.length - 1 );
                uvsRow.push( new THREE.Vector2( u, 1 - v ) );
    
            }
    
            vertices.push( verticesRow );
            uvs.push( uvsRow );
    
        }
    
        var tanTheta = ( radiusBottom - radiusTop ) / height;
        var na, nb;
    
        for ( x = 0; x < radialSegments; x ++ ) {
    
            if ( radiusTop !== 0 ) {
    
                na = this.vertices[ vertices[ 0 ][ x ] ].clone();
                nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();
    
            } else {
    
                na = this.vertices[ vertices[ 1 ][ x ] ].clone();
                nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();
    
            }
    
            na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();
            nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();
    
            for ( y = 0; y < heightSegments; y ++ ) {
    
                var v1 = vertices[ y ][ x ];
                var v2 = vertices[ y + 1 ][ x ];
                var v3 = vertices[ y + 1 ][ x + 1 ];
                var v4 = vertices[ y ][ x + 1 ];
    
                var n1 = na.clone();
                var n2 = na.clone();
                var n3 = nb.clone();
                var n4 = nb.clone();
    
                var uv1 = uvs[ y ][ x ].clone();
                var uv2 = uvs[ y + 1 ][ x ].clone();
                var uv3 = uvs[ y + 1 ][ x + 1 ].clone();
                var uv4 = uvs[ y ][ x + 1 ].clone();
    
                this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
                this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );
    
                this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
                this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );
    
            }
    
        }
    
        // top cap
    
        if ( openEnded === false && radiusTop > 0 ) {
    
            this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );
    
            for ( x = 0; x < radialSegments; x ++ ) {
    
                var v1 = vertices[ 0 ][ x ];
                var v2 = vertices[ 0 ][ x + 1 ];
                var v3 = this.vertices.length - 1;
    
                var n1 = new THREE.Vector3( 0, 1, 0 );
                var n2 = new THREE.Vector3( 0, 1, 0 );
                var n3 = new THREE.Vector3( 0, 1, 0 );
    
                var uv1 = uvs[ 0 ][ x ].clone();
                var uv2 = uvs[ 0 ][ x + 1 ].clone();
                var uv3 = new THREE.Vector2( uv2.x, 0 );
    
                this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
                this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );
    
            }
    
        }
    
        // bottom cap
    
        if ( openEnded === false && radiusBottom > 0 ) {
    
            this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );
    
            for ( x = 0; x < radialSegments; x ++ ) {
    
                var v1 = vertices[ y ][ x + 1 ];
                var v2 = vertices[ y ][ x ];
                var v3 = this.vertices.length - 1;
    
                var n1 = new THREE.Vector3( 0, - 1, 0 );
                var n2 = new THREE.Vector3( 0, - 1, 0 );
                var n3 = new THREE.Vector3( 0, - 1, 0 );
    
                var uv1 = uvs[ y ][ x + 1 ].clone();
                var uv2 = uvs[ y ][ x ].clone();
                var uv3 = new THREE.Vector2( uv2.x, 1 );
    
                this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
                this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );
    
            }
    
        }
    
        this.computeFaceNormals();
    
    }
    
    THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/ExtrudeGeometry.js
    
    /**
     * @author zz85 / http://www.lab4games.net/zz85/blog
     *
     * Creates extruded geometry from a path shape.
     *
     * parameters = {
     *
     *  curveSegments: <int>, // number of points on the curves
     *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too
     *  amount: <int>, // Depth to extrude the shape
     *
     *  bevelEnabled: <bool>, // turn on bevel
     *  bevelThickness: <float>, // how deep into the original shape bevel goes
     *  bevelSize: <float>, // how far from shape outline is bevel
     *  bevelSegments: <int>, // number of bevel layers
     *
     *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
     *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
     *
     *  material: <int> // material index for front and back faces
     *  extrudeMaterial: <int> // material index for extrusion and beveled faces
     *  uvGenerator: <Object> // object that provides UV generator functions
     *
     * }
     **/
    
    THREE.ExtrudeGeometry = function ( shapes, options ) {
    
        if ( typeof( shapes ) === "undefined" ) {
            shapes = [];
            return;
        }
    
        THREE.Geometry.call( this );
    
        this.type = 'ExtrudeGeometry';
    
        shapes = shapes instanceof Array ? shapes : [ shapes ];
    
        this.addShapeList( shapes, options );
    
        this.computeFaceNormals();
    
        // can't really use automatic vertex normals
        // as then front and back sides get smoothed too
        // should do separate smoothing just for sides
    
        //this.computeVertexNormals();
    
        //console.log( "took", ( Date.now() - startTime ) );
    
    };
    
    THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {
        var sl = shapes.length;
    
        for ( var s = 0; s < sl; s ++ ) {
            var shape = shapes[ s ];
            this.addShape( shape, options );
        }
    };
    
    THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {
    
        var amount = options.amount !== undefined ? options.amount : 100;
    
        var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
        var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
        var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
    
        var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false
    
        var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
    
        var steps = options.steps !== undefined ? options.steps : 1;
    
        var extrudePath = options.extrudePath;
        var extrudePts, extrudeByPath = false;
    
        var material = options.material;
        var extrudeMaterial = options.extrudeMaterial;
    
        // Use default WorldUVGenerator if no UV generators are specified.
        var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;
    
        var splineTube, binormal, normal, position2;
        if ( extrudePath ) {
    
            extrudePts = extrudePath.getSpacedPoints( steps );
    
            extrudeByPath = true;
            bevelEnabled = false; // bevels not supported for path extrusion
    
            // SETUP TNB variables
    
            // Reuse TNB from TubeGeomtry for now.
            // TODO1 - have a .isClosed in spline?
    
            splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);
    
            // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
    
            binormal = new THREE.Vector3();
            normal = new THREE.Vector3();
            position2 = new THREE.Vector3();
    
        }
    
        // Safeguards if bevels are not enabled
    
        if ( ! bevelEnabled ) {
    
            bevelSegments = 0;
            bevelThickness = 0;
            bevelSize = 0;
    
        }
    
        // Variables initalization
    
        var ahole, h, hl; // looping of holes
        var scope = this;
        var bevelPoints = [];
    
        var shapesOffset = this.vertices.length;
    
        var shapePoints = shape.extractPoints( curveSegments );
    
        var vertices = shapePoints.shape;
        var holes = shapePoints.holes;
    
        var reverse = ! THREE.Shape.Utils.isClockWise( vertices ) ;
    
        if ( reverse ) {
    
            vertices = vertices.reverse();
    
            // Maybe we should also check if holes are in the opposite direction, just to be safe ...
    
            for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                ahole = holes[ h ];
    
                if ( THREE.Shape.Utils.isClockWise( ahole ) ) {
    
                    holes[ h ] = ahole.reverse();
    
                }
    
            }
    
            reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!
    
        }
    
    
        var faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );
    
        /* Vertices */
    
        var contour = vertices; // vertices has all points but contour has only points of circumference
    
        for ( h = 0, hl = holes.length;  h < hl; h ++ ) {
    
            ahole = holes[ h ];
    
            vertices = vertices.concat( ahole );
    
        }
    
    
        function scalePt2 ( pt, vec, size ) {
    
            if ( ! vec ) console.log( "die" );
    
            return vec.clone().multiplyScalar( size ).add( pt );
    
        }
    
        var b, bs, t, z,
            vert, vlen = vertices.length,
            face, flen = faces.length,
            cont, clen = contour.length;
    
    
        // Find directions for point movement
    
        var RAD_TO_DEGREES = 180 / Math.PI;
    
    
        function getBevelVec( inPt, inPrev, inNext ) {
    
            var EPSILON = 0.0000000001;
            
            // computes for inPt the corresponding point inPt' on a new contour
            //   shiftet by 1 unit (length of normalized vector) to the left
            // if we walk along contour clockwise, this new contour is outside the old one
            //
            // inPt' is the intersection of the two lines parallel to the two
            //  adjacent edges of inPt at a distance of 1 unit on the left side.
            
            var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt
    
            // good reading for geometry algorithms (here: line-line intersection)
            // http://geomalgorithms.com/a05-_intersect-1.html
    
            var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
            var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
            
            var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
            
            // check for colinear edges
            var colinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
            
            if ( Math.abs( colinear0 ) > EPSILON ) {		// not colinear
                
                // length of vectors for normalizing
        
                var v_prev_len = Math.sqrt( v_prev_lensq );
                var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
                
                // shift adjacent points by unit vectors to the left
        
                var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
                var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
                
                var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
                var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
        
                // scaling factor for v_prev to intersection point
        
                var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
                            ( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
                          ( v_prev_x * v_next_y - v_prev_y * v_next_x );
        
                // vector from inPt to intersection point
        
                v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
                v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
        
                // Don't normalize!, otherwise sharp corners become ugly
                //  but prevent crazy spikes
                var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y )
                if ( v_trans_lensq <= 2 ) {
                    return	new THREE.Vector2( v_trans_x, v_trans_y );
                } else {
                    shrink_by = Math.sqrt( v_trans_lensq / 2 );
                }
                
            } else {		// handle special case of colinear edges
    
                var direction_eq = false;		// assumes: opposite
                if ( v_prev_x > EPSILON ) {
                    if ( v_next_x > EPSILON ) { direction_eq = true; }
                } else {
                    if ( v_prev_x < - EPSILON ) {
                        if ( v_next_x < - EPSILON ) { direction_eq = true; }
                    } else {
                        if ( Math.sign(v_prev_y) == Math.sign(v_next_y) ) { direction_eq = true; }
                    }
                }
    
                if ( direction_eq ) {
                    // console.log("Warning: lines are a straight sequence");
                    v_trans_x = - v_prev_y;
                    v_trans_y =  v_prev_x;
                    shrink_by = Math.sqrt( v_prev_lensq );
                } else {
                    // console.log("Warning: lines are a straight spike");
                    v_trans_x = v_prev_x;
                    v_trans_y = v_prev_y;
                    shrink_by = Math.sqrt( v_prev_lensq / 2 );
                }
    
            }
    
            return	new THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
    
        }
    
    
        var contourMovements = [];
    
        for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
    
            if ( j === il ) j = 0;
            if ( k === il ) k = 0;
    
            //  (j)---(i)---(k)
            // console.log('i,j,k', i, j , k)
    
            var pt_i = contour[ i ];
            var pt_j = contour[ j ];
            var pt_k = contour[ k ];
    
            contourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
    
        }
    
        var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();
    
        for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
            ahole = holes[ h ];
    
            oneHoleMovements = [];
    
            for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
    
                if ( j === il ) j = 0;
                if ( k === il ) k = 0;
    
                //  (j)---(i)---(k)
                oneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
    
            }
    
            holesMovements.push( oneHoleMovements );
            verticesMovements = verticesMovements.concat( oneHoleMovements );
    
        }
    
    
        // Loop bevelSegments, 1 for the front, 1 for the back
    
        for ( b = 0; b < bevelSegments; b ++ ) {
        //for ( b = bevelSegments; b > 0; b -- ) {
    
            t = b / bevelSegments;
            z = bevelThickness * ( 1 - t );
    
            //z = bevelThickness * t;
            bs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved
            //bs = bevelSize * t ; // linear
    
            // contract shape
    
            for ( i = 0, il = contour.length; i < il; i ++ ) {
    
                vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
    
                v( vert.x, vert.y,  - z );
    
            }
    
            // expand holes
    
            for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                ahole = holes[ h ];
                oneHoleMovements = holesMovements[ h ];
    
                for ( i = 0, il = ahole.length; i < il; i ++ ) {
    
                    vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
    
                    v( vert.x, vert.y,  - z );
    
                }
    
            }
    
        }
    
        bs = bevelSize;
    
        // Back facing vertices
    
        for ( i = 0; i < vlen; i ++ ) {
    
            vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
    
            if ( ! extrudeByPath ) {
    
                v( vert.x, vert.y, 0 );
    
            } else {
    
                // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
    
                normal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);
                binormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);
    
                position2.copy( extrudePts[0] ).add(normal).add(binormal);
    
                v( position2.x, position2.y, position2.z );
    
            }
    
        }
    
        // Add stepped vertices...
        // Including front facing vertices
    
        var s;
    
        for ( s = 1; s <= steps; s ++ ) {
    
            for ( i = 0; i < vlen; i ++ ) {
    
                vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
    
                if ( ! extrudeByPath ) {
    
                    v( vert.x, vert.y, amount / steps * s );
    
                } else {
    
                    // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
    
                    normal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );
                    binormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );
    
                    position2.copy( extrudePts[s] ).add( normal ).add( binormal );
    
                    v( position2.x, position2.y, position2.z );
    
                }
    
            }
    
        }
    
    
        // Add bevel segments planes
    
        //for ( b = 1; b <= bevelSegments; b ++ ) {
        for ( b = bevelSegments - 1; b >= 0; b -- ) {
    
            t = b / bevelSegments;
            z = bevelThickness * ( 1 - t );
            //bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
            bs = bevelSize * Math.sin ( t * Math.PI/2 ) ;
    
            // contract shape
    
            for ( i = 0, il = contour.length; i < il; i ++ ) {
    
                vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
                v( vert.x, vert.y,  amount + z );
    
            }
    
            // expand holes
    
            for ( h = 0, hl = holes.length; h < hl; h ++ ) {
    
                ahole = holes[ h ];
                oneHoleMovements = holesMovements[ h ];
    
                for ( i = 0, il = ahole.length; i < il; i ++ ) {
    
                    vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
    
                    if ( ! extrudeByPath ) {
    
                        v( vert.x, vert.y,  amount + z );
    
                    } else {
    
                        v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
    
                    }
    
                }
    
            }
    
        }
    
        /* Faces */
    
        // Top and bottom faces
    
        buildLidFaces();
    
        // Sides faces
    
        buildSideFaces();
    
    
        /////  Internal functions
    
        function buildLidFaces() {
    
            if ( bevelEnabled ) {
    
                var layer = 0 ; // steps + 1
                var offset = vlen * layer;
    
                // Bottom faces
    
                for ( i = 0; i < flen; i ++ ) {
    
                    face = faces[ i ];
                    f3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset );
    
                }
    
                layer = steps + bevelSegments * 2;
                offset = vlen * layer;
    
                // Top faces
    
                for ( i = 0; i < flen; i ++ ) {
    
                    face = faces[ i ];
                    f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
    
                }
    
            } else {
    
                // Bottom faces
    
                for ( i = 0; i < flen; i ++ ) {
    
                    face = faces[ i ];
                    f3( face[ 2 ], face[ 1 ], face[ 0 ] );
    
                }
    
                // Top faces
    
                for ( i = 0; i < flen; i ++ ) {
    
                    face = faces[ i ];
                    f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
    
                }
            }
    
        }
    
        // Create faces for the z-sides of the shape
    
        function buildSideFaces() {
    
            var layeroffset = 0;
            sidewalls( contour, layeroffset );
            layeroffset += contour.length;
    
            for ( h = 0, hl = holes.length;  h < hl; h ++ ) {
    
                ahole = holes[ h ];
                sidewalls( ahole, layeroffset );
    
                //, true
                layeroffset += ahole.length;
    
            }
    
        }
    
        function sidewalls( contour, layeroffset ) {
    
            var j, k;
            i = contour.length;
    
            while ( --i >= 0 ) {
    
                j = i;
                k = i - 1;
                if ( k < 0 ) k = contour.length - 1;
    
                //console.log('b', i,j, i-1, k,vertices.length);
    
                var s = 0, sl = steps  + bevelSegments * 2;
    
                for ( s = 0; s < sl; s ++ ) {
    
                    var slen1 = vlen * s;
                    var slen2 = vlen * ( s + 1 );
    
                    var a = layeroffset + j + slen1,
                        b = layeroffset + k + slen1,
                        c = layeroffset + k + slen2,
                        d = layeroffset + j + slen2;
    
                    f4( a, b, c, d, contour, s, sl, j, k );
    
                }
            }
    
        }
    
    
        function v( x, y, z ) {
    
            scope.vertices.push( new THREE.Vector3( x, y, z ) );
    
        }
    
        function f3( a, b, c ) {
    
            a += shapesOffset;
            b += shapesOffset;
            c += shapesOffset;
    
            // normal, color, material
            scope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
    
            var uvs = uvgen.generateTopUV( scope, a, b, c );
    
             scope.faceVertexUvs[ 0 ].push( uvs );
    
        }
    
        function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {
    
            a += shapesOffset;
            b += shapesOffset;
            c += shapesOffset;
            d += shapesOffset;
    
             scope.faces.push( new THREE.Face3( a, b, d, null, null, extrudeMaterial ) );
             scope.faces.push( new THREE.Face3( b, c, d, null, null, extrudeMaterial ) );
    
             var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );
    
             scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
             scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );
    
        }
    
    };
    
    THREE.ExtrudeGeometry.WorldUVGenerator = {
    
        generateTopUV: function ( geometry, indexA, indexB, indexC ) {
    
            var vertices = geometry.vertices;
    
            var a = vertices[ indexA ];
            var b = vertices[ indexB ];
            var c = vertices[ indexC ];
    
            return [
                new THREE.Vector2( a.x, a.y ),
                new THREE.Vector2( b.x, b.y ),
                new THREE.Vector2( c.x, c.y )
            ];
    
        },
    
        generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {
    
            var vertices = geometry.vertices;
    
            var a = vertices[ indexA ];
            var b = vertices[ indexB ];
            var c = vertices[ indexC ];
            var d = vertices[ indexD ];
    
            if ( Math.abs( a.y - b.y ) < 0.01 ) {
                return [
                    new THREE.Vector2( a.x, 1 - a.z ),
                    new THREE.Vector2( b.x, 1 - b.z ),
                    new THREE.Vector2( c.x, 1 - c.z ),
                    new THREE.Vector2( d.x, 1 - d.z )
                ];
            } else {
                return [
                    new THREE.Vector2( a.y, 1 - a.z ),
                    new THREE.Vector2( b.y, 1 - b.z ),
                    new THREE.Vector2( c.y, 1 - c.z ),
                    new THREE.Vector2( d.y, 1 - d.z )
                ];
            }
        }
    };
    
    // File:src/extras/geometries/ShapeGeometry.js
    
    /**
     * @author jonobr1 / http://jonobr1.com
     *
     * Creates a one-sided polygonal geometry from a path shape. Similar to
     * ExtrudeGeometry.
     *
     * parameters = {
     *
     *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
     *
     *	material: <int> // material index for front and back faces
     *	uvGenerator: <Object> // object that provides UV generator functions
     *
     * }
     **/
    
    THREE.ShapeGeometry = function ( shapes, options ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'ShapeGeometry';
    
        if ( shapes instanceof Array === false ) shapes = [ shapes ];
    
        this.addShapeList( shapes, options );
    
        this.computeFaceNormals();
    
    };
    
    THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    /**
     * Add an array of shapes to THREE.ShapeGeometry.
     */
    THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {
    
        for ( var i = 0, l = shapes.length; i < l; i ++ ) {
    
            this.addShape( shapes[ i ], options );
    
        }
    
        return this;
    
    };
    
    /**
     * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
     */
    THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {
    
        if ( options === undefined ) options = {};
        var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
    
        var material = options.material;
        var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;
    
        //
    
        var i, l, hole, s;
    
        var shapesOffset = this.vertices.length;
        var shapePoints = shape.extractPoints( curveSegments );
    
        var vertices = shapePoints.shape;
        var holes = shapePoints.holes;
    
        var reverse = ! THREE.Shape.Utils.isClockWise( vertices );
    
        if ( reverse ) {
    
            vertices = vertices.reverse();
    
            // Maybe we should also check if holes are in the opposite direction, just to be safe...
    
            for ( i = 0, l = holes.length; i < l; i ++ ) {
    
                hole = holes[ i ];
    
                if ( THREE.Shape.Utils.isClockWise( hole ) ) {
    
                    holes[ i ] = hole.reverse();
    
                }
    
            }
    
            reverse = false;
    
        }
    
        var faces = THREE.Shape.Utils.triangulateShape( vertices, holes );
    
        // Vertices
    
        var contour = vertices;
    
        for ( i = 0, l = holes.length; i < l; i ++ ) {
    
            hole = holes[ i ];
            vertices = vertices.concat( hole );
    
        }
    
        //
    
        var vert, vlen = vertices.length;
        var face, flen = faces.length;
        var cont, clen = contour.length;
    
        for ( i = 0; i < vlen; i ++ ) {
    
            vert = vertices[ i ];
    
            this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );
    
        }
    
        for ( i = 0; i < flen; i ++ ) {
    
            face = faces[ i ];
    
            var a = face[ 0 ] + shapesOffset;
            var b = face[ 1 ] + shapesOffset;
            var c = face[ 2 ] + shapesOffset;
    
            this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
            this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );
    
        }
    
    };
    
    // File:src/extras/geometries/LatheGeometry.js
    
    /**
     * @author astrodud / http://astrodud.isgreat.org/
     * @author zz85 / https://github.com/zz85
     * @author bhouston / http://exocortex.com
     */
    
    // points - to create a closed torus, one must use a set of points 
    //    like so: [ a, b, c, d, a ], see first is the same as last.
    // segments - the number of circumference segments to create
    // phiStart - the starting radian
    // phiLength - the radian (0 to 2*PI) range of the lathed section
    //    2*pi is a closed lathe, less than 2PI is a portion.
    
    THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'LatheGeometry';
    
        this.parameters = {
            points: points,
            segments: segments,
            phiStart: phiStart,
            phiLength: phiLength
        };
    
        segments = segments || 12;
        phiStart = phiStart || 0;
        phiLength = phiLength || 2 * Math.PI;
    
        var inversePointLength = 1.0 / ( points.length - 1 );
        var inverseSegments = 1.0 / segments;
    
        for ( var i = 0, il = segments; i <= il; i ++ ) {
    
            var phi = phiStart + i * inverseSegments * phiLength;
    
            var c = Math.cos( phi ),
                s = Math.sin( phi );
    
            for ( var j = 0, jl = points.length; j < jl; j ++ ) {
    
                var pt = points[ j ];
    
                var vertex = new THREE.Vector3();
    
                vertex.x = c * pt.x - s * pt.y;
                vertex.y = s * pt.x + c * pt.y;
                vertex.z = pt.z;
    
                this.vertices.push( vertex );
    
            }
    
        }
    
        var np = points.length;
    
        for ( var i = 0, il = segments; i < il; i ++ ) {
    
            for ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {
    
                var base = j + np * i;
                var a = base;
                var b = base + np;
                var c = base + 1 + np;
                var d = base + 1;
    
                var u0 = i * inverseSegments;
                var v0 = j * inversePointLength;
                var u1 = u0 + inverseSegments;
                var v1 = v0 + inversePointLength;
    
                this.faces.push( new THREE.Face3( a, b, d ) );
    
                this.faceVertexUvs[ 0 ].push( [
    
                    new THREE.Vector2( u0, v0 ),
                    new THREE.Vector2( u1, v0 ),
                    new THREE.Vector2( u0, v1 )
    
                ] );
    
                this.faces.push( new THREE.Face3( b, c, d ) );
    
                this.faceVertexUvs[ 0 ].push( [
    
                    new THREE.Vector2( u1, v0 ),
                    new THREE.Vector2( u1, v1 ),
                    new THREE.Vector2( u0, v1 )
    
                ] );
    
    
            }
    
        }
    
        this.mergeVertices();
        this.computeFaceNormals();
        this.computeVertexNormals();
    
    };
    
    THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/PlaneGeometry.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
     */
    
    THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {
    
        console.info( 'THREE.PlaneGeometry: Consider using THREE.PlaneBufferGeometry for lower memory footprint.' );
    
        THREE.Geometry.call( this );
    
        this.type = 'PlaneGeometry';
    
        this.parameters = {
            width: width,
            height: height,
            widthSegments: widthSegments,
            heightSegments: heightSegments
        };
    
        this.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
    
    };
    
    THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/PlaneBufferGeometry.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
     */
    
    THREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {
    
        THREE.BufferGeometry.call( this );
    
        this.type = 'PlaneBufferGeometry';
    
        this.parameters = {
            width: width,
            height: height,
            widthSegments: widthSegments,
            heightSegments: heightSegments
        };
    
        var width_half = width / 2;
        var height_half = height / 2;
    
        var gridX = widthSegments || 1;
        var gridY = heightSegments || 1;
    
        var gridX1 = gridX + 1;
        var gridY1 = gridY + 1;
    
        var segment_width = width / gridX;
        var segment_height = height / gridY;
    
        var vertices = new Float32Array( gridX1 * gridY1 * 3 );
        var normals = new Float32Array( gridX1 * gridY1 * 3 );
        var uvs = new Float32Array( gridX1 * gridY1 * 2 );
    
        var offset = 0;
        var offset2 = 0;
    
        for ( var iy = 0; iy < gridY1; iy ++ ) {
    
            var y = iy * segment_height - height_half;
    
            for ( var ix = 0; ix < gridX1; ix ++ ) {
    
                var x = ix * segment_width - width_half;
    
                vertices[ offset     ] = x;
                vertices[ offset + 1 ] = - y;
    
                normals[ offset + 2 ] = 1;
    
                uvs[ offset2     ] = ix / gridX;
                uvs[ offset2 + 1 ] = 1 - ( iy / gridY );
    
                offset += 3;
                offset2 += 2;
    
            }
    
        }
    
        offset = 0;
    
        var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );
    
        for ( var iy = 0; iy < gridY; iy ++ ) {
    
            for ( var ix = 0; ix < gridX; ix ++ ) {
    
                var a = ix + gridX1 * iy;
                var b = ix + gridX1 * ( iy + 1 );
                var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
                var d = ( ix + 1 ) + gridX1 * iy;
    
                indices[ offset     ] = a;
                indices[ offset + 1 ] = b;
                indices[ offset + 2 ] = d;
    
                indices[ offset + 3 ] = b;
                indices[ offset + 4 ] = c;
                indices[ offset + 5 ] = d;
    
                offset += 6;
    
            }
    
        }
    
        this.addAttribute( 'index', new THREE.BufferAttribute( indices, 1 ) );
        this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
        this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
        this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
    
    };
    
    THREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
    
    // File:src/extras/geometries/RingGeometry.js
    
    /**
     * @author Kaleb Murphy
     */
    
    THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'RingGeometry';
    
        this.parameters = {
            innerRadius: innerRadius,
            outerRadius: outerRadius,
            thetaSegments: thetaSegments,
            phiSegments: phiSegments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
    
        innerRadius = innerRadius || 0;
        outerRadius = outerRadius || 50;
    
        thetaStart = thetaStart !== undefined ? thetaStart : 0;
        thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
    
        thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
        phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;
    
        var i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
    
        for ( i = 0; i < phiSegments + 1; i ++ ) { // concentric circles inside ring
    
            for ( o = 0; o < thetaSegments + 1; o ++ ) { // number of segments per circle
    
                var vertex = new THREE.Vector3();
                var segment = thetaStart + o / thetaSegments * thetaLength;
                vertex.x = radius * Math.cos( segment );
                vertex.y = radius * Math.sin( segment );
    
                this.vertices.push( vertex );
                uvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );
            }
    
            radius += radiusStep;
    
        }
    
        var n = new THREE.Vector3( 0, 0, 1 );
    
        for ( i = 0; i < phiSegments; i ++ ) { // concentric circles inside ring
    
            var thetaSegment = i * (thetaSegments + 1);
    
            for ( o = 0; o < thetaSegments ; o ++ ) { // number of segments per circle
    
                var segment = o + thetaSegment;
    
                var v1 = segment;
                var v2 = segment + thetaSegments + 1;
                var v3 = segment + thetaSegments + 2;
    
                this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
                this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);
    
                v1 = segment;
                v2 = segment + thetaSegments + 2;
                v3 = segment + 1;
    
                this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
                this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);
    
            }
        }
    
        this.computeFaceNormals();
    
        this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );
    
    };
    
    THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    
    // File:src/extras/geometries/SphereGeometry.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'SphereGeometry';
    
        this.parameters = {
            radius: radius,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            phiStart: phiStart,
            phiLength: phiLength,
            thetaStart: thetaStart,
            thetaLength: thetaLength 
        };
    
        radius = radius || 50;
    
        widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
        heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );
    
        phiStart = phiStart !== undefined ? phiStart : 0;
        phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
    
        thetaStart = thetaStart !== undefined ? thetaStart : 0;
        thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
    
        var x, y, vertices = [], uvs = [];
    
        for ( y = 0; y <= heightSegments; y ++ ) {
    
            var verticesRow = [];
            var uvsRow = [];
    
            for ( x = 0; x <= widthSegments; x ++ ) {
    
                var u = x / widthSegments;
                var v = y / heightSegments;
    
                var vertex = new THREE.Vector3();
                vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
                vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
                vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
    
                this.vertices.push( vertex );
    
                verticesRow.push( this.vertices.length - 1 );
                uvsRow.push( new THREE.Vector2( u, 1 - v ) );
    
            }
    
            vertices.push( verticesRow );
            uvs.push( uvsRow );
    
        }
    
        for ( y = 0; y < heightSegments; y ++ ) {
    
            for ( x = 0; x < widthSegments; x ++ ) {
    
                var v1 = vertices[ y ][ x + 1 ];
                var v2 = vertices[ y ][ x ];
                var v3 = vertices[ y + 1 ][ x ];
                var v4 = vertices[ y + 1 ][ x + 1 ];
    
                var n1 = this.vertices[ v1 ].clone().normalize();
                var n2 = this.vertices[ v2 ].clone().normalize();
                var n3 = this.vertices[ v3 ].clone().normalize();
                var n4 = this.vertices[ v4 ].clone().normalize();
    
                var uv1 = uvs[ y ][ x + 1 ].clone();
                var uv2 = uvs[ y ][ x ].clone();
                var uv3 = uvs[ y + 1 ][ x ].clone();
                var uv4 = uvs[ y + 1 ][ x + 1 ].clone();
    
                if ( Math.abs( this.vertices[ v1 ].y ) === radius ) {
    
                    uv1.x = ( uv1.x + uv2.x ) / 2;
                    this.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );
                    this.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );
    
                } else if ( Math.abs( this.vertices[ v3 ].y ) === radius ) {
    
                    uv3.x = ( uv3.x + uv4.x ) / 2;
                    this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
                    this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );
    
                } else {
    
                    this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
                    this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );
    
                    this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
                    this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );
    
                }
    
            }
    
        }
    
        this.computeFaceNormals();
    
        this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );
    
    };
    
    THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/TextGeometry.js
    
    /**
     * @author zz85 / http://www.lab4games.net/zz85/blog
     * @author alteredq / http://alteredqualia.com/
     *
     * For creating 3D text geometry in three.js
     *
     * Text = 3D Text
     *
     * parameters = {
     *  size: 			<float>, 	// size of the text
     *  height: 		<float>, 	// thickness to extrude text
     *  curveSegments: 	<int>,		// number of points on the curves
     *
     *  font: 			<string>,		// font name
     *  weight: 		<string>,		// font weight (normal, bold)
     *  style: 			<string>,		// font style  (normal, italics)
     *
     *  bevelEnabled:	<bool>,			// turn on bevel
     *  bevelThickness: <float>, 		// how deep into text bevel goes
     *  bevelSize:		<float>, 		// how far from text outline is bevel
     *  }
     *
     */
    
    /*	Usage Examples
    
        // TextGeometry wrapper
    
        var text3d = new TextGeometry( text, options );
    
        // Complete manner
    
        var textShapes = THREE.FontUtils.generateShapes( text, options );
        var text3d = new ExtrudeGeometry( textShapes, options );
    
    */
    
    
    THREE.TextGeometry = function ( text, parameters ) {
    
        parameters = parameters || {};
    
        var textShapes = THREE.FontUtils.generateShapes( text, parameters );
    
        // translate parameters to ExtrudeGeometry API
    
        parameters.amount = parameters.height !== undefined ? parameters.height : 50;
    
        // defaults
    
        if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
        if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
        if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;
    
        THREE.ExtrudeGeometry.call( this, textShapes, parameters );
    
        this.type = 'TextGeometry';
    
    };
    
    THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );
    
    // File:src/extras/geometries/TorusGeometry.js
    
    /**
     * @author oosmoxiecode
     * @author mrdoob / http://mrdoob.com/
     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
     */
    
    THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'TorusGeometry';
    
        this.parameters = {
            radius: radius,
            tube: tube,
            radialSegments: radialSegments,
            tubularSegments: tubularSegments,
            arc: arc
        };
    
        radius = radius || 100;
        tube = tube || 40;
        radialSegments = radialSegments || 8;
        tubularSegments = tubularSegments || 6;
        arc = arc || Math.PI * 2;
    
        var center = new THREE.Vector3(), uvs = [], normals = [];
    
        for ( var j = 0; j <= radialSegments; j ++ ) {
    
            for ( var i = 0; i <= tubularSegments; i ++ ) {
    
                var u = i / tubularSegments * arc;
                var v = j / radialSegments * Math.PI * 2;
    
                center.x = radius * Math.cos( u );
                center.y = radius * Math.sin( u );
    
                var vertex = new THREE.Vector3();
                vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
                vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
                vertex.z = tube * Math.sin( v );
    
                this.vertices.push( vertex );
    
                uvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );
                normals.push( vertex.clone().sub( center ).normalize() );
    
            }
    
        }
    
        for ( var j = 1; j <= radialSegments; j ++ ) {
    
            for ( var i = 1; i <= tubularSegments; i ++ ) {
    
                var a = ( tubularSegments + 1 ) * j + i - 1;
                var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
                var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
                var d = ( tubularSegments + 1 ) * j + i;
    
                var face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );
                this.faces.push( face );
                this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );
    
                face = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );
                this.faces.push( face );
                this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );
    
            }
    
        }
    
        this.computeFaceNormals();
    
    };
    
    THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/TorusKnotGeometry.js
    
    /**
     * @author oosmoxiecode
     * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473
     */
    
    THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'TorusKnotGeometry';
    
        this.parameters = {
            radius: radius,
            tube: tube,
            radialSegments: radialSegments,
            tubularSegments: tubularSegments,
            p: p,
            q: q,
            heightScale: heightScale
        };
    
        radius = radius || 100;
        tube = tube || 40;
        radialSegments = radialSegments || 64;
        tubularSegments = tubularSegments || 8;
        p = p || 2;
        q = q || 3;
        heightScale = heightScale || 1;
        
        var grid = new Array( radialSegments );
        var tang = new THREE.Vector3();
        var n = new THREE.Vector3();
        var bitan = new THREE.Vector3();
    
        for ( var i = 0; i < radialSegments; ++ i ) {
    
            grid[ i ] = new Array( tubularSegments );
            var u = i / radialSegments * 2 * p * Math.PI;
            var p1 = getPos( u, q, p, radius, heightScale );
            var p2 = getPos( u + 0.01, q, p, radius, heightScale );
            tang.subVectors( p2, p1 );
            n.addVectors( p2, p1 );
    
            bitan.crossVectors( tang, n );
            n.crossVectors( bitan, tang );
            bitan.normalize();
            n.normalize();
    
            for ( var j = 0; j < tubularSegments; ++ j ) {
    
                var v = j / tubularSegments * 2 * Math.PI;
                var cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
                var cy = tube * Math.sin( v );
    
                var pos = new THREE.Vector3();
                pos.x = p1.x + cx * n.x + cy * bitan.x;
                pos.y = p1.y + cx * n.y + cy * bitan.y;
                pos.z = p1.z + cx * n.z + cy * bitan.z;
    
                grid[ i ][ j ] = this.vertices.push( pos ) - 1;
    
            }
    
        }
    
        for ( var i = 0; i < radialSegments; ++ i ) {
    
            for ( var j = 0; j < tubularSegments; ++ j ) {
    
                var ip = ( i + 1 ) % radialSegments;
                var jp = ( j + 1 ) % tubularSegments;
    
                var a = grid[ i ][ j ];
                var b = grid[ ip ][ j ];
                var c = grid[ ip ][ jp ];
                var d = grid[ i ][ jp ];
    
                var uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );
                var uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );
                var uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );
                var uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );
    
                this.faces.push( new THREE.Face3( a, b, d ) );
                this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );
    
                this.faces.push( new THREE.Face3( b, c, d ) );
                this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );
    
            }
        }
    
        this.computeFaceNormals();
        this.computeVertexNormals();
    
        function getPos( u, in_q, in_p, radius, heightScale ) {
    
            var cu = Math.cos( u );
            var su = Math.sin( u );
            var quOverP = in_q / in_p * u;
            var cs = Math.cos( quOverP );
    
            var tx = radius * ( 2 + cs ) * 0.5 * cu;
            var ty = radius * ( 2 + cs ) * su * 0.5;
            var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;
    
            return new THREE.Vector3( tx, ty, tz );
    
        }
    
    };
    
    THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/TubeGeometry.js
    
    /**
     * @author WestLangley / https://github.com/WestLangley
     * @author zz85 / https://github.com/zz85
     * @author miningold / https://github.com/miningold
     *
     * Modified from the TorusKnotGeometry by @oosmoxiecode
     *
     * Creates a tube which extrudes along a 3d spline
     *
     * Uses parallel transport frames as described in
     * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
     */
    
    THREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'TubeGeometry';
    
        this.parameters = {
            path: path,
            segments: segments,
            radius: radius,
            radialSegments: radialSegments,
            closed: closed
        };
    
        segments = segments || 64;
        radius = radius || 1;
        radialSegments = radialSegments || 8;
        closed = closed || false;
    
        var grid = [];
    
        var scope = this,
    
            tangent,
            normal,
            binormal,
    
            numpoints = segments + 1,
    
            x, y, z,
            tx, ty, tz,
            u, v,
    
            cx, cy,
            pos, pos2 = new THREE.Vector3(),
            i, j,
            ip, jp,
            a, b, c, d,
            uva, uvb, uvc, uvd;
    
        var frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),
            tangents = frames.tangents,
            normals = frames.normals,
            binormals = frames.binormals;
    
        // proxy internals
        this.tangents = tangents;
        this.normals = normals;
        this.binormals = binormals;
    
        function vert( x, y, z ) {
    
            return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;
    
        }
    
        // consruct the grid
    
        for ( i = 0; i < numpoints; i ++ ) {
    
            grid[ i ] = [];
    
            u = i / ( numpoints - 1 );
    
            pos = path.getPointAt( u );
    
            tangent = tangents[ i ];
            normal = normals[ i ];
            binormal = binormals[ i ];
    
            for ( j = 0; j < radialSegments; j ++ ) {
    
                v = j / radialSegments * 2 * Math.PI;
    
                cx = - radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
                cy = radius * Math.sin( v );
    
                pos2.copy( pos );
                pos2.x += cx * normal.x + cy * binormal.x;
                pos2.y += cx * normal.y + cy * binormal.y;
                pos2.z += cx * normal.z + cy * binormal.z;
    
                grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );
    
            }
        }
    
    
        // construct the mesh
    
        for ( i = 0; i < segments; i ++ ) {
    
            for ( j = 0; j < radialSegments; j ++ ) {
    
                ip = ( closed ) ? (i + 1) % segments : i + 1;
                jp = (j + 1) % radialSegments;
    
                a = grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
                b = grid[ ip ][ j ];
                c = grid[ ip ][ jp ];
                d = grid[ i ][ jp ];
    
                uva = new THREE.Vector2( i / segments, j / radialSegments );
                uvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );
                uvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
                uvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );
    
                this.faces.push( new THREE.Face3( a, b, d ) );
                this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );
    
                this.faces.push( new THREE.Face3( b, c, d ) );
                this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );
    
            }
        }
    
        this.computeFaceNormals();
        this.computeVertexNormals();
    
    };
    
    THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    
    // For computing of Frenet frames, exposing the tangents, normals and binormals the spline
    THREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {
    
        var	tangent = new THREE.Vector3(),
            normal = new THREE.Vector3(),
            binormal = new THREE.Vector3(),
    
            tangents = [],
            normals = [],
            binormals = [],
    
            vec = new THREE.Vector3(),
            mat = new THREE.Matrix4(),
    
            numpoints = segments + 1,
            theta,
            epsilon = 0.0001,
            smallest,
    
            tx, ty, tz,
            i, u, v;
    
    
        // expose internals
        this.tangents = tangents;
        this.normals = normals;
        this.binormals = binormals;
    
        // compute the tangent vectors for each segment on the path
    
        for ( i = 0; i < numpoints; i ++ ) {
    
            u = i / ( numpoints - 1 );
    
            tangents[ i ] = path.getTangentAt( u );
            tangents[ i ].normalize();
    
        }
    
        initialNormal3();
    
        /*
        function initialNormal1(lastBinormal) {
            // fixed start binormal. Has dangers of 0 vectors
            normals[ 0 ] = new THREE.Vector3();
            binormals[ 0 ] = new THREE.Vector3();
            if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
            normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
            binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
        }
    
        function initialNormal2() {
    
            // This uses the Frenet-Serret formula for deriving binormal
            var t2 = path.getTangentAt( epsilon );
    
            normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
            binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );
    
            normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
            binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
    
        }
        */
    
        function initialNormal3() {
            // select an initial normal vector perpenicular to the first tangent vector,
            // and in the direction of the smallest tangent xyz component
    
            normals[ 0 ] = new THREE.Vector3();
            binormals[ 0 ] = new THREE.Vector3();
            smallest = Number.MAX_VALUE;
            tx = Math.abs( tangents[ 0 ].x );
            ty = Math.abs( tangents[ 0 ].y );
            tz = Math.abs( tangents[ 0 ].z );
    
            if ( tx <= smallest ) {
                smallest = tx;
                normal.set( 1, 0, 0 );
            }
    
            if ( ty <= smallest ) {
                smallest = ty;
                normal.set( 0, 1, 0 );
            }
    
            if ( tz <= smallest ) {
                normal.set( 0, 0, 1 );
            }
    
            vec.crossVectors( tangents[ 0 ], normal ).normalize();
    
            normals[ 0 ].crossVectors( tangents[ 0 ], vec );
            binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
        }
    
    
        // compute the slowly-varying normal and binormal vectors for each segment on the path
    
        for ( i = 1; i < numpoints; i ++ ) {
    
            normals[ i ] = normals[ i-1 ].clone();
    
            binormals[ i ] = binormals[ i-1 ].clone();
    
            vec.crossVectors( tangents[ i-1 ], tangents[ i ] );
    
            if ( vec.length() > epsilon ) {
    
                vec.normalize();
    
                theta = Math.acos( THREE.Math.clamp( tangents[ i-1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
    
                normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
    
            }
    
            binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
    
        }
    
    
        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
    
        if ( closed ) {
    
            theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints-1 ] ), - 1, 1 ) );
            theta /= ( numpoints - 1 );
    
            if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {
    
                theta = - theta;
    
            }
    
            for ( i = 1; i < numpoints; i ++ ) {
    
                // twist a little...
                normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
                binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
    
            }
    
        }
    };
    
    // File:src/extras/geometries/PolyhedronGeometry.js
    
    /**
     * @author clockworkgeek / https://github.com/clockworkgeek
     * @author timothypratley / https://github.com/timothypratley
     * @author WestLangley / http://github.com/WestLangley
    */
    
    THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'PolyhedronGeometry';
    
        this.parameters = {
            vertices: vertices,
            indices: indices,
            radius: radius,
            detail: detail
        };
    
        radius = radius || 1;
        detail = detail || 0;
    
        var that = this;
    
        for ( var i = 0, l = vertices.length; i < l; i += 3 ) {
    
            prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );
    
        }
    
        var midpoints = [], p = this.vertices;
    
        var faces = [];
    
        for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {
    
            var v1 = p[ indices[ i     ] ];
            var v2 = p[ indices[ i + 1 ] ];
            var v3 = p[ indices[ i + 2 ] ];
    
            faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
    
        }
    
        var centroid = new THREE.Vector3();
    
        for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
            subdivide( faces[ i ], detail );
    
        }
    
    
        // Handle case when face straddles the seam
    
        for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {
    
            var uvs = this.faceVertexUvs[ 0 ][ i ];
    
            var x0 = uvs[ 0 ].x;
            var x1 = uvs[ 1 ].x;
            var x2 = uvs[ 2 ].x;
    
            var max = Math.max( x0, Math.max( x1, x2 ) );
            var min = Math.min( x0, Math.min( x1, x2 ) );
    
            if ( max > 0.9 && min < 0.1 ) { // 0.9 is somewhat arbitrary
    
                if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
                if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
                if ( x2 < 0.2 ) uvs[ 2 ].x += 1;
    
            }
    
        }
    
    
        // Apply radius
    
        for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {
    
            this.vertices[ i ].multiplyScalar( radius );
    
        }
    
    
        // Merge vertices
    
        this.mergeVertices();
    
        this.computeFaceNormals();
    
        this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );
    
    
        // Project vector onto sphere's surface
    
        function prepare( vector ) {
    
            var vertex = vector.normalize().clone();
            vertex.index = that.vertices.push( vertex ) - 1;
    
            // Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.
    
            var u = azimuth( vector ) / 2 / Math.PI + 0.5;
            var v = inclination( vector ) / Math.PI + 0.5;
            vertex.uv = new THREE.Vector2( u, 1 - v );
    
            return vertex;
    
        }
    
    
        // Approximate a curved face with recursively sub-divided triangles.
    
        function make( v1, v2, v3 ) {
    
            var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
            that.faces.push( face );
    
            centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );
    
            var azi = azimuth( centroid );
    
            that.faceVertexUvs[ 0 ].push( [
                correctUV( v1.uv, v1, azi ),
                correctUV( v2.uv, v2, azi ),
                correctUV( v3.uv, v3, azi )
            ] );
    
        }
    
    
        // Analytically subdivide a face to the required detail level.
    
        function subdivide( face, detail ) {
    
            var cols = Math.pow(2, detail);
            var cells = Math.pow(4, detail);
            var a = prepare( that.vertices[ face.a ] );
            var b = prepare( that.vertices[ face.b ] );
            var c = prepare( that.vertices[ face.c ] );
            var v = [];
    
            // Construct all of the vertices for this subdivision.
    
            for ( var i = 0 ; i <= cols; i ++ ) {
    
                v[ i ] = [];
    
                var aj = prepare( a.clone().lerp( c, i / cols ) );
                var bj = prepare( b.clone().lerp( c, i / cols ) );
                var rows = cols - i;
    
                for ( var j = 0; j <= rows; j ++) {
    
                    if ( j == 0 && i == cols ) {
    
                        v[ i ][ j ] = aj;
    
                    } else {
    
                        v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );
    
                    }
    
                }
    
            }
    
            // Construct all of the faces.
    
            for ( var i = 0; i < cols ; i ++ ) {
    
                for ( var j = 0; j < 2 * (cols - i) - 1; j ++ ) {
    
                    var k = Math.floor( j / 2 );
    
                    if ( j % 2 == 0 ) {
    
                        make(
                            v[ i ][ k + 1],
                            v[ i + 1 ][ k ],
                            v[ i ][ k ]
                        );
    
                    } else {
    
                        make(
                            v[ i ][ k + 1 ],
                            v[ i + 1][ k + 1],
                            v[ i + 1 ][ k ]
                        );
    
                    }
    
                }
    
            }
    
        }
    
    
        // Angle around the Y axis, counter-clockwise when looking from above.
    
        function azimuth( vector ) {
    
            return Math.atan2( vector.z, - vector.x );
    
        }
    
    
        // Angle above the XZ plane.
    
        function inclination( vector ) {
    
            return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
    
        }
    
    
        // Texture fixing helper. Spheres have some odd behaviours.
    
        function correctUV( uv, vector, azimuth ) {
    
            if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
            if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
            return uv.clone();
    
        }
    
    
    };
    
    THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/DodecahedronGeometry.js
    
    /**
     * @author Abe Pazos / https://hamoid.com
     */
    
    THREE.DodecahedronGeometry = function ( radius, detail ) {
    
        this.parameters = {
            radius: radius,
            detail: detail
        };
    
        var t = ( 1 + Math.sqrt( 5 ) ) / 2;
        var r = 1 / t;
    
        var vertices = [
    
            // (±1, ±1, ±1)
            -1, -1, -1,    -1, -1,  1,
            -1,  1, -1,    -1,  1,  1,
             1, -1, -1,     1, -1,  1,
             1,  1, -1,     1,  1,  1,
    
            // (0, ±1/φ, ±φ)
             0, -r, -t,     0, -r,  t,
             0,  r, -t,     0,  r,  t,
    
            // (±1/φ, ±φ, 0)
            -r, -t,  0,    -r,  t,  0,
             r, -t,  0,     r,  t,  0,
    
            // (±φ, 0, ±1/φ)
            -t,  0, -r,     t,  0, -r,
            -t,  0,  r,     t,  0,  r
        ];
    
        var indices = [
             3, 11,  7,      3,  7, 15,      3, 15, 13,
             7, 19, 17,      7, 17,  6,      7,  6, 15,
            17,  4,  8,     17,  8, 10,     17, 10,  6,
             8,  0, 16,      8, 16,  2,      8,  2, 10,
             0, 12,  1,      0,  1, 18,      0, 18, 16,
             6, 10,  2,      6,  2, 13,      6, 13, 15,
             2, 16, 18,      2, 18,  3,      2,  3, 13,
            18,  1,  9,     18,  9, 11,     18, 11,  3,
             4, 14, 12,      4, 12,  0,      4,  0,  8,
            11,  9,  5,     11,  5, 19,     11, 19,  7,
            19,  5, 14,     19, 14,  4,     19,  4, 17,
             1, 12, 14,      1, 14,  5,      1,  5,  9
        ];
    
        THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
    
    };
    
    THREE.DodecahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/IcosahedronGeometry.js
    
    /**
     * @author timothypratley / https://github.com/timothypratley
     */
    
    THREE.IcosahedronGeometry = function ( radius, detail ) {
    
        var t = ( 1 + Math.sqrt( 5 ) ) / 2;
    
        var vertices = [
            - 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
             0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
             t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
        ];
    
        var indices = [
             0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
             1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
             3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
             4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
        ];
    
        THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
    
        this.type = 'IcosahedronGeometry';
    
        this.parameters = {
            radius: radius,
            detail: detail
        };
    };
    
    THREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/OctahedronGeometry.js
    
    /**
     * @author timothypratley / https://github.com/timothypratley
     */
    
    THREE.OctahedronGeometry = function ( radius, detail ) {
    
        this.parameters = {
            radius: radius,
            detail: detail
        };
    
        var vertices = [
            1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0,- 1, 0,    0, 0, 1,    0, 0,- 1
        ];
    
        var indices = [
            0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
        ];
    
        THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
    
        this.type = 'OctahedronGeometry';
    
        this.parameters = {
            radius: radius,
            detail: detail
        };
    };
    
    THREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/TetrahedronGeometry.js
    
    /**
     * @author timothypratley / https://github.com/timothypratley
     */
    
    THREE.TetrahedronGeometry = function ( radius, detail ) {
    
        var vertices = [
             1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
        ];
    
        var indices = [
             2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
        ];
    
        THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
    
        this.type = 'TetrahedronGeometry';
    
        this.parameters = {
            radius: radius,
            detail: detail
        };
    
    };
    
    THREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/geometries/ParametricGeometry.js
    
    /**
     * @author zz85 / https://github.com/zz85
     * Parametric Surfaces Geometry
     * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
     *
     * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
     *
     */
    
    THREE.ParametricGeometry = function ( func, slices, stacks ) {
    
        THREE.Geometry.call( this );
    
        this.type = 'ParametricGeometry';
    
        this.parameters = {
            func: func,
            slices: slices,
            stacks: stacks
        };
    
        var verts = this.vertices;
        var faces = this.faces;
        var uvs = this.faceVertexUvs[ 0 ];
    
        var i, il, j, p;
        var u, v;
    
        var stackCount = stacks + 1;
        var sliceCount = slices + 1;
    
        for ( i = 0; i <= stacks; i ++ ) {
    
            v = i / stacks;
    
            for ( j = 0; j <= slices; j ++ ) {
    
                u = j / slices;
    
                p = func( u, v );
                verts.push( p );
    
            }
        }
    
        var a, b, c, d;
        var uva, uvb, uvc, uvd;
    
        for ( i = 0; i < stacks; i ++ ) {
    
            for ( j = 0; j < slices; j ++ ) {
    
                a = i * sliceCount + j;
                b = i * sliceCount + j + 1;
                c = (i + 1) * sliceCount + j + 1;
                d = (i + 1) * sliceCount + j;
    
                uva = new THREE.Vector2( j / slices, i / stacks );
                uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
                uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
                uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );
    
                faces.push( new THREE.Face3( a, b, d ) );
                uvs.push( [ uva, uvb, uvd ] );
    
                faces.push( new THREE.Face3( b, c, d ) );
                uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );
    
            }
    
        }
    
        // console.log(this);
    
        // magic bullet
        // var diff = this.mergeVertices();
        // console.log('removed ', diff, ' vertices by merging');
    
        this.computeFaceNormals();
        this.computeVertexNormals();
    
    };
    
    THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );
    
    // File:src/extras/helpers/AxisHelper.js
    
    /**
     * @author sroucheray / http://sroucheray.org/
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.AxisHelper = function ( size ) {
    
        size = size || 1;
    
        var vertices = new Float32Array( [
            0, 0, 0,  size, 0, 0,
            0, 0, 0,  0, size, 0,
            0, 0, 0,  0, 0, size
        ] );
    
        var colors = new Float32Array( [
            1, 0, 0,  1, 0.6, 0,
            0, 1, 0,  0.6, 1, 0,
            0, 0, 1,  0, 0.6, 1
        ] );
    
        var geometry = new THREE.BufferGeometry();
        geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
        geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );
    
        var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );
    
        THREE.Line.call( this, geometry, material, THREE.LinePieces );
    
    };
    
    THREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );
    
    // File:src/extras/helpers/ArrowHelper.js
    
    /**
     * @author WestLangley / http://github.com/WestLangley
     * @author zz85 / http://github.com/zz85
     * @author bhouston / http://exocortex.com
     *
     * Creates an arrow for visualizing directions
     *
     * Parameters:
     *  dir - Vector3
     *  origin - Vector3
     *  length - Number
     *  color - color in hex value
     *  headLength - Number
     *  headWidth - Number
     */
    
    THREE.ArrowHelper = ( function () {
    
        var lineGeometry = new THREE.Geometry();
        lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );
    
        var coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );
        coneGeometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, - 0.5, 0 ) );
    
        return function ( dir, origin, length, color, headLength, headWidth ) {
    
            // dir is assumed to be normalized
    
            THREE.Object3D.call( this );
    
            if ( color === undefined ) color = 0xffff00;
            if ( length === undefined ) length = 1;
            if ( headLength === undefined ) headLength = 0.2 * length;
            if ( headWidth === undefined ) headWidth = 0.2 * headLength;
    
            this.position.copy( origin );
    
            this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );
            this.line.matrixAutoUpdate = false;
            this.add( this.line );
    
            this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );
            this.cone.matrixAutoUpdate = false;
            this.add( this.cone );
    
            this.setDirection( dir );
            this.setLength( length, headLength, headWidth );
    
        }
    
    }() );
    
    THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.ArrowHelper.prototype.setDirection = ( function () {
    
        var axis = new THREE.Vector3();
        var radians;
    
        return function ( dir ) {
    
            // dir is assumed to be normalized
    
            if ( dir.y > 0.99999 ) {
    
                this.quaternion.set( 0, 0, 0, 1 );
    
            } else if ( dir.y < - 0.99999 ) {
    
                this.quaternion.set( 1, 0, 0, 0 );
    
            } else {
    
                axis.set( dir.z, 0, - dir.x ).normalize();
    
                radians = Math.acos( dir.y );
    
                this.quaternion.setFromAxisAngle( axis, radians );
    
            }
    
        };
    
    }() );
    
    THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {
    
        if ( headLength === undefined ) headLength = 0.2 * length;
        if ( headWidth === undefined ) headWidth = 0.2 * headLength;
    
        this.line.scale.set( 1, length, 1 );
        this.line.updateMatrix();
    
        this.cone.scale.set( headWidth, headLength, headWidth );
        this.cone.position.y = length;
        this.cone.updateMatrix();
    
    };
    
    THREE.ArrowHelper.prototype.setColor = function ( color ) {
    
        this.line.material.color.set( color );
        this.cone.material.color.set( color );
    
    };
    
    // File:src/extras/helpers/BoxHelper.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.BoxHelper = function ( object ) {
    
        var geometry = new THREE.BufferGeometry();
        geometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( 72 ), 3 ) );
    
        THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ), THREE.LinePieces );
    
        if ( object !== undefined ) {
    
            this.update( object );
    
        }
    
    };
    
    THREE.BoxHelper.prototype = Object.create( THREE.Line.prototype );
    
    THREE.BoxHelper.prototype.update = function ( object ) {
    
        var geometry = object.geometry;
    
        if ( geometry.boundingBox === null ) {
    
            geometry.computeBoundingBox();
    
        }
    
        var min = geometry.boundingBox.min;
        var max = geometry.boundingBox.max;
    
        /*
          5____4
        1/___0/|
        | 6__|_7
        2/___3/
    
        0: max.x, max.y, max.z
        1: min.x, max.y, max.z
        2: min.x, min.y, max.z
        3: max.x, min.y, max.z
        4: max.x, max.y, min.z
        5: min.x, max.y, min.z
        6: min.x, min.y, min.z
        7: max.x, min.y, min.z
        */
    
        var vertices = this.geometry.attributes.position.array;
    
        vertices[  0 ] = max.x; vertices[  1 ] = max.y; vertices[  2 ] = max.z;
        vertices[  3 ] = min.x; vertices[  4 ] = max.y; vertices[  5 ] = max.z;
    
        vertices[  6 ] = min.x; vertices[  7 ] = max.y; vertices[  8 ] = max.z;
        vertices[  9 ] = min.x; vertices[ 10 ] = min.y; vertices[ 11 ] = max.z;
    
        vertices[ 12 ] = min.x; vertices[ 13 ] = min.y; vertices[ 14 ] = max.z;
        vertices[ 15 ] = max.x; vertices[ 16 ] = min.y; vertices[ 17 ] = max.z;
    
        vertices[ 18 ] = max.x; vertices[ 19 ] = min.y; vertices[ 20 ] = max.z;
        vertices[ 21 ] = max.x; vertices[ 22 ] = max.y; vertices[ 23 ] = max.z;
    
        //
    
        vertices[ 24 ] = max.x; vertices[ 25 ] = max.y; vertices[ 26 ] = min.z;
        vertices[ 27 ] = min.x; vertices[ 28 ] = max.y; vertices[ 29 ] = min.z;
    
        vertices[ 30 ] = min.x; vertices[ 31 ] = max.y; vertices[ 32 ] = min.z;
        vertices[ 33 ] = min.x; vertices[ 34 ] = min.y; vertices[ 35 ] = min.z;
    
        vertices[ 36 ] = min.x; vertices[ 37 ] = min.y; vertices[ 38 ] = min.z;
        vertices[ 39 ] = max.x; vertices[ 40 ] = min.y; vertices[ 41 ] = min.z;
    
        vertices[ 42 ] = max.x; vertices[ 43 ] = min.y; vertices[ 44 ] = min.z;
        vertices[ 45 ] = max.x; vertices[ 46 ] = max.y; vertices[ 47 ] = min.z;
    
        //
    
        vertices[ 48 ] = max.x; vertices[ 49 ] = max.y; vertices[ 50 ] = max.z;
        vertices[ 51 ] = max.x; vertices[ 52 ] = max.y; vertices[ 53 ] = min.z;
    
        vertices[ 54 ] = min.x; vertices[ 55 ] = max.y; vertices[ 56 ] = max.z;
        vertices[ 57 ] = min.x; vertices[ 58 ] = max.y; vertices[ 59 ] = min.z;
    
        vertices[ 60 ] = min.x; vertices[ 61 ] = min.y; vertices[ 62 ] = max.z;
        vertices[ 63 ] = min.x; vertices[ 64 ] = min.y; vertices[ 65 ] = min.z;
    
        vertices[ 66 ] = max.x; vertices[ 67 ] = min.y; vertices[ 68 ] = max.z;
        vertices[ 69 ] = max.x; vertices[ 70 ] = min.y; vertices[ 71 ] = min.z;
    
        this.geometry.attributes.position.needsUpdate = true;
    
        this.geometry.computeBoundingSphere();
    
        this.matrix = object.matrixWorld;
        this.matrixAutoUpdate = false;
    
    };
    
    // File:src/extras/helpers/BoundingBoxHelper.js
    
    /**
     * @author WestLangley / http://github.com/WestLangley
     */
    
    // a helper to show the world-axis-aligned bounding box for an object
    
    THREE.BoundingBoxHelper = function ( object, hex ) {
    
        var color = ( hex !== undefined ) ? hex : 0x888888;
    
        this.object = object;
    
        this.box = new THREE.Box3();
    
        THREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );
    
    };
    
    THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );
    
    THREE.BoundingBoxHelper.prototype.update = function () {
    
        this.box.setFromObject( this.object );
    
        this.box.size( this.scale );
    
        this.box.center( this.position );
    
    };
    
    // File:src/extras/helpers/CameraHelper.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     *
     *	- shows frustum, line of sight and up of the camera
     *	- suitable for fast updates
     * 	- based on frustum visualization in lightgl.js shadowmap example
     *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
     */
    
    THREE.CameraHelper = function ( camera ) {
    
        var geometry = new THREE.Geometry();
        var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );
    
        var pointMap = {};
    
        // colors
    
        var hexFrustum = 0xffaa00;
        var hexCone = 0xff0000;
        var hexUp = 0x00aaff;
        var hexTarget = 0xffffff;
        var hexCross = 0x333333;
    
        // near
    
        addLine( "n1", "n2", hexFrustum );
        addLine( "n2", "n4", hexFrustum );
        addLine( "n4", "n3", hexFrustum );
        addLine( "n3", "n1", hexFrustum );
    
        // far
    
        addLine( "f1", "f2", hexFrustum );
        addLine( "f2", "f4", hexFrustum );
        addLine( "f4", "f3", hexFrustum );
        addLine( "f3", "f1", hexFrustum );
    
        // sides
    
        addLine( "n1", "f1", hexFrustum );
        addLine( "n2", "f2", hexFrustum );
        addLine( "n3", "f3", hexFrustum );
        addLine( "n4", "f4", hexFrustum );
    
        // cone
    
        addLine( "p", "n1", hexCone );
        addLine( "p", "n2", hexCone );
        addLine( "p", "n3", hexCone );
        addLine( "p", "n4", hexCone );
    
        // up
    
        addLine( "u1", "u2", hexUp );
        addLine( "u2", "u3", hexUp );
        addLine( "u3", "u1", hexUp );
    
        // target
    
        addLine( "c", "t", hexTarget );
        addLine( "p", "c", hexCross );
    
        // cross
    
        addLine( "cn1", "cn2", hexCross );
        addLine( "cn3", "cn4", hexCross );
    
        addLine( "cf1", "cf2", hexCross );
        addLine( "cf3", "cf4", hexCross );
    
        function addLine( a, b, hex ) {
    
            addPoint( a, hex );
            addPoint( b, hex );
    
        }
    
        function addPoint( id, hex ) {
    
            geometry.vertices.push( new THREE.Vector3() );
            geometry.colors.push( new THREE.Color( hex ) );
    
            if ( pointMap[ id ] === undefined ) {
    
                pointMap[ id ] = [];
    
            }
    
            pointMap[ id ].push( geometry.vertices.length - 1 );
    
        }
    
        THREE.Line.call( this, geometry, material, THREE.LinePieces );
    
        this.camera = camera;
        this.matrix = camera.matrixWorld;
        this.matrixAutoUpdate = false;
    
        this.pointMap = pointMap;
    
        this.update();
    
    };
    
    THREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );
    
    THREE.CameraHelper.prototype.update = function () {
    
        var geometry, pointMap;
        
        var vector = new THREE.Vector3();
        var camera = new THREE.Camera();
    
        var setPoint = function ( point, x, y, z ) {
    
            vector.set( x, y, z ).unproject( camera );
    
            var points = pointMap[ point ];
    
            if ( points !== undefined ) {
    
                for ( var i = 0, il = points.length; i < il; i ++ ) {
    
                    geometry.vertices[ points[ i ] ].copy( vector );
    
                }
    
            }
    
        };
    
        return function () {
    
            geometry = this.geometry;
            pointMap = this.pointMap;
    
            var w = 1, h = 1;
    
            // we need just camera projection matrix
            // world matrix must be identity
    
            camera.projectionMatrix.copy( this.camera.projectionMatrix );
    
            // center / target
    
            setPoint( "c", 0, 0, - 1 );
            setPoint( "t", 0, 0,  1 );
    
            // near
    
            setPoint( "n1", - w, - h, - 1 );
            setPoint( "n2",   w, - h, - 1 );
            setPoint( "n3", - w,   h, - 1 );
            setPoint( "n4",   w,   h, - 1 );
    
            // far
    
            setPoint( "f1", - w, - h, 1 );
            setPoint( "f2",   w, - h, 1 );
            setPoint( "f3", - w,   h, 1 );
            setPoint( "f4",   w,   h, 1 );
    
            // up
    
            setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
            setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
            setPoint( "u3",         0, h * 2,   - 1 );
    
            // cross
    
            setPoint( "cf1", - w,   0, 1 );
            setPoint( "cf2",   w,   0, 1 );
            setPoint( "cf3",   0, - h, 1 );
            setPoint( "cf4",   0,   h, 1 );
    
            setPoint( "cn1", - w,   0, - 1 );
            setPoint( "cn2",   w,   0, - 1 );
            setPoint( "cn3",   0, - h, - 1 );
            setPoint( "cn4",   0,   h, - 1 );
    
            geometry.verticesNeedUpdate = true;
    
        };
    
    }();
    
    // File:src/extras/helpers/DirectionalLightHelper.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     * @author WestLangley / http://github.com/WestLangley
     */
    
    THREE.DirectionalLightHelper = function ( light, size ) {
    
        THREE.Object3D.call( this );
    
        this.light = light;
        this.light.updateMatrixWorld();
    
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
    
        size = size || 1;
    
        var geometry = new THREE.Geometry();
        geometry.vertices.push(
            new THREE.Vector3( - size,   size, 0 ),
            new THREE.Vector3(   size,   size, 0 ),
            new THREE.Vector3(   size, - size, 0 ),
            new THREE.Vector3( - size, - size, 0 ),
            new THREE.Vector3( - size,   size, 0 )
        );
    
        var material = new THREE.LineBasicMaterial( { fog: false } );
        material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
    
        this.lightPlane = new THREE.Line( geometry, material );
        this.add( this.lightPlane );
    
        geometry = new THREE.Geometry();
        geometry.vertices.push(
            new THREE.Vector3(),
            new THREE.Vector3()
        );
    
        material = new THREE.LineBasicMaterial( { fog: false } );
        material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
    
        this.targetLine = new THREE.Line( geometry, material );
        this.add( this.targetLine );
    
        this.update();
    
    };
    
    THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.DirectionalLightHelper.prototype.dispose = function () {
    
        this.lightPlane.geometry.dispose();
        this.lightPlane.material.dispose();
        this.targetLine.geometry.dispose();
        this.targetLine.material.dispose();
    };
    
    THREE.DirectionalLightHelper.prototype.update = function () {
    
        var v1 = new THREE.Vector3();
        var v2 = new THREE.Vector3();
        var v3 = new THREE.Vector3();
    
        return function () {
    
            v1.setFromMatrixPosition( this.light.matrixWorld );
            v2.setFromMatrixPosition( this.light.target.matrixWorld );
            v3.subVectors( v2, v1 );
    
            this.lightPlane.lookAt( v3 );
            this.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
    
            this.targetLine.geometry.vertices[ 1 ].copy( v3 );
            this.targetLine.geometry.verticesNeedUpdate = true;
            this.targetLine.material.color.copy( this.lightPlane.material.color );
    
        };
    
    }();
    
    // File:src/extras/helpers/EdgesHelper.js
    
    /**
     * @author WestLangley / http://github.com/WestLangley
     */
    
    THREE.EdgesHelper = function ( object, hex ) {
    
        var color = ( hex !== undefined ) ? hex : 0xffffff;
    
        var edge = [ 0, 0 ], hash = {};
        var sortFunction = function ( a, b ) { return a - b };
    
        var keys = [ 'a', 'b', 'c' ];
        var geometry = new THREE.BufferGeometry();
    
        var geometry2 = object.geometry.clone();
    
        geometry2.mergeVertices();
        geometry2.computeFaceNormals();
    
        var vertices = geometry2.vertices;
        var faces = geometry2.faces;
        var numEdges = 0;
    
        for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
            var face = faces[ i ];
    
            for ( var j = 0; j < 3; j ++ ) {
    
                edge[ 0 ] = face[ keys[ j ] ];
                edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
                edge.sort( sortFunction );
    
                var key = edge.toString();
    
                if ( hash[ key ] === undefined ) {
    
                    hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };
                    numEdges ++;
    
                } else {
    
                    hash[ key ].face2 = i;
    
                }
    
            }
    
        }
    
        var coords = new Float32Array( numEdges * 2 * 3 );
    
        var index = 0;
    
        for ( var key in hash ) {
    
            var h = hash[ key ];
    
            if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) < 0.9999 ) { // hardwired const OK
    
                var vertex = vertices[ h.vert1 ];
                coords[ index ++ ] = vertex.x;
                coords[ index ++ ] = vertex.y;
                coords[ index ++ ] = vertex.z;
    
                vertex = vertices[ h.vert2 ];
                coords[ index ++ ] = vertex.x;
                coords[ index ++ ] = vertex.y;
                coords[ index ++ ] = vertex.z;
    
            }
    
        }
    
        geometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );
    
        THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );
    
        this.matrix = object.matrixWorld;
        this.matrixAutoUpdate = false;
    
    };
    
    THREE.EdgesHelper.prototype = Object.create( THREE.Line.prototype );
    
    // File:src/extras/helpers/FaceNormalsHelper.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author WestLangley / http://github.com/WestLangley
    */
    
    THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {
    
        this.object = object;
    
        this.size = ( size !== undefined ) ? size : 1;
    
        var color = ( hex !== undefined ) ? hex : 0xffff00;
    
        var width = ( linewidth !== undefined ) ? linewidth : 1;
    
        var geometry = new THREE.Geometry();
    
        var faces = this.object.geometry.faces;
    
        for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
            geometry.vertices.push( new THREE.Vector3(), new THREE.Vector3() );
    
        }
    
        THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );
    
        this.matrixAutoUpdate = false;
    
        this.normalMatrix = new THREE.Matrix3();
    
        this.update();
    
    };
    
    THREE.FaceNormalsHelper.prototype = Object.create( THREE.Line.prototype );
    
    THREE.FaceNormalsHelper.prototype.update = function () {
    
        var vertices = this.geometry.vertices;
    
        var object = this.object;
        var objectVertices = object.geometry.vertices;
        var objectFaces = object.geometry.faces;
        var objectWorldMatrix = object.matrixWorld;
    
        object.updateMatrixWorld( true );
    
        this.normalMatrix.getNormalMatrix( objectWorldMatrix );
    
        for ( var i = 0, i2 = 0, l = objectFaces.length; i < l; i ++, i2 += 2 ) {
    
            var face = objectFaces[ i ];
    
            vertices[ i2 ].copy( objectVertices[ face.a ] )
                .add( objectVertices[ face.b ] )
                .add( objectVertices[ face.c ] )
                .divideScalar( 3 )
                .applyMatrix4( objectWorldMatrix );
    
            vertices[ i2 + 1 ].copy( face.normal )
                .applyMatrix3( this.normalMatrix )
                .normalize()
                .multiplyScalar( this.size )
                .add( vertices[ i2 ] );
    
        }
    
        this.geometry.verticesNeedUpdate = true;
    
        return this;
    
    };
    
    
    // File:src/extras/helpers/GridHelper.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.GridHelper = function ( size, step ) {
    
        var geometry = new THREE.Geometry();
        var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );
    
        this.color1 = new THREE.Color( 0x444444 );
        this.color2 = new THREE.Color( 0x888888 );
    
        for ( var i = - size; i <= size; i += step ) {
    
            geometry.vertices.push(
                new THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),
                new THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )
            );
    
            var color = i === 0 ? this.color1 : this.color2;
    
            geometry.colors.push( color, color, color, color );
    
        }
    
        THREE.Line.call( this, geometry, material, THREE.LinePieces );
    
    };
    
    THREE.GridHelper.prototype = Object.create( THREE.Line.prototype );
    
    THREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {
    
        this.color1.set( colorCenterLine );
        this.color2.set( colorGrid );
    
        this.geometry.colorsNeedUpdate = true;
    
    }
    
    // File:src/extras/helpers/HemisphereLightHelper.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {
    
        THREE.Object3D.call( this );
    
        this.light = light;
        this.light.updateMatrixWorld();
    
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
    
        this.colors = [ new THREE.Color(), new THREE.Color() ];
    
        var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
        geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );
    
        for ( var i = 0, il = 8; i < il; i ++ ) {
    
            geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];
    
        }
    
        var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );
    
        this.lightSphere = new THREE.Mesh( geometry, material );
        this.add( this.lightSphere );
    
        this.update();
    
    };
    
    THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.HemisphereLightHelper.prototype.dispose = function () {
        this.lightSphere.geometry.dispose();
        this.lightSphere.material.dispose();
    };
    
    THREE.HemisphereLightHelper.prototype.update = function () {
    
        var vector = new THREE.Vector3();
    
        return function () {
    
            this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
            this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );
    
            this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
            this.lightSphere.geometry.colorsNeedUpdate = true;
    
        }
    
    }();
    
    // File:src/extras/helpers/PointLightHelper.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.PointLightHelper = function ( light, sphereSize ) {
    
        this.light = light;
        this.light.updateMatrixWorld();
    
        var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
        var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
        material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
    
        THREE.Mesh.call( this, geometry, material );
    
        this.matrix = this.light.matrixWorld;
        this.matrixAutoUpdate = false;
    
        /*
        var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
        var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
    
        this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
        this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
    
        var d = light.distance;
    
        if ( d === 0.0 ) {
    
            this.lightDistance.visible = false;
    
        } else {
    
            this.lightDistance.scale.set( d, d, d );
    
        }
    
        this.add( this.lightDistance );
        */
    
    };
    
    THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );
    
    THREE.PointLightHelper.prototype.dispose = function () {
    
        this.geometry.dispose();
        this.material.dispose();
    };
    
    THREE.PointLightHelper.prototype.update = function () {
    
        this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
    
        /*
        var d = this.light.distance;
    
        if ( d === 0.0 ) {
    
            this.lightDistance.visible = false;
    
        } else {
    
            this.lightDistance.visible = true;
            this.lightDistance.scale.set( d, d, d );
    
        }
        */
    
    };
    
    // File:src/extras/helpers/SkeletonHelper.js
    
    /**
     * @author Sean Griffin / http://twitter.com/sgrif
     * @author Michael Guerrero / http://realitymeltdown.com
     * @author mrdoob / http://mrdoob.com/
     * @author ikerr / http://verold.com
     */
    
    THREE.SkeletonHelper = function ( object ) {
    
        this.bones = this.getBoneList( object );
    
        var geometry = new THREE.Geometry();
    
        for ( var i = 0; i < this.bones.length; i ++ ) {
    
            var bone = this.bones[ i ];
    
            if ( bone.parent instanceof THREE.Bone ) {
    
                geometry.vertices.push( new THREE.Vector3() );
                geometry.vertices.push( new THREE.Vector3() );
                geometry.colors.push( new THREE.Color( 0, 0, 1 ) );
                geometry.colors.push( new THREE.Color( 0, 1, 0 ) );
    
            }
    
        }
    
        var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );
    
        THREE.Line.call( this, geometry, material, THREE.LinePieces );
    
        this.root = object;
    
        this.matrix = object.matrixWorld;
        this.matrixAutoUpdate = false;
    
        this.update();
    
    };
    
    
    THREE.SkeletonHelper.prototype = Object.create( THREE.Line.prototype );
    
    THREE.SkeletonHelper.prototype.getBoneList = function( object ) {
    
        var boneList = [];
    
        if ( object instanceof THREE.Bone ) {
    
            boneList.push( object );
    
        }
    
        for ( var i = 0; i < object.children.length; i ++ ) {
    
            boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );
    
        }
    
        return boneList;
    
    };
    
    THREE.SkeletonHelper.prototype.update = function () {
    
        var geometry = this.geometry;
    
        var matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );
    
        var boneMatrix = new THREE.Matrix4();
    
        var j = 0;
    
        for ( var i = 0; i < this.bones.length; i ++ ) {
    
            var bone = this.bones[ i ];
    
            if ( bone.parent instanceof THREE.Bone ) {
    
                boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
                geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );
    
                boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
                geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );
    
                j += 2;
    
            }
    
        }
    
        geometry.verticesNeedUpdate = true;
    
        geometry.computeBoundingSphere();
    
    };
    
    // File:src/extras/helpers/SpotLightHelper.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     * @author mrdoob / http://mrdoob.com/
     * @author WestLangley / http://github.com/WestLangley
    */
    
    THREE.SpotLightHelper = function ( light ) {
    
        THREE.Object3D.call( this );
    
        this.light = light;
        this.light.updateMatrixWorld();
    
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
    
        var geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );
    
        geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, - 0.5, 0 ) );
        geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );
    
        var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
    
        this.cone = new THREE.Mesh( geometry, material );
        this.add( this.cone );
    
        this.update();
    
    };
    
    THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );
    
    THREE.SpotLightHelper.prototype.dispose = function () {
        this.cone.geometry.dispose();
        this.cone.material.dispose();
    };
    
    THREE.SpotLightHelper.prototype.update = function () {
    
        var vector = new THREE.Vector3();
        var vector2 = new THREE.Vector3();
    
        return function () {
    
            var coneLength = this.light.distance ? this.light.distance : 10000;
            var coneWidth = coneLength * Math.tan( this.light.angle );
    
            this.cone.scale.set( coneWidth, coneWidth, coneLength );
    
            vector.setFromMatrixPosition( this.light.matrixWorld );
            vector2.setFromMatrixPosition( this.light.target.matrixWorld );
    
            this.cone.lookAt( vector2.sub( vector ) );
    
            this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
    
        };
    
    }();
    
    // File:src/extras/helpers/VertexNormalsHelper.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author WestLangley / http://github.com/WestLangley
    */
    
    THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {
    
        this.object = object;
    
        this.size = ( size !== undefined ) ? size : 1;
    
        var color = ( hex !== undefined ) ? hex : 0xff0000;
    
        var width = ( linewidth !== undefined ) ? linewidth : 1;
    
        var geometry = new THREE.Geometry();
    
        var vertices = object.geometry.vertices;
    
        var faces = object.geometry.faces;
    
        for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
            var face = faces[ i ];
    
            for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
    
                geometry.vertices.push( new THREE.Vector3(), new THREE.Vector3() );
    
            }
    
        }
    
        THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );
    
        this.matrixAutoUpdate = false;
    
        this.normalMatrix = new THREE.Matrix3();
    
        this.update();
    
    };
    
    THREE.VertexNormalsHelper.prototype = Object.create( THREE.Line.prototype );
    
    THREE.VertexNormalsHelper.prototype.update = ( function ( object ) {
    
        var v1 = new THREE.Vector3();
    
        return function( object ) {
    
            var keys = [ 'a', 'b', 'c', 'd' ];
    
            this.object.updateMatrixWorld( true );
    
            this.normalMatrix.getNormalMatrix( this.object.matrixWorld );
    
            var vertices = this.geometry.vertices;
    
            var verts = this.object.geometry.vertices;
    
            var faces = this.object.geometry.faces;
    
            var worldMatrix = this.object.matrixWorld;
    
            var idx = 0;
    
            for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
                var face = faces[ i ];
    
                for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
    
                    var vertexId = face[ keys[ j ] ];
                    var vertex = verts[ vertexId ];
    
                    var normal = face.vertexNormals[ j ];
    
                    vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );
    
                    v1.copy( normal ).applyMatrix3( this.normalMatrix ).normalize().multiplyScalar( this.size );
    
                    v1.add( vertices[ idx ] );
                    idx = idx + 1;
    
                    vertices[ idx ].copy( v1 );
                    idx = idx + 1;
    
                }
    
            }
    
            this.geometry.verticesNeedUpdate = true;
    
            return this;
    
        }
    
    }());
    
    // File:src/extras/helpers/VertexTangentsHelper.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     * @author WestLangley / http://github.com/WestLangley
    */
    
    THREE.VertexTangentsHelper = function ( object, size, hex, linewidth ) {
    
        this.object = object;
    
        this.size = ( size !== undefined ) ? size : 1;
    
        var color = ( hex !== undefined ) ? hex : 0x0000ff;
    
        var width = ( linewidth !== undefined ) ? linewidth : 1;
    
        var geometry = new THREE.Geometry();
    
        var vertices = object.geometry.vertices;
    
        var faces = object.geometry.faces;
    
        for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
            var face = faces[ i ];
    
            for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {
    
                geometry.vertices.push( new THREE.Vector3() );
                geometry.vertices.push( new THREE.Vector3() );
    
            }
    
        }
    
        THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );
    
        this.matrixAutoUpdate = false;
    
        this.update();
    
    };
    
    THREE.VertexTangentsHelper.prototype = Object.create( THREE.Line.prototype );
    
    THREE.VertexTangentsHelper.prototype.update = ( function ( object ) {
    
        var v1 = new THREE.Vector3();
    
        return function( object ) {
    
            var keys = [ 'a', 'b', 'c', 'd' ];
    
            this.object.updateMatrixWorld( true );
    
            var vertices = this.geometry.vertices;
    
            var verts = this.object.geometry.vertices;
    
            var faces = this.object.geometry.faces;
    
            var worldMatrix = this.object.matrixWorld;
    
            var idx = 0;
    
            for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
                var face = faces[ i ];
    
                for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {
    
                    var vertexId = face[ keys[ j ] ];
                    var vertex = verts[ vertexId ];
    
                    var tangent = face.vertexTangents[ j ];
    
                    vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );
    
                    v1.copy( tangent ).transformDirection( worldMatrix ).multiplyScalar( this.size );
    
                    v1.add( vertices[ idx ] );
                    idx = idx + 1;
    
                    vertices[ idx ].copy( v1 );
                    idx = idx + 1;
    
                }
    
            }
    
            this.geometry.verticesNeedUpdate = true;
    
            return this;
    
        }
    
    }());
    
    // File:src/extras/helpers/WireframeHelper.js
    
    /**
     * @author mrdoob / http://mrdoob.com/
     */
    
    THREE.WireframeHelper = function ( object, hex ) {
    
        var color = ( hex !== undefined ) ? hex : 0xffffff;
    
        var edge = [ 0, 0 ], hash = {};
        var sortFunction = function ( a, b ) { return a - b };
    
        var keys = [ 'a', 'b', 'c' ];
        var geometry = new THREE.BufferGeometry();
    
        if ( object.geometry instanceof THREE.Geometry ) {
    
            var vertices = object.geometry.vertices;
            var faces = object.geometry.faces;
            var numEdges = 0;
    
            // allocate maximal size
            var edges = new Uint32Array( 6 * faces.length );
    
            for ( var i = 0, l = faces.length; i < l; i ++ ) {
    
                var face = faces[ i ];
    
                for ( var j = 0; j < 3; j ++ ) {
    
                    edge[ 0 ] = face[ keys[ j ] ];
                    edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
                    edge.sort( sortFunction );
    
                    var key = edge.toString();
    
                    if ( hash[ key ] === undefined ) {
    
                        edges[ 2 * numEdges ] = edge[ 0 ];
                        edges[ 2 * numEdges + 1 ] = edge[ 1 ];
                        hash[ key ] = true;
                        numEdges ++;
    
                    }
    
                }
    
            }
    
            var coords = new Float32Array( numEdges * 2 * 3 );
    
            for ( var i = 0, l = numEdges; i < l; i ++ ) {
    
                for ( var j = 0; j < 2; j ++ ) {
    
                    var vertex = vertices[ edges [ 2 * i + j] ];
    
                    var index = 6 * i + 3 * j;
                    coords[ index + 0 ] = vertex.x;
                    coords[ index + 1 ] = vertex.y;
                    coords[ index + 2 ] = vertex.z;
    
                }
    
            }
    
            geometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );
    
        } else if ( object.geometry instanceof THREE.BufferGeometry ) {
    
            if ( object.geometry.attributes.index !== undefined ) { // Indexed BufferGeometry
    
                var vertices = object.geometry.attributes.position.array;
                var indices = object.geometry.attributes.index.array;
                var drawcalls = object.geometry.drawcalls;
                var numEdges = 0;
    
                if ( drawcalls.length === 0 ) {
    
                    drawcalls = [ { count : indices.length, index : 0, start : 0 } ];
    
                }
    
                // allocate maximal size
                var edges = new Uint32Array( 2 * indices.length );
    
                for ( var o = 0, ol = drawcalls.length; o < ol; ++ o ) {
    
                    var start = drawcalls[ o ].start;
                    var count = drawcalls[ o ].count;
                    var index = drawcalls[ o ].index;
    
                    for ( var i = start, il = start + count; i < il; i += 3 ) {
    
                        for ( var j = 0; j < 3; j ++ ) {
    
                            edge[ 0 ] = index + indices[ i + j ];
                            edge[ 1 ] = index + indices[ i + ( j + 1 ) % 3 ];
                            edge.sort( sortFunction );
    
                            var key = edge.toString();
    
                            if ( hash[ key ] === undefined ) {
    
                                edges[ 2 * numEdges ] = edge[ 0 ];
                                edges[ 2 * numEdges + 1 ] = edge[ 1 ];
                                hash[ key ] = true;
                                numEdges ++;
    
                            }
    
                        }
    
                    }
    
                }
    
                var coords = new Float32Array( numEdges * 2 * 3 );
    
                for ( var i = 0, l = numEdges; i < l; i ++ ) {
    
                    for ( var j = 0; j < 2; j ++ ) {
    
                        var index = 6 * i + 3 * j;
                        var index2 = 3 * edges[ 2 * i + j];
                        coords[ index + 0 ] = vertices[ index2 ];
                        coords[ index + 1 ] = vertices[ index2 + 1 ];
                        coords[ index + 2 ] = vertices[ index2 + 2 ];
    
                    }
    
                }
    
                geometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );
    
            } else { // non-indexed BufferGeometry
    
                var vertices = object.geometry.attributes.position.array;
                var numEdges = vertices.length / 3;
                var numTris = numEdges / 3;
    
                var coords = new Float32Array( numEdges * 2 * 3 );
    
                for ( var i = 0, l = numTris; i < l; i ++ ) {
    
                    for ( var j = 0; j < 3; j ++ ) {
    
                        var index = 18 * i + 6 * j;
    
                        var index1 = 9 * i + 3 * j;
                        coords[ index + 0 ] = vertices[ index1 ];
                        coords[ index + 1 ] = vertices[ index1 + 1 ];
                        coords[ index + 2 ] = vertices[ index1 + 2 ];
    
                        var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
                        coords[ index + 3 ] = vertices[ index2 ];
                        coords[ index + 4 ] = vertices[ index2 + 1 ];
                        coords[ index + 5 ] = vertices[ index2 + 2 ];
    
                    }
    
                }
    
                geometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );
    
            }
    
        }
    
        THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );
    
        this.matrix = object.matrixWorld;
        this.matrixAutoUpdate = false;
    
    };
    
    THREE.WireframeHelper.prototype = Object.create( THREE.Line.prototype );
    
    // File:src/extras/objects/ImmediateRenderObject.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.ImmediateRenderObject = function () {
    
        THREE.Object3D.call( this );
    
        this.render = function ( renderCallback ) {};
    
    };
    
    THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );
    
    // File:src/extras/objects/MorphBlendMesh.js
    
    /**
     * @author alteredq / http://alteredqualia.com/
     */
    
    THREE.MorphBlendMesh = function( geometry, material ) {
    
        THREE.Mesh.call( this, geometry, material );
    
        this.animationsMap = {};
        this.animationsList = [];
    
        // prepare default animation
        // (all frames played together in 1 second)
    
        var numFrames = this.geometry.morphTargets.length;
    
        var name = "__default";
    
        var startFrame = 0;
        var endFrame = numFrames - 1;
    
        var fps = numFrames / 1;
    
        this.createAnimation( name, startFrame, endFrame, fps );
        this.setAnimationWeight( name, 1 );
    
    };
    
    THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );
    
    THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {
    
        var animation = {
    
            startFrame: start,
            endFrame: end,
    
            length: end - start + 1,
    
            fps: fps,
            duration: ( end - start ) / fps,
    
            lastFrame: 0,
            currentFrame: 0,
    
            active: false,
    
            time: 0,
            direction: 1,
            weight: 1,
    
            directionBackwards: false,
            mirroredLoop: false
    
        };
    
        this.animationsMap[ name ] = animation;
        this.animationsList.push( animation );
    
    };
    
    THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {
    
        var pattern = /([a-z]+)_?(\d+)/;
    
        var firstAnimation, frameRanges = {};
    
        var geometry = this.geometry;
    
        for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {
    
            var morph = geometry.morphTargets[ i ];
            var chunks = morph.name.match( pattern );
    
            if ( chunks && chunks.length > 1 ) {
    
                var name = chunks[ 1 ];
                var num = chunks[ 2 ];
    
                if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };
    
                var range = frameRanges[ name ];
    
                if ( i < range.start ) range.start = i;
                if ( i > range.end ) range.end = i;
    
                if ( ! firstAnimation ) firstAnimation = name;
    
            }
    
        }
    
        for ( var name in frameRanges ) {
    
            var range = frameRanges[ name ];
            this.createAnimation( name, range.start, range.end, fps );
    
        }
    
        this.firstAnimation = firstAnimation;
    
    };
    
    THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            animation.direction = 1;
            animation.directionBackwards = false;
    
        }
    
    };
    
    THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            animation.direction = - 1;
            animation.directionBackwards = true;
    
        }
    
    };
    
    THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            animation.fps = fps;
            animation.duration = ( animation.end - animation.start ) / animation.fps;
    
        }
    
    };
    
    THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            animation.duration = duration;
            animation.fps = ( animation.end - animation.start ) / animation.duration;
    
        }
    
    };
    
    THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            animation.weight = weight;
    
        }
    
    };
    
    THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            animation.time = time;
    
        }
    
    };
    
    THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {
    
        var time = 0;
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            time = animation.time;
    
        }
    
        return time;
    
    };
    
    THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {
    
        var duration = - 1;
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            duration = animation.duration;
    
        }
    
        return duration;
    
    };
    
    THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            animation.time = 0;
            animation.active = true;
    
        } else {
    
            console.warn( "animation[" + name + "] undefined" );
    
        }
    
    };
    
    THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {
    
        var animation = this.animationsMap[ name ];
    
        if ( animation ) {
    
            animation.active = false;
    
        }
    
    };
    
    THREE.MorphBlendMesh.prototype.update = function ( delta ) {
    
        for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {
    
            var animation = this.animationsList[ i ];
    
            if ( ! animation.active ) continue;
    
            var frameTime = animation.duration / animation.length;
    
            animation.time += animation.direction * delta;
    
            if ( animation.mirroredLoop ) {
    
                if ( animation.time > animation.duration || animation.time < 0 ) {
    
                    animation.direction *= - 1;
    
                    if ( animation.time > animation.duration ) {
    
                        animation.time = animation.duration;
                        animation.directionBackwards = true;
    
                    }
    
                    if ( animation.time < 0 ) {
    
                        animation.time = 0;
                        animation.directionBackwards = false;
    
                    }
    
                }
    
            } else {
    
                animation.time = animation.time % animation.duration;
    
                if ( animation.time < 0 ) animation.time += animation.duration;
    
            }
    
            var keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
            var weight = animation.weight;
    
            if ( keyframe !== animation.currentFrame ) {
    
                this.morphTargetInfluences[ animation.lastFrame ] = 0;
                this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;
    
                this.morphTargetInfluences[ keyframe ] = 0;
    
                animation.lastFrame = animation.currentFrame;
                animation.currentFrame = keyframe;
    
            }
    
            var mix = ( animation.time % frameTime ) / frameTime;
    
            if ( animation.directionBackwards ) mix = 1 - mix;
    
            this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
            this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;
    
        }
    
    };
    
    
    // Export the THREE object for **Node.js**, with
    // backwards-compatibility for the old `require()` API. If we're in
    // the browser, add `_` as a global object via a string identifier,
    // for Closure Compiler "advanced" mode.
    if (typeof exports !== 'undefined') {
      if (typeof module !== 'undefined' && module.exports) {
        exports = module.exports = THREE;
      }
      exports.THREE = THREE;
    } else {
      this['THREE'] = THREE;
    }
    
    },{}],3:[function(require,module,exports){
    (function (global){
    var ThreeMain = require('./three/three_main.js');
    var Model = require('./model/model.js');
    var Floorplanner = require('./floorplanner/floorplanner');
    
    global.Blueprint3d = function(opts) {
      // opts.threeElement
      // opts.floorplannerElement
      // opts.textureDir
      
      this.model = new Model(opts.textureDir);
      this.three = new ThreeMain(this.model, opts.threeElement, opts.threeCanvasElement, {});
      if (!opts.widget) {
        this.floorplanner = new Floorplanner(opts.floorplannerElement, this.model.floorplan);    
      } else {
        this.three.getController().enabled = false;
      }
    }
    
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./floorplanner/floorplanner":4,"./model/model.js":16,"./three/three_main.js":27}],4:[function(require,module,exports){
    var $ = require('jquery');
    
    var FloorplannerView = require('./floorplanner_view')
    
    var utils = require('../utils/utils')
    
    var Floorplanner = function(canvas, floorplan) {
    
      var scope = this;
      var floorplan = floorplan;
    
      this.modes = {
        MOVE: 0,
        DRAW: 1,
        DELETE: 2
      };
      this.mode = 0;
      var mouseDown = false;
      var mouseMoved = false;
      this.activeWall = null;
      this.activeCorner = null;
    
      this.originX = 0;
      this.originY = 0;
    
      // how much will we move a corner to make a wall axis aligned (cm)
      var snapTolerance = 25;
    
      // these are in threeJS coords
      var mouseX = 0;
      var mouseY = 0;
      var rawMouseX = 0;
      var rawMouseY = 0;
    
      // mouse position at last click
      var lastX = 0;
      var lastY = 0;
    
      // drawing state
      this.targetX = 0;
      this.targetY = 0;
      this.lastNode = null;
    
      this.modeResetCallbacks = $.Callbacks();
    
      var canvasElement = $("#"+canvas);
    
      var view = new FloorplannerView(floorplan, this, canvas);
    
      var cmPerFoot = 30.48;
      var pixelsPerFoot = 15.0;
      var cmPerPixel = cmPerFoot * (1.0 / pixelsPerFoot);
      var pixelsPerCm = 1.0 / cmPerPixel;
      this.wallWidth = 10.0 * pixelsPerCm;
    
      function init() {
        scope.setMode(scope.modes.MOVE);
        canvasElement.mousedown(mousedown);
        canvasElement.mousemove(mousemove);
        canvasElement.mouseup(mouseup);
        canvasElement.mouseleave(mouseleave);
        $(document).keyup(function(e) {
          if (e.keyCode == 27) { 
            escapeKey();
          }
        });
        floorplan.roomLoadedCallbacks.add(scope.reset);
      }
    
      function escapeKey() {
        scope.setMode(scope.modes.MOVE);
      }
    
      function updateTarget() {
        if (scope.mode == scope.modes.DRAW && scope.lastNode) { 
          if (Math.abs(mouseX - scope.lastNode.x) < snapTolerance) {
            scope.targetX = scope.lastNode.x;
          } else {
            scope.targetX = mouseX;
          }
          if (Math.abs(mouseY - scope.lastNode.y) < snapTolerance) {
            scope.targetY = scope.lastNode.y;
          } else {
            scope.targetY = mouseY;
          }
        } else {
          scope.targetX = mouseX;
          scope.targetY = mouseY;      
        }
    
        view.draw();
      }
    
      function mousedown() {
        mouseDown = true;
        mouseMoved = false;
        lastX = rawMouseX;
        lastY = rawMouseY;
    
        // delete
        if (scope.mode == scope.modes.DELETE) {
          if (scope.activeCorner) {
            scope.activeCorner.removeAll();
          } else if (scope.activeWall) {
            scope.activeWall.remove();
          } else {
            scope.setMode(scope.modes.MOVE);
          }
        }
      }
    
      function mousemove(event) {
        mouseMoved = true;
    
        // update mouse
        rawMouseX = event.clientX;
        rawMouseY = event.clientY;
    
        mouseX = (event.clientX - canvasElement.offset().left) * cmPerPixel + scope.originX * cmPerPixel;
        mouseY = (event.clientY - canvasElement.offset().top) * cmPerPixel + scope.originY * cmPerPixel;
    
        // update target (snapped position of actual mouse)
        if (scope.mode == scope.modes.DRAW || (scope.mode == scope.modes.MOVE && mouseDown)) {
          updateTarget();
        }
    
        // update object target
        if (scope.mode != scope.modes.DRAW && !mouseDown) {
          var hoverCorner = floorplan.overlappedCorner(mouseX, mouseY);
          var hoverWall = floorplan.overlappedWall(mouseX, mouseY);      
          var draw = false;
          if (hoverCorner != scope.activeCorner) {
            scope.activeCorner = hoverCorner;
            draw = true;
          }
          // corner takes precendence
          if (scope.activeCorner == null) {
            if (hoverWall != scope.activeWall) {
              scope.activeWall = hoverWall;
              draw = true;
            }  
          } else {
            scope.activeWall = null;
          }
          if (draw) {
            view.draw();
          }
        }
    
        // panning
        if (mouseDown && !scope.activeCorner && !scope.activeWall) {
          scope.originX += (lastX - rawMouseX);
          scope.originY += (lastY - rawMouseY);
          lastX = rawMouseX;
          lastY = rawMouseY;
          view.draw();
        }
    
        // dragging
        if (scope.mode == scope.modes.MOVE && mouseDown) {
          if (scope.activeCorner) {
            scope.activeCorner.move(mouseX, mouseY);
            scope.activeCorner.snapToAxis(snapTolerance);
          } else if (scope.activeWall) {
            scope.activeWall.relativeMove(
              (rawMouseX - lastX) * cmPerPixel, 
              (rawMouseY - lastY) * cmPerPixel
            );
            scope.activeWall.snapToAxis(snapTolerance);
            lastX = rawMouseX;
            lastY = rawMouseY;
          }
          view.draw();
        }
    
      }
    
      function mouseup() {
        mouseDown = false;
    
        // drawing
        if (scope.mode == scope.modes.DRAW && !mouseMoved) {
          var corner = floorplan.newCorner(scope.targetX, scope.targetY);
          if (scope.lastNode != null) {
            floorplan.newWall(scope.lastNode, corner);  
          }
          if (corner.mergeWithIntersected() && scope.lastNode != null) {
            scope.setMode(scope.modes.MOVE);
          } 
          scope.lastNode = corner;  
        }
      }
    
      function mouseleave() {
        mouseDown = false;
        //scope.setMode(scope.modes.MOVE);
      }
    
      this.reset = function() {
        scope.resizeView();
        scope.setMode(scope.modes.MOVE);
        resetOrigin();
        view.draw();
      }
    
      this.resizeView = function() {
        view.handleWindowResize();
      }
    
      this.setMode = function(mode) {
        scope.lastNode = null;
        scope.mode = mode;
        scope.modeResetCallbacks.fire(mode);
        updateTarget();
      }
    
      function resetOrigin() {
        // sets the origin so that floorplan is centered
        var canvasSel = $("#"+canvas);
        var centerX = canvasSel.innerWidth() / 2.0;
        var centerY = canvasSel.innerHeight() / 2.0;
        var centerFloorplan = floorplan.getCenter();
        scope.originX = centerFloorplan.x * pixelsPerCm - centerX;
        scope.originY = centerFloorplan.z * pixelsPerCm - centerY;
      }
    
      this.convertX = function(x) {
        // convert from THREEjs coords to canvas coords
        return (x - scope.originX * cmPerPixel) * pixelsPerCm;
      }
    
      this.convertY = function(y) {
        // convert from THREEjs coords to canvas coords
        return (y - scope.originY * cmPerPixel) * pixelsPerCm;
      }
    
      init();
    }
    
    module.exports = Floorplanner;
    },{"../utils/utils":29,"./floorplanner_view":5,"jquery":1}],5:[function(require,module,exports){
    var JQUERY = require('jquery');
    var utils = require('../utils/utils')
    
    
    var FloorplannerView = function(floorplan, viewmodel, canvas) {
    
      var scope = this;
      var floorplan = floorplan;
      var viewmodel = viewmodel;
      var canvas = canvas;
      var canvasElement = document.getElementById(canvas);
      var context = canvasElement.getContext('2d');
    
      // grid parameters
      var gridSpacing = 20; // pixels
      var gridWidth = 1;
      var gridColor = "#f1f1f1";
    
      // room config
      var roomColor = "#f9f9f9";
    
      // wall config
      var wallWidth = 5;
      var wallWidthHover = 7;
      var wallColor = "#dddddd"
      var wallColorHover = "#008cba"
      var edgeColor = "#888888"
      var edgeColorHover = "#008cba"
      var edgeWidth = 1
    
      var deleteColor = "#ff0000";
    
      // corner config
      var cornerRadius = 0
      var cornerRadiusHover = 7
      var cornerColor = "#cccccc"
      var cornerColorHover = "#008cba"
    
      function init() {
        JQUERY(window).resize(scope.handleWindowResize);
        scope.handleWindowResize();
      }
    
      this.handleWindowResize = function() {
        var canvasSel = JQUERY("#"+canvas);
        var parent = canvasSel.parent();
        canvasSel.height(parent.innerHeight());
        canvasSel.width(parent.innerWidth());
        canvasElement.height = parent.innerHeight();
        canvasElement.width = parent.innerWidth(); 
        scope.draw();
      }
    
      this.draw = function() {
        context.clearRect(0, 0, canvasElement.width, canvasElement.height);
        drawGrid();
        utils.forEach(floorplan.getRooms(), drawRoom);
        utils.forEach(floorplan.getWalls(), drawWall);
        utils.forEach(floorplan.getCorners(), drawCorner);
        if (viewmodel.mode == viewmodel.modes.DRAW) {
          drawTarget(viewmodel.targetX, viewmodel.targetY, viewmodel.lastNode);
        }
        utils.forEach(floorplan.getWalls(), drawWallLabels);
      }
    
      function drawWallLabels(wall) {
        // we'll just draw the shorter label... idk
        if (wall.backEdge && wall.frontEdge) {
          if (wall.backEdge.interiorDistance < wall.frontEdge.interiorDistance) {
            drawEdgeLabel(wall.backEdge);
          } else {
            drawEdgeLabel(wall.frontEdge);
          }
        } else if (wall.backEdge) {
          drawEdgeLabel(wall.backEdge);
        } else if (wall.frontEdge) {
          drawEdgeLabel(wall.frontEdge);
        }
      }
    
      function drawWall(wall) {
        var hover = (wall === viewmodel.activeWall);
        var color = wallColor;
        if (hover && viewmodel.mode == viewmodel.modes.DELETE) {
          color = deleteColor;
        } else if (hover) {
          color = wallColorHover;
        } 
        drawLine(
          viewmodel.convertX(wall.getStartX()),
          viewmodel.convertY(wall.getStartY()),
          viewmodel.convertX(wall.getEndX()),
          viewmodel.convertY(wall.getEndY()),
          hover ? wallWidthHover : wallWidth,
          color
        );
        if (!hover && wall.frontEdge) {
          drawEdge(wall.frontEdge, hover);
        }
        if (!hover && wall.backEdge) {
          drawEdge(wall.backEdge, hover);
        }
      }
    
      function cmToFeet(cm) {
        // var realFeet = ((cm*0.393700) / 12);
        // var feet = Math.floor(realFeet);
        // var inches = Math.round((realFeet - feet) * 12);
        // return feet + "'" + inches + '"';
        return "" + Math.round(10 * cm) / 1000 + "米";
      }
    
      function drawEdgeLabel(edge) {
        var pos = edge.interiorCenter();
        var length = edge.interiorDistance();
        if (length < 60) {
          // dont draw labels on walls this short
          return;
        }
        context.font = "normal 12px Arial";
        context.fillStyle = "#000000";
        context.textBaseline = "middle";
        context.textAlign = "center";
        context.strokeStyle = "#ffffff";
        context.lineWidth  = 4;
    
        context.strokeText(cmToFeet(length), 
          viewmodel.convertX(pos.x), 
          viewmodel.convertY(pos.y));
        context.fillText(cmToFeet(length), 
          viewmodel.convertX(pos.x), 
          viewmodel.convertY(pos.y));
      }
    
      function drawEdge(edge, hover) {
        var color = edgeColor;
        if (hover && viewmodel.mode == viewmodel.modes.DELETE) {
          color = deleteColor;
        } else if (hover) {
          color = edgeColorHover;
        } 
        corners = edge.corners();
        drawPolygon(
          utils.map(corners, function(corner) {
            return viewmodel.convertX(corner.x);
          }), 
          utils.map(corners, function(corner) {
            return viewmodel.convertY(corner.y);
          }), 
          false,
          null,
          true,
          color,
          edgeWidth
        ); 
      }
    
      function drawRoom(room) {
        drawPolygon(
          utils.map(room.corners, function(corner) {
            return viewmodel.convertX(corner.x);
          }), 
          utils.map(room.corners, function(corner) {
            return viewmodel.convertY(corner.y);
          }), 
          true,
          roomColor
        );
      }
    
      function drawCorner(corner) {
        var hover = (corner === viewmodel.activeCorner);
        var color = cornerColor;
        if (hover && viewmodel.mode == viewmodel.modes.DELETE) {
          color = deleteColor;
        } else if (hover) {
          color = cornerColorHover;
        } 
        drawCircle(
          viewmodel.convertX(corner.x), 
          viewmodel.convertY(corner.y), 
          hover ? cornerRadiusHover : cornerRadius, 
          color
        );
      }
    
      function drawTarget(x, y, lastNode) {
        drawCircle(
          viewmodel.convertX(x), 
          viewmodel.convertY(y), 
          cornerRadiusHover, 
          cornerColorHover
        );
        if (viewmodel.lastNode) {
          drawLine(
            viewmodel.convertX(lastNode.x),
            viewmodel.convertY(lastNode.y),
            viewmodel.convertX(x),
            viewmodel.convertY(y),
            wallWidthHover,
            wallColorHover
          );
        }
      }
    
      function drawLine(startX, startY, endX, endY, width, color) {
        // width is an integer
        // color is a hex string, i.e. #ff0000
        context.beginPath();
        context.moveTo(startX, startY);
        context.lineTo(endX, endY);
        context.lineWidth = width;
        context.strokeStyle = color;
        context.stroke();
      }
    
      function drawPolygon(xArr, yArr, fill, fillColor, stroke, strokeColor, strokeWidth) {
        // fillColor is a hex string, i.e. #ff0000
        fill = fill || false;
        stroke = stroke || false;
        context.beginPath();
        context.moveTo(xArr[0], yArr[0]);
        for (var i = 1; i < xArr.length; i++) {
          context.lineTo(xArr[i], yArr[i]);
        }
        context.closePath();
        if (fill) {
          context.fillStyle = fillColor;
          context.fill();   
        }
        if (stroke) {
          context.lineWidth = strokeWidth;
          context.strokeStyle = strokeColor;
          context.stroke();
        }
    
      }
    
      function drawCircle(centerX, centerY, radius, fillColor) {
        context.beginPath();
        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
        context.fillStyle = fillColor;
        context.fill();
      }
    
      // returns n where -gridSize/2 < n <= gridSize/2 
      function calculateGridOffset(n) {
        if (n >= 0) {
          return (n + gridSpacing/2.0) % gridSpacing - gridSpacing/2.0;
        } else {
          return (n - gridSpacing/2.0) % gridSpacing + gridSpacing/2.0;  
        }
      }
    
      function drawGrid() {
        var offsetX = calculateGridOffset(-viewmodel.originX);
        var offsetY = calculateGridOffset(-viewmodel.originY);
        var width = canvasElement.width;
        var height = canvasElement.height;
        for (var x=0; x <= (width / gridSpacing); x++) {
          drawLine(gridSpacing * x + offsetX, 0, gridSpacing*x + offsetX, height, gridWidth, gridColor);
        }
        for (var y=0; y <= (height / gridSpacing); y++) {
          drawLine(0, gridSpacing*y + offsetY, width, gridSpacing*y + offsetY, gridWidth, gridColor);
        }
      }
    
      init();
    }
    
    module.exports = FloorplannerView
    },{"../utils/utils":29,"jquery":1}],6:[function(require,module,exports){
    var THREE = require('three');
    
    var Item = require('./item');
    
    var utils = require('../utils/utils')
    
    
    var FloorItem = function(three, metadata, geometry, material, position, rotation, scale) {
        Item.call(this, three, metadata, geometry, material, position, rotation, scale);
    };
    
    FloorItem.prototype = Object.create(Item.prototype);
    
    FloorItem.prototype.placeInRoom = function() {
        if (!this.position_set) {
            var center = this.model.floorplan.getCenter();
            this.position.x = center.x;
            this.position.z = center.z;
            this.position.y = 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y );        
        }
    };
    
    FloorItem.prototype.resized = function() {
        // take action after a resize
        this.position.y = this.halfSize.y;
    }
    
    FloorItem.prototype.moveToPosition = function(vec3, intersection) {
        // keeps the position in the room and on the floor
        if (!this.isValidPosition(vec3)) {
            this.showError(vec3);
            return;
        } else {
            this.hideError();
            vec3.y = this.position.y; // keep it on the floor!
            this.position.copy(vec3);
        }
    }
    
    
    FloorItem.prototype.isValidPosition = function(vec3) {
        var corners = this.getCorners('x', 'z', vec3);
    
        // check if we are in a room
        var rooms = this.model.floorplan.getRooms();
        var isInARoom = false;
        for (var i = 0; i < rooms.length; i++) {
            if(utils.pointInPolygon(vec3.x, vec3.z, rooms[i].interiorCorners) &&
                !utils.polygonPolygonIntersect(corners, rooms[i].interiorCorners)) {
                isInARoom = true;
            }
        }
        if (!isInARoom) {
            //console.log('object not in a room');
            return false;
        }
    
        // check if we are outside all other objects
        /*
        if (this.obstructFloorMoves) {
            var objects = this.model.items.getItems();
            for (var i = 0; i < objects.length; i++) {
                if (objects[i] === this || !objects[i].obstructFloorMoves) {
                    continue;
                }
                if (!utils.polygonOutsidePolygon(corners, objects[i].getCorners('x', 'z')) ||
                    utils.polygonPolygonIntersect(corners, objects[i].getCorners('x', 'z'))) {
                    //console.log('object not outside other objects');
                    return false;
                }
            }
        }*/
    
        return true;
    }
    
    module.exports = FloorItem;
    },{"../utils/utils":29,"./item":9,"three":2}],7:[function(require,module,exports){
    var InWallItem = require('./in_wall_item');
    
    var InWallFloorItem = function(three, metadata, geometry, material, position, rotation, scale) {
        InWallItem.call(this, three, metadata, geometry, material, position, rotation, scale);
        this.boundToFloor = true;
    };
    
    InWallFloorItem.prototype = Object.create(InWallItem.prototype);
    
    module.exports = InWallFloorItem;
    },{"./in_wall_item":8}],8:[function(require,module,exports){
    var WallItem = require('./wall_item');
    
    var InWallItem = function(three, metadata, geometry, material, position, rotation, scale) {
        WallItem.call(this, three, metadata, geometry, material, position, rotation, scale);
        this.addToWall = true;
    };
    
    InWallItem.prototype = Object.create(WallItem.prototype);
    
    InWallItem.prototype.getWallOffset = function() {
      // fudge factor so it saves to the right wall
      return -this.currentWallEdge.offset + 0.5;
    }
    
    module.exports = InWallItem;
    },{"./wall_item":12}],                                                                                                                                                                                                                  9:[function(require,module,exports){
    var THREE = require('three');
    
    var utils = require('../utils/utils')
    
    
    var Item = function(model, metadata, geometry, material, position, rotation, scale) {
    
        //this.three = three;
        //this.model = three.getModel();
        //this.scene = three.getScene();
        //this.controller = three.getController();
        this.model = model;
        this.scene = model.scene;
    
        this.errorGlow = new THREE.Mesh();
    
        this.hover = false;
        this.selected = false;
        this.highlighted = false;
        this.error = false;
        this.emissiveColor = 0x444444;
        this.errorColor = 0xff0000;
    
        this.metadata = metadata;
        this.resizable = metadata.resizable;
    
        THREE.Mesh.call(this, geometry, material);
    
        this.castShadow = true;
        this.receiveShadow = false;
    
        // does this object affect other floor items
        this.obstructFloorMoves = true;
    
        if (position) {
            this.position.copy(position);        
            this.position_set = true;
        } else {
            this.position_set = false;
        }
    
        // show rotate option in context menu
        this.allowRotate = true;
        this.fixed = false;
    
        // dragging
        this.dragOffset = new THREE.Vector3();
    
        // center in its boundingbox
        this.geometry.computeBoundingBox();
        this.geometry.applyMatrix( new THREE.Matrix4().makeTranslation(
            - 0.5 * ( this.geometry.boundingBox.max.x + this.geometry.boundingBox.min.x ),
            - 0.5 * ( this.geometry.boundingBox.max.y + this.geometry.boundingBox.min.y ),
            - 0.5 * ( this.geometry.boundingBox.max.z + this.geometry.boundingBox.min.z )
        ) );
        this.geometry.computeBoundingBox();
        this.halfSize = this.objectHalfSize();
    
        if (rotation) {
            this.rotation.y = rotation;
        }
    
        if (scale != null) {
            this.setScale(scale.x, scale.y, scale.z);
        }
    };
    
    Item.prototype = Object.create(THREE.Mesh.prototype);
    
    Item.prototype.remove = function() {
        this.scene.removeItem(this);
    };
    
    Item.prototype.resize = function(height, width, depth) {
        var x = width / this.getWidth();
        var y = height / this.getHeight();
        var z = depth / this.getDepth();
        this.setScale(x, y, z);
    }
    
    Item.prototype.setScale = function(x, y, z) {
        var scaleVec = new THREE.Vector3(x, y, z);
        this.halfSize.multiply(scaleVec);
        scaleVec.multiply(this.scale)
        this.scale.set(scaleVec.x, scaleVec.y, scaleVec.z);
        this.resized();
        this.scene.needsUpdate = true;
    };
    
    Item.prototype.setFixed = function(fixed) {
        this.fixed = fixed;
    }
    
    Item.prototype.resized = function() {
        // subclass can define to take action after a resize
    }
    
    Item.prototype.getHeight = function() {
        return this.halfSize.y * 2.0;
    }
    
    Item.prototype.getWidth = function() {
        return this.halfSize.x * 2.0;
    }
    
    Item.prototype.getDepth = function() {
        return this.halfSize.z * 2.0;
    }
    
    Item.prototype.placeInRoom = function() {
        // handle in sub class
    };
    
    Item.prototype.initObject = function() {
        this.placeInRoom();    
        // select and stuff
        this.scene.needsUpdate = true;
    };
    
    Item.prototype.removed = function() {
        // implement in subclass
    }
    
    // on is a bool
    Item.prototype.updateHighlight = function() {
        var on = this.hover || this.selected;
        this.highlighted = on;
        var hex = on ? this.emissiveColor : 0x000000;
        utils.forEach(this.material.materials, function(material) {
            material.emissive.setHex(hex);
        });
    }
    
    Item.prototype.mouseOver = function() {
        this.hover = true;
        this.updateHighlight();
    };
    
    Item.prototype.mouseOff = function() {
        this.hover = false;
        this.updateHighlight();
    };
    
    Item.prototype.setSelected = function() {
        this.selected = true;
        this.updateHighlight();
    };
    
    Item.prototype.setUnselected = function() {
        this.selected = false;
        this.updateHighlight();
    };
    
    // intersection has attributes point (vec3) and object (THREE.Mesh)
    Item.prototype.clickPressed = function(intersection) {
        this.dragOffset.copy(intersection.point).sub(this.position);
    };
    
    Item.prototype.clickDragged = function(intersection) {
        if (intersection) {
            this.moveToPosition(
                intersection.point.sub(this.dragOffset), 
                intersection);
        }
    };
    
    Item.prototype.rotate = function(intersection) {
        if (intersection) {
            var angle = utils.angle(
                0, 
                1, 
                intersection.point.x - this.position.x, 
                intersection.point.z - this.position.z);
    
            var snapTolerance = Math.PI / 16.0;
    
            // snap to intervals near Math.PI/2
            for (var i=-4; i <= 4; i++) {
                if ( Math.abs( angle - ( i * ( Math.PI / 2 ) ) ) < snapTolerance ) {
                    angle = i * ( Math.PI / 2 );
                    break;
                }
            }
    
            this.rotation.y = angle;
        }
    }
    
    Item.prototype.moveToPosition = function(vec3, intersection) {
        this.position.copy(vec3);
    }
    
    Item.prototype.clickReleased = function() {
        if (this.error) {
            this.hideError();
        }
    };
    
    // Returns an array of planes to use other than the ground plane
    // for passing intersection to clickPressed and clickDragged
    Item.prototype.customIntersectionPlanes = function() {
        return [];
    }
    
    // returns the 2d corners of the bounding polygon
    // offset is Vector3 (used for getting corners of object at a new position)
    // TODO: handle rotated objects better!
    Item.prototype.getCorners = function(xDim, yDim, position) {
    
        position = position || this.position;
    
        var halfSize = this.halfSize.clone();
    
        var c1 = new THREE.Vector3(-halfSize.x, 0, -halfSize.z);
        var c2 = new THREE.Vector3(halfSize.x, 0, -halfSize.z);
        var c3 = new THREE.Vector3(halfSize.x, 0, halfSize.z);
        var c4 = new THREE.Vector3(-halfSize.x, 0, halfSize.z);
    
        var transform = new THREE.Matrix4();
        //console.log(this.rotation.y);
        transform.makeRotationY(this.rotation.y); //  + Math.PI/2)
    
        c1.applyMatrix4(transform);
        c2.applyMatrix4(transform);
        c3.applyMatrix4(transform);
        c4.applyMatrix4(transform);
    
        c1.add(position);
        c2.add(position);
        c3.add(position);
        c4.add(position);
    
        //halfSize.applyMatrix4(transform);
    
        //var min = position.clone().sub(halfSize);
        //var max = position.clone().add(halfSize);
    
        var corners = [
            {x: c1.x, y: c1.z},
            {x: c2.x, y: c2.z},
            {x: c3.x, y: c3.z},
            {x: c4.x, y: c4.z}
        ];
    
        return corners;
    }
    
    Item.prototype.isValidPosition = function( vec3 ) {
        // implement in subclass
    }
    
    Item.prototype.showError = function(vec3) {
        vec3 = vec3 || this.position;
        if (!this.error) {
            this.error = true;
            this.errorGlow = this.createGlow(this.errorColor, 0.8, true);
            this.scene.add(this.errorGlow);
        }
        this.errorGlow.position.copy(vec3);
    }
    
    Item.prototype.hideError = function() {
        if ( this.error) {
            this.error = false;
            this.scene.remove( this.errorGlow );
        }
    }
    
    Item.prototype.objectHalfSize = function() {
        var objectBox = new THREE.Box3();
        objectBox.setFromObject( this );
        return objectBox.max.clone().sub( objectBox.min ).divideScalar( 2 );
    }
    
    Item.prototype.createGlow = function( color, opacity, ignoreDepth ) {
        ignoreDepth = ignoreDepth || false
        opacity = opacity || 0.2;
        var glowMaterial = new THREE.MeshBasicMaterial ({
            color: color,
            blending: THREE.AdditiveBlending,
            opacity: 0.2,
            transparent: true,
            depthTest: !ignoreDepth
        });
            
        var glow = new THREE.Mesh(this.geometry.clone(), glowMaterial);
        glow.position.copy(this.position);
        glow.rotation.copy(this.rotation);
        glow.scale.copy(this.scale);
        return glow;
    };
    
    module.exports = Item;
    
    },{"../utils/utils":29,"three":2}],10:[function(require,module,exports){
    var FloorItem = require('./floor_item');
    
    var OnFloorItem = function(three, metadata, geometry, material, position, rotation, scale) {
        FloorItem.call(this, three, metadata, geometry, material, position, rotation, scale);
        this.obstructFloorMoves = false;
        this.receiveShadow = true;
    };
    
    OnFloorItem.prototype = Object.create(FloorItem.prototype);
    
    module.exports = OnFloorItem;
    },{"./floor_item":6}],11:[function(require,module,exports){
    var WallItem = require('./wall_item');
    
    var WallFloorItem = function(three, metadata, geometry, material, position, rotation, scale) {
        WallItem.call(this, three, metadata, geometry, material, position, rotation, scale);
        this.boundToFloor = true;
    };
    
    WallFloorItem.prototype = Object.create(WallItem.prototype);
    
    module.exports = WallFloorItem;
    
    },{"./wall_item":12}],12:[function(require,module,exports){
    var THREE = require('three')
    var Item = require('./item')
    
    var utils = require('../utils/utils')
    
    
    var WallItem = function(model, metadata, geometry, material, position, rotation, scale) {
        Item.call(this, model, metadata, geometry, material, position, rotation, scale);
    
        this.allowRotate = false;
    
        // TODO:
        // This caused a huge headache.
        // HalfEdges get destroyed/created every time floorplan is edited.
        // This item should store a reference to a wall and front/back,
        // and grab its edge reference dynamically whenever it needs it.
        this.currentWallEdge = null;
    
        // used for finding rotations
        this.refVec = new THREE.Vector2(0, 1.0);
        this.wallOffsetScalar = 0;
        this.sizeX = 0;
        this.sizeY = 0;
    
        this.addToWall = false;
        this.boundToFloor = false;
    
        this.frontVisible = false;
        this.backVisible = false;
    };
    
    WallItem.prototype = Object.create(Item.prototype);
    
    WallItem.prototype.closestWallEdge = function() {
    
        var wallEdges = this.model.floorplan.wallEdges();
    
        var wallEdge = null;
        var minDistance = null; 
    
        var itemX = this.position.x;
        var itemZ = this.position.z;
    
        utils.forEach(wallEdges, function(edge) {
            var distance = edge.distanceTo(itemX, itemZ);
            if (minDistance === null || distance < minDistance) {
                minDistance = distance;
                wallEdge = edge;
            }
        });
    
        return wallEdge;
    }
    
    WallItem.prototype.removed = function() {
        if (this.currentWallEdge != null && this.addToWall) {
            utils.removeValue(this.currentWallEdge.wall.items, this);
            this.redrawWall();
        }
    }
    
    WallItem.prototype.redrawWall = function() {
        if (this.addToWall) {
            this.currentWallEdge.wall.fireRedraw();
        }
    }
    
    WallItem.prototype.updateEdgeVisibility = function(visible, front) {
        if (front) {
            this.frontVisible = visible;
        } else {
            this.backVisible = visible;
        }
        this.visible = (this.frontVisible || this.backVisible);
    }
    
    WallItem.prototype.updateSize = function() {
        this.wallOffsetScalar = (this.geometry.boundingBox.max.z - this.geometry.boundingBox.min.z) * this.scale.z / 2.0;
        this.sizeX = (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x) * this.scale.x;
        this.sizeY = (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y) * this.scale.y;
    }
    
    WallItem.prototype.resized = function() {
        if (this.boundToFloor) {
            this.position.y = 0.5 * (this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y)  * this.scale.y + 0.01;        
        }
    
        this.updateSize();
        this.redrawWall();
    }
    
    WallItem.prototype.placeInRoom = function() {
        var closestWallEdge = this.closestWallEdge();
        this.changeWallEdge(closestWallEdge);
        this.updateSize();
        
        if (!this.position_set) {
            // position not set
            var center = closestWallEdge.interiorCenter();
            var newPos = new THREE.Vector3(
                center.x,
                closestWallEdge.wall.height / 2.0,
                center.y);
            this.boundMove(newPos);
            this.position.copy(newPos);
            this.redrawWall();
        } 
    };
    
    WallItem.prototype.moveToPosition = function(vec3, intersection) {
        this.changeWallEdge(intersection.object.edge);
        this.boundMove(vec3);
        this.position.copy(vec3);
        this.redrawWall();
    }
    
    WallItem.prototype.getWallOffset = function() {
        return this.wallOffsetScalar;
    }
    
    WallItem.prototype.changeWallEdge = function(wallEdge) {
        if (this.currentWallEdge != null) {
            if (this.addToWall) {
                utils.removeValue(this.currentWallEdge.wall.items, this);
                this.redrawWall();
            } else {
                utils.removeValue(this.currentWallEdge.wall.onItems, this);
            }
        }
    
        // handle subscription to wall being removed
        if (this.currentWallEdge != null) {
            this.currentWallEdge.wall.dontFireOnDelete(this.remove.bind(this));
        }
        wallEdge.wall.fireOnDelete(this.remove.bind(this));
    
        // find angle between wall normals
        var normal2 = new THREE.Vector2();
        var normal3 = wallEdge.plane.geometry.faces[0].normal;
        normal2.x = normal3.x;
        normal2.y = normal3.z;
    
        var angle = utils.angle(
            this.refVec.x, this.refVec.y,
            normal2.x, normal2.y);
        this.rotation.y = angle;
    
        // update currentWall
        this.currentWallEdge = wallEdge;
        if (this.addToWall) {
            wallEdge.wall.items.push(this);  
            this.redrawWall();      
        } else {
            wallEdge.wall.onItems.push(this);  
        }
    }
    
    // Returns an array of planes to use other than the ground plane
    // for passing intersection to clickPressed and clickDragged
    WallItem.prototype.customIntersectionPlanes = function() {
        return this.model.floorplan.wallEdgePlanes();
    }
    
    // takes the move vec3, and makes sure object stays
    // bounded on plane
    WallItem.prototype.boundMove = function(vec3) {
    
        var tolerance = 1;
        var edge =  this.currentWallEdge;
        vec3.applyMatrix4(edge.interiorTransform);
    
        if (vec3.x < this.sizeX / 2.0 + tolerance) {
            vec3.x = this.sizeX / 2.0 + tolerance;
        } else if (vec3.x > (edge.interiorDistance() - this.sizeX / 2.0 - tolerance)) {
            vec3.x = edge.interiorDistance() - this.sizeX / 2.0 - tolerance;
        }
    
        if (this.boundToFloor) {
            vec3.y = 0.5 * ( this.geometry.boundingBox.max.y - this.geometry.boundingBox.min.y ) * this.scale.y + 0.01;        
        } else {
            if (vec3.y < this.sizeY / 2.0 + tolerance) {
                vec3.y = this.sizeY / 2.0 + tolerance;
            } else if (vec3.y > edge.height - this.sizeY / 2.0 - tolerance) {
                vec3.y = edge.height - this.sizeY / 2.0 - tolerance;
            }
        }
    
        vec3.z = this.getWallOffset();
    
        vec3.applyMatrix4(edge.invInteriorTransform);
    }
    
    module.exports = WallItem;
    
    },{"../utils/utils":29,"./item":9,"three":2}],13:[function(require,module,exports){
    var JQUERY = require('jquery');
    
    var utils = require('../utils/utils')
    
    // x and y are floats
    var Corner = function(floorplan, x, y, id) {
    
      this.id = id || utils.guid();
    
      var scope = this;
    
      this.x = x;
      this.y = y;
    
      var floorplan = floorplan;
    
      var tolerance = 20;
    
      this.wallStarts = []
      this.wallEnds = []
    
      var moved_callbacks = JQUERY.Callbacks();
      var deleted_callbacks = JQUERY.Callbacks();
      var action_callbacks = JQUERY.Callbacks();
    
      this.fireOnMove = function(func) {
        moved_callbacks.add(func);
      }
    
      this.fireOnDelete = function(func) {
        deleted_callbacks.add(func);
      }
    
      this.fireOnAction = function(func) {
        action_callbacks.add(func);
      }
    
      // TODO: deprecate
      this.getX = function() {
        return this.x;
      }
    
      // TODO: deprecate
      this.getY = function() {
        return this.y;
      }
    
      this.snapToAxis = function(tolerance) {
        // try to snap this corner to an axis
        var snapped = {
          x: false,
          y: false
        };
        utils.forEach(this.adjacentCorners(), function(corner) {
          if (Math.abs(corner.x - scope.x) < tolerance) {
            scope.x = corner.x;
            snapped.x = true;
          } 
          if (Math.abs(corner.y - scope.y) < tolerance) {
            scope.y = corner.y;
            snapped.y = true;
          }
        });
        return snapped;
      }
    
      this.relativeMove = function(dx, dy) {
        this.move(this.x + dx, this.y + dy);
      }
    
      this.fireAction = function(action) {
        action_callbacks.fire(action)
      }
    
      this.remove = function() {
        deleted_callbacks.fire(this);
      }
    
      this.removeAll = function() {
        for( var i = 0; i < this.wallStarts.length; i++ ) {
          this.wallStarts[i].remove();
        }
        for( var i = 0; i < this.wallEnds.length; i++ ) {
          this.wallEnds[i].remove();  
        } 
        this.remove()
      }
    
      this.move = function(newX, newY) {
        this.x = newX;
        this.y = newY;
        this.mergeWithIntersected();
        moved_callbacks.fire(this.x, this.y);
        utils.forEach(this.wallStarts, function(wall) {
          wall.fireMoved();
        });
        utils.forEach(this.wallEnds, function(wall) {
          wall.fireMoved();
        });
      }
    
      this.adjacentCorners = function() {
        retArray = [];
        for( var i = 0; i < this.wallStarts.length; i++ ) {
          retArray.push(this.wallStarts[i].getEnd());
        }
        for( var i = 0; i < this.wallEnds.length; i++ ) {
          retArray.push(this.wallEnds[i].getStart());
        }
        return retArray;   
      }
    
      this.isWallConnected = function(wall) {
        for( var i = 0; i < this.wallStarts.length; i++ ) {
          if (this.wallStarts[i] == wall) {
            return true;
          }
        }
        for( var i = 0; i < this.wallEnds.length; i++ ) {
          if (this.wallEnds[i] == wall) {
            return true;
          }
        }  
        return false;      
      }
    
      this.distanceFrom = function(x, y) {
        var distance = utils.distance(x, y, this.x, this.y);
        //console.log('x,y ' + x + ',' + y + ' to ' + this.getX() + ',' + this.getY() + ' is ' + distance);
        return distance;
      }
    
      this.distanceFromWall = function(wall) {
        return wall.distanceFrom(this.x, this.y);
      }
    
      this.distanceFromCorner = function(corner) {
        return this.distanceFrom(corner.x, corner.y);
      }
    
      this.detachWall = function(wall) {
        utils.removeValue(this.wallStarts, wall);
        utils.removeValue(this.wallEnds, wall);
        if (this.wallStarts.length == 0 && this.wallEnds.length == 0) {    
          this.remove();
        }     
      }
    
      this.attachStart = function(wall) {
        this.wallStarts.push(wall)
      }
    
      this.attachEnd = function(wall) {
        this.wallEnds.push(wall)
      }
    
      // get wall to corner
      this.wallTo = function(corner) {
        for( var i = 0; i < this.wallStarts.length; i++ ) {
          if (this.wallStarts[i].getEnd() === corner) {
            return this.wallStarts[i];
          }
        }
        return null; 
      }
    
      this.wallFrom = function(corner) {
        for( var i = 0; i < this.wallEnds.length; i++ ) {
          if (this.wallEnds[i].getStart() === corner) {
            return this.wallEnds[i];
          }
        } 
        return null;
      }
    
      this.wallToOrFrom = function(corner) {
        return this.wallTo(corner) || this.wallFrom(corner);
      }
    
      this.combineWithCorner = function(corner) {
        // update position to other corner's
        this.x = corner.x;
        this.y = corner.y;
        // absorb the other corner's wallStarts and wallEnds
        for( var i = corner.wallStarts.length - 1; i >= 0; i-- ) {
          corner.wallStarts[i].setStart( this );
        }
        for( var i = corner.wallEnds.length - 1; i >= 0; i-- ) {
          corner.wallEnds[i].setEnd( this );         
        }           
        // delete the other corner
        corner.removeAll();
        this.removeDuplicateWalls();
        floorplan.update();
      }
    
      this.mergeWithIntersected = function() {
        //console.log('mergeWithIntersected for object: ' + this.type);
        // check corners
        for( var i = 0; i < floorplan.getCorners().length; i++ ) {
          obj = floorplan.getCorners()[i];
          if (this.distanceFromCorner(obj) < tolerance && obj != this) {
            this.combineWithCorner(obj);
            return true;
          }
        }
        // check walls
        for( var i = 0; i < floorplan.getWalls().length; i++ ) {
          obj = floorplan.getWalls()[i];
          if (this.distanceFromWall(obj) < tolerance && !this.isWallConnected( obj )) {
            // update position to be on wall
            var intersection = utils.closestPointOnLine(this.x, this.y, 
              obj.getStart().x, obj.getStart().y, 
              obj.getEnd().x, obj.getEnd().y);
            this.x = intersection.x;
            this.y = intersection.y;
            // merge this corner into wall by breaking wall into two parts
            floorplan.newWall(   
              this, obj.getEnd());
            obj.setEnd(this); 
            floorplan.update();
            return true;
          }         
        }
        return false;
      }
    
      // ensure we do not have duplicate walls (i.e. same start and end points)
      this.removeDuplicateWalls = function() {
        // delete the wall between these corners, if it exists
        var wallEndpoints = {};
        var wallStartpoints = {};
        for( var i = this.wallStarts.length - 1; i >= 0; i-- ) {
          if (this.wallStarts[i].getEnd() === this) {
            // remove zero length wall 
            this.wallStarts[i].remove();   
          } else if (this.wallStarts[i].getEnd().id in wallEndpoints) {
            // remove duplicated wall
            this.wallStarts[i].remove();
          } else {
            wallEndpoints[this.wallStarts[i].getEnd().id] = true;
          }
        }
        for( var i = this.wallEnds.length - 1; i >= 0; i-- ) {
          if (this.wallEnds[i].getStart() === this) {
            // removed zero length wall 
            this.wallEnds[i].remove();     
          } else if (this.wallEnds[i].getStart().id in wallStartpoints) {
            // removed duplicated wall
            this.wallEnds[i].remove();
          } else {
            wallStartpoints[this.wallEnds[i].getStart().id] = true;
          }         
        } 
      }
    
    };
    
    module.exports = Corner;
    
    },{"../utils/utils":29,"jquery":1}],14:[function(require,module,exports){
    var JQUERY = require('jquery');
    var THREE = require('three')
    
    var Wall = require('./wall')
    var Corner = require('./corner')
    var Room = require('./room')
    var HalfEdge = require('./half_edge')
    
    var utils = require('../utils/utils')
    
    var Floorplan = function() {
    
      var scope = this;
    
      var walls = [];
      var corners = [];
      var rooms = [];
    
      // Track floor textures here, since rooms are destroyed and
      // created each time we change the floorplan.
      this.floorTextures = {}
    
      var new_wall_callbacks = JQUERY.Callbacks();
      var new_corner_callbacks = JQUERY.Callbacks();
      var redraw_callbacks = JQUERY.Callbacks();
      var updated_rooms = JQUERY.Callbacks();
      this.roomLoadedCallbacks = JQUERY.Callbacks();
    
      var defaultTolerance = 10.0;
    
      // hack
      this.wallEdges = function() {
        var edges = []
        utils.forEach(walls, function(wall) {
          if (wall.frontEdge) {
            edges.push(wall.frontEdge);
          }
          if (wall.backEdge) {
            edges.push(wall.backEdge);
          }
        });
        return edges;
      }
    
      // hack
      this.wallEdgePlanes = function() {
        var planes = []
        utils.forEach(walls, function(wall) {
          if (wall.frontEdge) {
            planes.push(wall.frontEdge.plane);
          }
          if (wall.backEdge) {
            planes.push(wall.backEdge.plane);
          }
        });
        return planes;
      }
    
      this.floorPlanes = function() {
        return utils.map(rooms, function(room) {
          return room.floorPlane;
        });
      }
    
      this.fireOnNewWall = function(callback) {
        new_wall_callbacks.add(callback);
      }
    
      this.fireOnNewCorner = function(callback) {
        new_corner_callbacks.add(callback);
      }
    
      this.fireOnRedraw = function(callback) {
        redraw_callbacks.add(callback);
      }
    
      this.fireOnUpdatedRooms = function(callback) {
        updated_rooms.add(callback);
      }
    
      this.newWall = function(start, end) {
        var wall = new Wall(start, end);
        walls.push(wall)
        wall.fireOnDelete(removeWall);
        new_wall_callbacks.fire(wall);
        scope.update();
        return wall;
      }
    
      function removeWall(wall) {
        utils.removeValue(walls, wall);
        scope.update();
      }
    
      this.newCorner = function(x, y, id) {
        var corner = new Corner(this, x, y, id);
        corners.push(corner);
        corner.fireOnDelete(removeCorner);
        new_corner_callbacks.fire(corner);
        return corner;
      }
    
      function removeCorner(corner) {
        utils.removeValue(corners, corner);
      }
    
    
      this.getWalls = function() {
        return walls;
      }
    
      this.getCorners = function() {
        return corners;
      }
    
      this.getRooms = function() {
        return rooms;
      }
    
      this.overlappedCorner = function(x, y, tolerance) {
        tolerance = tolerance || defaultTolerance;
        for (i = 0; i < corners.length; i++) {
          if (corners[i].distanceFrom(x, y) < tolerance) {
            //console.log("got corner")
            return corners[i];
          }      
        }
        return null;
      }
    
      this.overlappedWall = function(x, y, tolerance) {
        tolerance = tolerance || defaultTolerance;
        for (i = 0; i < walls.length; i++) {
          if (walls[i].distanceFrom(x, y) < tolerance) {
            return walls[i];
          }      
        }
        return null;
      }
    
      // import and export -- cleanup
    
      this.saveFloorplan = function() {
        var floorplan = {
          corners: {},
          walls: [],
          wallTextures: [],
          floorTextures: {}
        }
        utils.forEach(corners, function(corner) {
          floorplan.corners[corner.id] = {
            'x': corner.x,
            'y': corner.y
          };
        });
        utils.forEach(walls, function(wall) {
          floorplan.walls.push({
            'corner1': wall.getStart().id,
            'corner2': wall.getEnd().id,
            'frontTexture': wall.frontTexture,
            'backTexture': wall.backTexture
          });
        });
        floorplan.newFloorTextures = this.floorTextures;
        return floorplan;
      }
    
      this.loadFloorplan = function( floorplan ) {
        this.reset();
    
        var corners = {};
        if (floorplan == null || !('corners' in floorplan) || !('walls' in floorplan)) {
          return
        } 
        for (var id in floorplan.corners) {
          var corner = floorplan.corners[id];
          corners[id] = this.newCorner(corner.x, corner.y, id);
        }
        utils.forEach(floorplan.walls, function(wall) {
          var newWall = scope.newWall(
            corners[wall.corner1], corners[wall.corner2]);
          if (wall.frontTexture) {
            newWall.frontTexture = wall.frontTexture;
          }
          if (wall.backTexture) {
            newWall.backTexture = wall.backTexture;
          }
        });
    
        if ('newFloorTextures' in floorplan) {
          this.floorTextures = floorplan.newFloorTextures;
        }
    
        this.update();    
        this.roomLoadedCallbacks.fire();
      }
    
      this.getFloorTexture = function(uuid) {
        if (uuid in this.floorTextures) {
          return this.floorTextures[uuid];
        } else {
          return null;
        }
      }
    
      this.setFloorTexture = function(uuid, url, scale) {
        this.floorTextures[uuid] = {
          url: url,
          scale: scale
        }
      }
    
      // clear out obsolete floor textures
      function updateFloorTextures() {
        var uuids = utils.map(rooms, function(room) {
          return room.getUuid();
        });
        for (var uuid in scope.floorTextures) {
          if (!utils.hasValue(uuids, uuid)) {
            delete scope.floorTextures[uuid]
          }
        }
      }
    
      this.reset = function() {
        var tmpCorners = corners.slice(0);
        var tmpWalls = walls.slice(0);
        utils.forEach(tmpCorners, function(c) {
          c.remove();
        })
        utils.forEach(tmpWalls, function(w) {
          w.remove();
        })
        corners = [];
        walls = [];
      }
    
      // update rooms
      this.update = function() {
    
        utils.forEach(walls, function(wall) {
          wall.resetFrontBack();
        });
    
        var roomCorners = findRooms(corners);
        rooms = [];
        utils.forEach(roomCorners, function(corners) {
          rooms.push(new Room(scope, corners));
        });
        assignOrphanEdges();
    
        updateFloorTextures();
        updated_rooms.fire();
      }
    
      // returns the center of the floorplan in the y-plane
      this.getCenter = function() {
        return this.getDimensions(true);
      }
    
      this.getSize = function() {
        return this.getDimensions(false);
      }

      // 获取原点以及边长
      this.getBasePointAndSize = function() {
        var xMin = Infinity;
        var xMax = -Infinity;
        var zMin = Infinity;
        var zMax = -Infinity;
        var wallWidth = 5;

        utils.forEach(corners, function(c) {
          if (c.x < xMin) xMin = c.x;
          if (c.x > xMax) xMax = c.x;
          if (c.y < zMin) zMin = c.y;
          if (c.y > zMax) zMax = c.y;
        });

        var ret = {
            zmin : zMin,
            zmax : zMax,
            base_x : xMin + wallWidth,          // 原点x坐标
            base_z : zMin + wallWidth,          // 原点z坐标
            length_x : xMax - xMin - wallWidth*2, // x轴方向长度
            length_z : zMax - zMin  - wallWidth*2,  // y轴方向长度
        }
        return ret;
      }
    
      this.getDimensions = function(center) {
        center = center || false; // otherwise, get size
    
        var xMin = Infinity;
        var xMax = -Infinity;
        var zMin = Infinity;
        var zMax = -Infinity;
        utils.forEach(corners, function(c) {
          if (c.x < xMin) xMin = c.x;
          if (c.x > xMax) xMax = c.x;
          if (c.y < zMin) zMin = c.y;
          if (c.y > zMax) zMax = c.y;
        });
        var ret;
        if (xMin == Infinity || xMax == -Infinity || zMin == Infinity || zMax == -Infinity) {
            ret = new THREE.Vector3();
        } else {
          if (center) {
            // center
            ret = new THREE.Vector3( (xMin + xMax) * 0.5, 0, (zMin + zMax) * 0.5 );
          } else {
            // size
            ret = new THREE.Vector3( (xMax - xMin), 0, (zMax - zMin) );        
          }
        }
        return ret;
      }
    
    
      function assignOrphanEdges() {
        // kinda hacky
        // find orphaned wall segments (i.e. not part of rooms) and
        // give them edges
        orphanWalls = []
        utils.forEach(walls, function(wall) {
          if (!wall.backEdge && !wall.frontEdge) {
            wall.orphan = true;
            var back = new HalfEdge(null, wall, false);
            back.generatePlane();
            var front = new HalfEdge(null, wall, true);
            front.generatePlane();
            orphanWalls.push(wall);
          }
        });
    
      }
    
    };
    
    /*
     * Find the "rooms" in our planar straight-line graph.
     * Rooms are set of the smallest (by area) possible cycles in this graph.
     */
    // corners has attributes: id, x, y, adjacents
    function findRooms(corners) {
    
      function calculateTheta(previousCorner, currentCorner, nextCorner) {
        var theta = utils.angle2pi(
          previousCorner.x - currentCorner.x,
          previousCorner.y - currentCorner.y,
          nextCorner.x - currentCorner.x,
          nextCorner.y - currentCorner.y);
        return theta;
      }
      
      function removeDuplicateRooms(roomArray) {
        var results = [];
        var lookup = {};
        var hashFunc = function(corner) {
          return corner.id 
        };
        var sep = '-';
        for (var i = 0; i < roomArray.length; i++) {
          // rooms are cycles, shift it around to check uniqueness
          var add = true;
          var room = roomArray[i];
          for (var j = 0; j < room.length; j++) {
            var roomShift = utils.cycle(room, j);
            var str = utils.map(roomShift, hashFunc).join(sep);
            if (lookup.hasOwnProperty(str)) {
              add = false;
            }
          }
          if (add) {
            results.push(roomArray[i]);
            lookup[str] = true;
          }
        }
        return results; 
      }
      
      function findTightestCycle(firstCorner, secondCorner) {
        var stack = [];
        var next = {
          corner: secondCorner,
          previousCorners: [firstCorner]
        };
        var visited = {};
        visited[firstCorner.id] = true;
    
        while ( next ) {  
          // update previous corners, current corner, and visited corners
          var currentCorner = next.corner;
          visited[currentCorner.id] = true; 
        
          // did we make it back to the startCorner?
          if ( next.corner === firstCorner && currentCorner !== secondCorner ) {
            return next.previousCorners;  
          }
          
          var addToStack = [];
          var adjacentCorners = next.corner.adjacentCorners();  
          for ( var i = 0; i < adjacentCorners.length; i++ ) {
            var nextCorner = adjacentCorners[i];
                
            // is this where we came from?
            // give an exception if its the first corner and we aren't at the second corner
            if ( nextCorner.id in visited &&  
              !( nextCorner === firstCorner && currentCorner !== secondCorner )) {
              continue;
            }
            
            // nope, throw it on the queue  
            addToStack.push( nextCorner );  
          }
        
          var previousCorners = next.previousCorners.slice(0);
          previousCorners.push( currentCorner );  
          if (addToStack.length > 1) {  
            // visit the ones with smallest theta first
            var previousCorner = next.previousCorners[next.previousCorners.length - 1];
            addToStack.sort(function(a,b) {
              return (calculateTheta(previousCorner, currentCorner, b) -
                  calculateTheta(previousCorner, currentCorner, a));
            });
          }
        
          if (addToStack.length > 0) {
            // add to the stack
            utils.forEach(addToStack, function(corner) {
              stack.push({
                corner: corner,
                previousCorners: previousCorners
              });   
            });
          }
        
          // pop off the next one
          next = stack.pop();
        }
        return [];  
      }
    
      // find tightest loops, for each corner, for each adjacent
      // TODO: optimize this, only check corners with > 2 adjacents, or isolated cycles
      var loops = [];
      for (var i = 0; i < corners.length; i++) {
        var firstCorner = corners[i];
        var adjacentCorners = firstCorner.adjacentCorners();
        for (var j = 0; j < adjacentCorners.length; j++) {
          var secondCorner = adjacentCorners[j];
          loops.push(findTightestCycle(firstCorner, secondCorner));
        }
      }
      // remove duplicates
      var uniqueLoops = removeDuplicateRooms(loops);
      //remove CW loops
      var uniqueCCWLoops = utils.removeIf(uniqueLoops, utils.isClockwise);
    
      //utils.forEach(uniqueCCWLoops, function(loop) {
      //  console.log("LOOP");
      //  utils.forEach(loop, function(corner) {
      //    console.log(corner.id);
      //  });
      //});
      return uniqueCCWLoops;
    }
    
    module.exports = Floorplan;
    
    },{"../utils/utils":29,"./corner":13,"./half_edge":15,"./room":17,"./wall":19,"jquery":1,"three":2}],15:[function(require,module,exports){
    var THREE = require('three')
    var JQUERY = require('jquery');
    
    var utils = require('../utils/utils')
    
    // HalfEdge's are created by Room
    // Once rooms have been identified, HalfEdge's
    // are created for each interior wall.
    // A wall can have two half edges if it is visible
    // from both sides.
    var HalfEdge = function(room, wall, front) {
    
      var scope = this;
    
      this.room = room; // the room this fall faces
      this.next;
      this.prev;
      this.front = front || false;
      this.wall = wall;
    
      // used for intersection testing... not convinced this belongs here
      this.plane = null;
    
      // transform from world coords to wall planes (z=0)
      this.interiorTransform = new THREE.Matrix4(); 
      this.invInteriorTransform = new THREE.Matrix4(); 
      this.exteriorTransform = new THREE.Matrix4();
      this.invExteriorTransform = new THREE.Matrix4();
    
      this.offset = wall.thickness / 2.0;
      this.distane = null;
      this.height = wall.height;
    
      this.redrawCallbacks = JQUERY.Callbacks();
    
      if (front) {
        wall.frontEdge = this;
      } else {
        wall.backEdge = this;
      }
    
      this.getTexture = function() {
        if (front) {
          return wall.frontTexture
        } else {
          return wall.backTexture
        }
      }
    
      this.setTexture = function(textureUrl, textureStretch, textureScale) {
        var texture = {
          url: textureUrl,
          stretch: textureStretch,
          scale: textureScale
        }
        if (front) {
          this.wall.frontTexture = texture;
        } else {
          this.wall.backTexture = texture;
        }
        this.redrawCallbacks.fire();
      }
    
      // this feels hacky, but need wall items
      this.generatePlane = function() {
    
        function transformCorner(corner) {
          return new THREE.Vector3(corner.x, 0, corner.y);
        }
    
        v1 = transformCorner(this.interiorStart());
        v2 = transformCorner(this.interiorEnd());
        v3 = v2.clone();
        v3.y = this.wall.height;
        v4 = v1.clone();
        v4.y = this.wall.height;
    
        var geometry = new THREE.Geometry();
        geometry.vertices = [v1, v2, v3, v4];
    
        geometry.faces.push(new THREE.Face3(0, 1, 2));
        geometry.faces.push(new THREE.Face3(0, 2, 3));
        geometry.computeFaceNormals();
        geometry.computeBoundingBox();
    
        this.plane = new THREE.Mesh(geometry,
          new THREE.MeshBasicMaterial());
        this.plane.visible = false;
        this.plane.edge = scope; // js monkey patch
    
        this.computeTransforms(
          this.interiorTransform, this.invInteriorTransform,
          this.interiorStart(), this.interiorEnd());
        this.computeTransforms(
          this.exteriorTransform, this.invExteriorTransform,
          this.exteriorStart(), this.exteriorEnd());
    
      }
    
      this.interiorDistance = function() {
        var start = this.interiorStart();
        var end = this.interiorEnd();
        return utils.distance(start.x, start.y, end.x, end.y);
      }
    
      this.computeTransforms = function(transform, invTransform, start, end) {
    
        var v1 = start;
        var v2 = end;
    
        var angle = utils.angle(1, 0, v2.x - v1.x, v2.y - v1.y);
    
        var tt = new THREE.Matrix4();
        tt.makeTranslation(-v1.x, 0, -v1.y);
        var tr = new THREE.Matrix4();
        tr.makeRotationY(-angle); 
        transform.multiplyMatrices( tr, tt );
        invTransform.getInverse(transform);
      }
    
      this.distanceTo = function(x, y) {
        // x, y, x1, y1, x2, y2
        return utils.pointDistanceFromLine(x, y,
          this.interiorStart().x,
          this.interiorStart().y,
          this.interiorEnd().x,
          this.interiorEnd().y); 
      }
    
      this.getStart = function() {
        if (this.front) {
          return this.wall.getStart();
        } else {
          return this.wall.getEnd();
        }
      }
    
      this.getEnd = function() {
        if (this.front) {
          return this.wall.getEnd();
        } else {
          return this.wall.getStart();
        }
      }
    
      this.getOppositeEdge = function() {
        if (this.front) {
          return this.wall.backEdge;
        } else {
          return this.wall.frontEdge;
        }
      }
    
      // these return an object with attributes x, y
      this.interiorEnd = function() {
        var vec = this.halfAngleVector(this, this.next);
        return {
          x: this.getEnd().x + vec.x,
          y: this.getEnd().y + vec.y
        }
      }
    
      this.interiorStart = function() {
        var vec = this.halfAngleVector(this.prev, this);
        return {
          x: this.getStart().x + vec.x,
          y: this.getStart().y + vec.y
        }
      }
    
      this.interiorCenter = function() {
        return {
          x: (this.interiorStart().x + this.interiorEnd().x) / 2.0,
          y: (this.interiorStart().y + this.interiorEnd().y) / 2.0,
        }
      }
    
      this.exteriorEnd = function() {
        var vec = this.halfAngleVector(this, this.next);
        return {
          x: this.getEnd().x - vec.x,
          y: this.getEnd().y - vec.y
        }
      }
    
      this.exteriorStart = function() {
        var vec = this.halfAngleVector(this.prev, this);
        return {
          x: this.getStart().x - vec.x,
          y: this.getStart().y - vec.y
        }
      }
    
      this.corners = function() {
        return [this.interiorStart(), this.interiorEnd(),
                this.exteriorEnd(), this.exteriorStart()];
      }
    
      // CCW angle from v1 to v2
      // v1 and v2 are HalfEdges
      this.halfAngleVector = function(v1, v2) {
        // make the best of things if we dont have prev or next
        if (!v1) {
          var v1startX = v2.getStart().x - (v2.getEnd().x - v2.getStart().x);
          var v1startY = v2.getStart().y - (v2.getEnd().y - v2.getStart().y);     
          var v1endX = v2.getStart().x;
          var v1endY = v2.getStart().y;
        } else {
          var v1startX = v1.getStart().x;
          var v1startY = v1.getStart().y;
          var v1endX = v1.getEnd().x;
          var v1endY = v1.getEnd().y;
        }
    
        if (!v2) {
          var v2startX = v1.getEnd().x;
          var v2startY = v1.getEnd().y;
          var v2endX = v1.getEnd().x + (v1.getEnd().x - v1.getStart().x);
          var v2endY = v1.getEnd().y + (v1.getEnd().y - v1.getStart().y); 
        } else {
          var v2startX = v2.getStart().x;
          var v2startY = v2.getStart().y;
          var v2endX = v2.getEnd().x;
          var v2endY = v2.getEnd().y;      
        }
    
        // CCW angle between edges
        var theta = utils.angle2pi(
          v1startX- v1endX,
          v1startY - v1endY,
          v2endX - v1endX,
          v2endY - v1endY);
    
        // cosine and sine of half angle
        var cs = Math.cos(theta / 2.0);
        var sn = Math.sin(theta / 2.0);
    
        // rotate v2
        var v2dx = v2endX - v2startX;
        var v2dy = v2endY - v2startY;
    
        var vx = v2dx * cs - v2dy * sn;
        var vy = v2dx * sn + v2dy * cs;
    
        // normalize
        var mag = utils.distance(0, 0, vx, vy);
        var desiredMag = (this.offset) / sn;
        var scalar = desiredMag / mag;
    
        var halfAngleVector = {
          x: vx * scalar,
          y: vy * scalar
        }
    
        return halfAngleVector;
      }
    
    }
    
    module.exports = HalfEdge;
    
    },{"../utils/utils":29,"jquery":1,"three":2}],16:[function(require,module,exports){
    var JQUERY = require('jquery');
    var THREE = require('three')
    
    var Floorplan = require('./floorplan');
    var Scene = require('./scene');
    
    var utils = require('../utils/utils')
    
    var Model = function(textureDir) {
      var scope = this;
    
      this.floorplan = new Floorplan();
      this.scene = new Scene(scope, textureDir);
    
      this.roomLoadingCallbacks = JQUERY.Callbacks();
      this.roomLoadedCallbacks = JQUERY.Callbacks(); // name
      this.roomSavedCallbacks = JQUERY.Callbacks(); // success (bool), copy (bool)
      this.roomDeletedCallbacks = JQUERY.Callbacks();
    
      this.loadSerialized = function(data_json) {
        // TODO: better documentation on serialization format.
        // TODO: a much better serialization format.
        this.roomLoadingCallbacks.fire();
    
        data = JSON.parse(data_json)
        scope.newRoom(
          data.floorplan,
          data.items
        );
    
        scope.roomLoadedCallbacks.fire();
      }
    
      this.exportSerialized = function() {
        var items_arr = [];
                var objects = this.scene.getItems();
                for (var i = 0; i < objects.length; i++) {
                    var object = objects[i];
                    items_arr[i] = {
                        item_name: object.metadata.itemName,
                        item_type: object.metadata.itemType,
                        model_url: object.metadata.modelUrl,
                        special_type:object.metadata.specific_type,
                        xpos: object.position.x,
                        ypos: object.position.y,
                        zpos: object.position.z,
                        rotation: object.rotation.y,
                        scale_x: object.scale.x,
                        scale_y: object.scale.y,
                        scale_z: object.scale.z,
                        fixed: object.fixed,
                        width:object.halfSize.x * 2.0,
                        height:object.halfSize.y * 2.0,
                        depth:object.halfSize.z * 2.0,
                        newAdd:object.metadata.newAdd,
          };
        }
    
        var room = {
          floorplan: (scope.floorplan.saveFloorplan()),
          items: items_arr
        };
    
        return JSON.stringify(room);
      }
    
      this.newRoom = function(floorplan, items) {
        this.scene.clearItems();
        this.floorplan.loadFloorplan(floorplan);
        utils.forEach(items, function(item) {
          position = new THREE.Vector3(
            item.xpos, item.ypos, item.zpos)    
          var metadata = {
            itemName: item.item_name,
            resizable: item.resizable,
            itemType: item.item_type,
            modelUrl: item.model_url,
            specific_type:item.special_type,
            newAdd:item.newAdd,
          }
          var scale = {
            x: item.scale_x,
            y: item.scale_y,
            z: item.scale_z
          }
          scope.scene.addItem( 
            item.item_type, 
            item.model_url, 
            metadata,
            position, 
            item.rotation,
            scale,
            item.fixed);
        });
      }
    }
    
    module.exports = Model;
    
    },{"../utils/utils":29,"./floorplan":14,"./scene":18,"jquery":1,"three":2}],17:[function(require,module,exports){
    var JQUERY = require('jquery');
    var THREE = require('three')
    
    var utils = require('../utils/utils')
    
    /*
    TODO
    var Vec2 = require('vec2')
    var segseg = require('segseg')
    var Polygon = require('polygon')
    */
    
    var HalfEdge = require('./half_edge')
    
    var Room = function(floorplan, corners) {
     
      var scope = this;
    
      // ordered CCW
      var floorplan = floorplan;
      this.corners = corners;
    
      this.interiorCorners = [];
      this.edgePointer = null;
      
      // floor plane for intersection testing
      this.floorPlane = null;
    
      this.customTexture = false;
    
      var defaultTexture = {
        url: "rooms/textures/hardwood.png",
        scale: 400
      }
    
      var floorChangeCallbacks = JQUERY.Callbacks();
    
      updateWalls();
      updateInteriorCorners();
      generatePlane();
    
      this.getUuid = function() {
        var cornerUuids = utils.map(this.corners, function(c) {
          return c.id;
        });
        cornerUuids.sort();
        return cornerUuids.join();
      }
    
      this.fireOnFloorChange = function(callback) {
        floorChangeCallbacks.add(callback);
      }
    
      this.getTexture = function() {
        var uuid = this.getUuid();
        var tex = floorplan.getFloorTexture(uuid);
        return tex || defaultTexture;
      }
    
      // textureStretch always true, just an argument for consistency with walls
      this.setTexture = function(textureUrl, textureStretch, textureScale) {
        var uuid = this.getUuid();
        floorplan.setFloorTexture(uuid, textureUrl, textureScale);
        floorChangeCallbacks.fire();
      }
    
      function generatePlane() {
        var points = [];
        utils.forEach( scope.interiorCorners, function(corner) {
            points.push(new THREE.Vector2(
              corner.x, 
              corner.y));
        });
        var shape = new THREE.Shape(points);
        var geometry = new THREE.ShapeGeometry(shape);
        scope.floorPlane = new THREE.Mesh(geometry,
          new THREE.MeshBasicMaterial({
            side: THREE.DoubleSide
          }));
        scope.floorPlane.visible = false;
        scope.floorPlane.rotation.set(Math.PI/2, 0, 0);
        scope.floorPlane.room = scope; // js monkey patch
      }
    
      function cycleIndex(ind) {
        if (ind < 0) {
          return ind += scope.corners.length;
        } else {
          return ind % scope.corners.length;
        }
      }
    
      function updateInteriorCorners() {
        var edge = scope.edgePointer;
        while (true) {
          scope.interiorCorners.push(edge.interiorStart());
          edge.generatePlane();
          if (edge.next === scope.edgePointer) {
            break;
          } else {
            edge = edge.next;
          }
        }
      }
    
      // populates each wall's half edge relating to this room
      // this creates a fancy doubly connected edge list (DCEL)
      function updateWalls() {
    
        var prevEdge = null;
        var firstEdge = null;
    
        for (i = 0; i < corners.length; i++) {
    
          var firstCorner = corners[i];
          var secondCorner = corners[(i + 1) % corners.length];
    
          // find if wall is heading in that direction
          var wallTo = firstCorner.wallTo(secondCorner);
          var wallFrom = firstCorner.wallFrom(secondCorner);
    
          if (wallTo) {
            var edge = new HalfEdge(scope, wallTo, true);
          } else if (wallFrom) {
            var edge = new HalfEdge(scope, wallFrom, false);
          } else {
            // something horrible has happened
            console.log("corners arent connected by a wall, uh oh");
          }
    
          if (i == 0) {
            firstEdge = edge;
          }  else {
            edge.prev = prevEdge;
            prevEdge.next = edge;
            if (i + 1 == corners.length) {
              firstEdge.prev = edge;
              edge.next = firstEdge;
            }
          }
          prevEdge = edge;
        }
    
        // hold on to an edge reference
        scope.edgePointer = firstEdge;
      }
    
    }
    
    module.exports = Room;
    
    },{"../utils/utils":29,"./half_edge":15,"jquery":1,"three":2}],18:[function(require,module,exports){
    var THREE = require('three')
    
    var JQUERY = require('jquery');
    
    var FloorItem = require('../items/floor_item');
    var InWallFloorItem = require('../items/in_wall_floor_item');
    var InWallItem = require('../items/in_wall_item');
    var Item = require('../items/item');
    var OnFloorItem = require('../items/on_floor_item');
    var WallFloorItem = require('../items/wall_floor_item');
    var WallItem = require('../items/wall_item');
    
    var utils = require('../utils/utils')
    
    
    var Scene = function(model, textureDir) {
      var scope = this;
      var model = model;
      var textureDir = textureDir;
    
      var scene = new THREE.Scene();
      var items = [];
    
      this.needsUpdate = false;
    
      // init item loader
      var loader = new THREE.JSONLoader();
      loader.crossOrigin = "";
      
      var item_types = {
        1: FloorItem,
        2: WallItem,
        3: InWallItem,
        7: InWallFloorItem,
        8: OnFloorItem,
        9: WallFloorItem
      };
    
      // init callbacks
      this.itemLoadingCallbacks = JQUERY.Callbacks(); 
      this.itemLoadedCallbacks = JQUERY.Callbacks(); // Item
      this.itemRemovedCallbacks = JQUERY.Callbacks(); // Item
    
      this.add = function(mesh) {
        // only use this for non-items
        scene.add(mesh);
      }
    
      this.remove = function(mesh) {
        // only use  this for non-items
        scene.remove(mesh);
        utils.removeValue(items, mesh);
      }
    
      this.getScene = function() {
        return scene;
      }
    
      this.getItems = function() {
        return items;
      }
    
      this.itemCount = function() {
        return items.length
      }
    
      this.clearItems = function() {
        items_copy = items
        utils.forEach(items, function(item) {
          scope.removeItem(item, true);
        });
        items = []
      }
    
      this.removeItem = function(item, dontRemove) {
        dontRemove = dontRemove || false;
        // use this for item meshes
        this.itemRemovedCallbacks.fire(item);
        item.removed();
        scene.remove(item);
        if (!dontRemove) {
          utils.removeValue(items, item);
        }
      }
    
      this.addItem = function(itemType, fileName, metadata, position, rotation, scale, fixed) {
        itemType = itemType || 1;
    
        var loaderCallback = function(geometry, materials) {
          var item = new item_types[itemType](
            model,
            metadata, geometry,
            new THREE.MeshFaceMaterial(materials),
            position, rotation, scale
          );
          item.fixed = fixed || false;
          items.push(item);
          scope.add(item);
          item.initObject();
          scope.itemLoadedCallbacks.fire(item);
        }
    
        scope.itemLoadingCallbacks.fire();
        loader.load(
          fileName,
          loaderCallback,
          textureDir
        );
      }
    }
    
    module.exports = Scene;
    
    },{"../items/floor_item":6,"../items/in_wall_floor_item":7,"../items/in_wall_item":8,"../items/item":9,"../items/on_floor_item":10,"../items/wall_floor_item":11,"../items/wall_item":12,"../utils/utils":29,"jquery":1,"three":2}],19:[function(require,module,exports){
    var JQUERY = require('jquery');
    var utils = require('../utils/utils')
    
    // start and end are Corner objects
    var Wall = function(start, end) {
    
      this.id = getUuid();
    
      var scope = this;
      
      var start = start;
      var end = end;
    
      this.thickness = 10;
      this.height = 250;
    
      // front is the plane from start to end
      // these are of type HalfEdge
      this.frontEdge = null;
      this.backEdge = null;
      this.orphan = false;
    
      // items attached to this wall
      this.items = [];
      this.onItems = [];
    
      var moved_callbacks = JQUERY.Callbacks();
      var deleted_callbacks = JQUERY.Callbacks();
      var action_callbacks = JQUERY.Callbacks();
    
      var defaultTexture =  {
        url: "rooms/textures/wallmap.png",
        stretch: true,
        scale: 0
      }
      this.frontTexture = defaultTexture;
      this.backTexture = defaultTexture;
    
      start.attachStart(this)
      end.attachEnd(this);
    
      function getUuid() {
        return [start.id, end.id].join();
      }
    
      this.resetFrontBack = function(func) {
        this.frontEdge = null;
        this.backEdge = null; 
        this.orphan = false;
      }
    
      this.snapToAxis = function(tolerance) {
        // order here is important, but unfortunately arbitrary
        start.snapToAxis(tolerance);
        end.snapToAxis(tolerance);
      }
    
      this.fireOnMove = function(func) {
        moved_callbacks.add(func);
      }
    
      this.fireOnDelete = function(func) {
        deleted_callbacks.add(func);
      }
    
      this.dontFireOnDelete = function(func) {
        deleted_callbacks.remove(func);
      }
    
      this.fireOnAction = function(func) {
        action_callbacks.add(func)
      }
    
      this.fireAction = function(action) {
        action_callbacks.fire(action)
      }
    
      this.getStart = function() {
        return start;
      }
    
      this.relativeMove = function(dx, dy) {
        start.relativeMove(dx, dy);
        end.relativeMove(dx, dy);
      }
    
      this.fireMoved = function() {
        moved_callbacks.fire();
      }
    
      this.fireRedraw = function() {
        if (scope.frontEdge) {
          scope.frontEdge.redrawCallbacks.fire();
        }
        if (scope.backEdge) {
          scope.backEdge.redrawCallbacks.fire();
        }
      }
    
      this.getEnd = function() {
        return end;
      }
    
      this.getStartX = function() {
        return start.getX();
      }
    
      this.getEndX = function() {
        return end.getX();
      }
    
      this.getStartY = function() {
        return start.getY();
      }
    
      this.getEndY = function() {
        return end.getY();
      }
    
      this.remove = function() {
        start.detachWall(this);
        end.detachWall(this);
        deleted_callbacks.fire(this);
      }
    
      this.setStart = function(corner) {
        start.detachWall(this);
        corner.attachStart(this);
        start = corner;
        this.fireMoved();
      }
    
      this.setEnd = function(corner) {
        end.detachWall(this);
        corner.attachEnd(this);
        end = corner;
        this.fireMoved();
      }
    
      this.distanceFrom = function(x, y) {
        return utils.pointDistanceFromLine(x, y, 
          this.getStartX(), this.getStartY(), 
          this.getEndX(), this.getEndY());
      }
    
      // return the corner opposite of the one provided
      this.oppositeCorner = function( corner ) {
        if ( start === corner ) {
          return end;
        } else if ( end === corner ) {
          return start;
        } else {
          console.log('Wall does not connect to corner');
        }
      }
    
    }
    
    module.exports = Wall;
    
    },{"../utils/utils":29,"jquery":1}],20:[function(require,module,exports){
    var JQUERY = require('jquery');
    var THREE = require('three')
    var utils = require('../utils/utils')
    
    var ThreeController = function(three, model, camera, element, controls, hud) {
    
      var scope = this;
    
      this.enabled = true;
    
      var three = three;
      var model = model;
      var scene = model.scene;
      var element = element;
      var camera = camera;
      var controls = controls;
      var hud = hud;
    
      var plane; // ground plane used for intersection testing
    
      var mouse;
      var intersectedObject;
      var mouseoverObject;
      var selectedObject;
    
      var mouseDown = false;
      var mouseMoved = false; // has mouse moved since down click
    
      var rotateMouseOver = false;
    
      var states = {
        UNSELECTED: 0, // no object selected
        SELECTED: 1, // selected but inactive
        DRAGGING: 2, // performing an action while mouse depressed
        ROTATING: 3,  // rotating with mouse down
        ROTATING_FREE: 4, // rotating with mouse up
        PANNING: 5
      };
      var state = states.UNSELECTED;
    
      this.needsUpdate = true;
    
      function init() {
        element.mousedown( mouseDownEvent );
        element.mouseup( mouseUpEvent );
        element.mousemove( mouseMoveEvent );
    
        mouse = new THREE.Vector2();
    
        scene.itemRemovedCallbacks.add(itemRemoved);
        scene.itemLoadedCallbacks.add(itemLoaded);
        setGroundPlane();
      }
    
      // invoked via callback when item is loaded
      function itemLoaded(item) {
        if (!item.position_set) {
            scope.setSelectedObject(item);
            switchState(states.DRAGGING);  
            var pos = item.position.clone();
            pos.y = 0;   
            var vec = three.projectVector(pos); 
            clickPressed(vec); 
        }
        item.position_set = true;
      }
    
      function clickPressed(vec2) {
        vec2 = vec2 || mouse;
        var intersection = scope.itemIntersection(mouse, selectedObject);
        if (intersection) {
          selectedObject.clickPressed(intersection);
        }
      }
    
      function clickDragged(vec2) {
        vec2 = vec2 || mouse;
        var intersection = scope.itemIntersection(mouse, selectedObject);
        if (intersection) {
          if (scope.isRotating()) {
            selectedObject.rotate(intersection);        
          } else {
            selectedObject.clickDragged(intersection);                
          }
        }
      }
    
      function itemRemoved(item) {
        // invoked as a callback to event in Scene
        if (item === selectedObject) {
          selectedObject.setUnselected();
          selectedObject.mouseOff();  
          scope.setSelectedObject(null);  
        }
      }
    
      function setGroundPlane() {
        // ground plane used to find intersections
        var size = 10000;
        plane = new THREE.Mesh( 
          new THREE.PlaneGeometry(size, size), 
          new THREE.MeshBasicMaterial());
        plane.rotation.x = -Math.PI/2;
        plane.visible = false;
        scene.add(plane);
      }
    
      function checkWallsAndFloors(event) {
    
        // double click on a wall or floor brings up texture change modal
        if (state == states.UNSELECTED && mouseoverObject == null) {
          // check walls
          var wallEdgePlanes = model.floorplan.wallEdgePlanes();
          var wallIntersects = scope.getIntersections(
              mouse, wallEdgePlanes, true);
          if (wallIntersects.length > 0) {
            var wall = wallIntersects[0].object.edge;
            three.wallClicked.fire(wall);
            return;
          } 
    
          // check floors
          var floorPlanes = model.floorplan.floorPlanes();
          var floorIntersects = scope.getIntersections(
              mouse, floorPlanes, false);
          if (floorIntersects.length > 0) {
            var room = floorIntersects[0].object.room;
            three.floorClicked.fire(room);
            return;
          }
    
          three.nothingClicked.fire();
        }
      
      }
    
      function mouseMoveEvent(event) {
        if (scope.enabled) {
          event.preventDefault();
    
          mouseMoved = true;
    
          mouse.x = event.clientX;
          mouse.y = event.clientY;
    
          if (!mouseDown) {
            updateIntersections();        
          }
    
          switch(state) {
            case states.UNSELECTED:
              updateMouseover();
              break;
            case states.SELECTED:
              updateMouseover();
              break;
            case states.DRAGGING:
            case states.ROTATING:
            case states.ROTATING_FREE:
              clickDragged();
              hud.update();
              scope.needsUpdate = true;
              break;
          }      
        }
      }
    
      this.isRotating = function() {
        return (state == states.ROTATING || state == states.ROTATING_FREE);
      }
    
      function mouseDownEvent( event ) {
        if (scope.enabled) {
          event.preventDefault();
    
          mouseMoved = false;
          mouseDown = true;
    
          switch(state) {
            case states.SELECTED:
              if (rotateMouseOver) {
                switchState(states.ROTATING);
              } else if (intersectedObject != null) {
                scope.setSelectedObject(intersectedObject);
                if (!intersectedObject.fixed) {
                  switchState(states.DRAGGING);              
                }
              }
              break;
            case states.UNSELECTED:
              if (intersectedObject != null) {
                scope.setSelectedObject(intersectedObject);
                if (!intersectedObject.fixed) {
                  switchState(states.DRAGGING);
                }
              } 
              break;
            case states.DRAGGING:
            case states.ROTATING:
              break;
            case states.ROTATING_FREE:
                switchState(states.SELECTED);
              break;
          }
        }
      }
    
      function mouseUpEvent( event ) {
        if (scope.enabled) {
          mouseDown = false;
    
          switch(state) {
            case states.DRAGGING:
              selectedObject.clickReleased();
              switchState(states.SELECTED);
              break;
            case states.ROTATING:
              if (!mouseMoved) {
                switchState(states.ROTATING_FREE);
              } else {
                switchState(states.SELECTED);
              }
              break;
            case states.UNSELECTED:
              if (!mouseMoved) {
                checkWallsAndFloors();
              }
              break;
            case states.SELECTED:
              if (intersectedObject == null && !mouseMoved) {
                switchState(states.UNSELECTED);
                checkWallsAndFloors();
              }
              break;
            case states.ROTATING_FREE:
              break;
          }
        }
      }
    
      function switchState( newState ) {
        if (newState != state) {
          onExit(state);
          onEntry(newState);
        }
        state = newState;
        hud.setRotating(scope.isRotating());
      }
    
      function onEntry(state) {
        switch(state) {
          case states.UNSELECTED:
            scope.setSelectedObject( null );
          case states.SELECTED:
            controls.enabled = true;
            break;
          case states.ROTATING:
          case states.ROTATING_FREE:
            controls.enabled = false;
            break;
          case states.DRAGGING:
            three.setCursorStyle("move");
            clickPressed();
            controls.enabled = false;
            break;
        }
      }
    
      function onExit(state) {
        switch(state) {
          case states.UNSELECTED:
          case states.SELECTED:
            break;
          case states.DRAGGING:
            if (mouseoverObject) {
              three.setCursorStyle("pointer");
            } else {
              three.setCursorStyle("auto");
            }
            break;
          case states.ROTATING:
          case states.ROTATING_FREE:
            break;
        }
      }
    
      this.selectedObject = function() {
        return selectedObject;
      }
    
      // updates the vector of the intersection with the plane of a given
      // mouse position, and the intersected object
      // both may be set to null if no intersection found
      function updateIntersections() {
    
        // check the rotate arrow
        var hudObject = hud.getObject();
        if (hudObject != null) {
          var hudIntersects = scope.getIntersections(
            mouse,
            hudObject,
            false, false, true);
          if (hudIntersects.length > 0) {
            rotateMouseOver = true;
            hud.setMouseover(true);
            intersectedObject = null;
            return;
          } 
        }
        rotateMouseOver = false;
        hud.setMouseover(false);
    
        // check objects
        var items = model.scene.getItems();
        /*items = utils.removeIf(items, function(item) {
          var remove = item.fixed && !three.options().canMoveFixedItems;
          //alert("remove!");
          return remove;
        });*/
        var intersects = scope.getIntersections(
          mouse, 
          items,
          false, true);
    
        if (intersects.length > 0) {
          intersectedObject = intersects[0].object;
        } else {
          intersectedObject = null;
        }
      }
    
      // sets coords to -1 to 1
      function normalizeVector2(vec2) {
         var retVec = new THREE.Vector2();
         retVec.x = ((vec2.x - three.widthMargin) / (window.innerWidth - three.widthMargin)) * 2 - 1;
         retVec.y = -((vec2.y - three.heightMargin) / (window.innerHeight - three.heightMargin)) * 2 + 1;
         return retVec;
      }
    
      //
      function mouseToVec3(vec2) {
        normVec2 = normalizeVector2(vec2)
        var vector = new THREE.Vector3(
          normVec2.x, normVec2.y, 0.5);
        vector.unproject(camera);
        return vector;
      }
    
      // returns the first intersection object
      this.itemIntersection = function(vec2, item) {
        var customIntersections = item.customIntersectionPlanes();
        var intersections = null;
        if (customIntersections && customIntersections.length > 0) {
          intersections = this.getIntersections(vec2, customIntersections, true);
        } else {
          intersections = this.getIntersections(vec2, plane);
        }
        if (intersections.length > 0) {
            return intersections[0];
        } else {
            return null;
        }
      }
    
      // filter by normals will only return objects facing the camera
      // objects can be an array of objects or a single object
      this.getIntersections = function(vec2, objects, filterByNormals, onlyVisible, recursive, linePrecision ) {
    
        var vector = mouseToVec3(vec2);
    
        onlyVisible = onlyVisible || false;
        filterByNormals = filterByNormals || false;
        recursive = recursive || false;
        linePrecision = linePrecision || 20;
    
    
        var direction = vector.sub( camera.position ).normalize();
        var raycaster = new THREE.Raycaster(
            camera.position,
            direction);
        raycaster.linePrecision = linePrecision;
        var intersections;
        if (objects instanceof Array){
          intersections = raycaster.intersectObjects(objects, recursive);
        } else {
          intersections = raycaster.intersectObject(objects, recursive);
        }
        // filter by visible, if true
        if (onlyVisible) {
          intersections = utils.removeIf(intersections, function(intersection) {
            return !intersection.object.visible;
          });
        }
    
        // filter by normals, if true
        if (filterByNormals) {
          intersections = utils.removeIf(intersections, function(intersection) {
            var dot = intersection.face.normal.dot(direction);
            return (dot > 0)
          });
        } 
        return intersections;
      }
    
      // manage the selected object
      this.setSelectedObject = function( object ) {
        if (state === states.UNSELECTED) {
          switchState(states.SELECTED);
        }
        if ( selectedObject != null ) {
          selectedObject.setUnselected();
        }
        if ( object != null ) {
          selectedObject = object;
          selectedObject.setSelected();
          three.itemSelectedCallbacks.fire(object);
        } else {
          selectedObject = null;
          three.itemUnselectedCallbacks.fire();
        }
        this.needsUpdate = true;
      }
    
      // TODO: there MUST be simpler logic for expressing this
      function updateMouseover() {
        if ( intersectedObject != null ) {
          if ( mouseoverObject != null ) {
            if ( mouseoverObject !== intersectedObject ) {
              mouseoverObject.mouseOff();
              mouseoverObject = intersectedObject;
              mouseoverObject.mouseOver();
              scope.needsUpdate = true;
            } else {
              // do nothing, mouseover already set
            }
          } else {
            mouseoverObject = intersectedObject;
            mouseoverObject.mouseOver();
            three.setCursorStyle("pointer");
            scope.needsUpdate = true;
          }
        } else if (mouseoverObject != null) {
          mouseoverObject.mouseOff();
          three.setCursorStyle("auto");
          mouseoverObject = null;
          scope.needsUpdate = true;
        }
      }
    
      init();
    }
    
    module.exports = ThreeController;
    
    },{"../utils/utils":29,"jquery":1,"three":2}],21:[function(require,module,exports){
    /**
    This file is a modified version of THREE.OrbitControls
    Contributors:
     * @author qiao / https://github.com/qiao
     * @author mrdoob / http://mrdoob.com
     * @author alteredq / http://alteredqualia.com/
     * @author WestLangley / http://github.com/WestLangley
     * @author erich666 / http://erichaines.com
     */
    
    var JQUERY = require('jquery');
    var THREE = require('three')
    
    var ThreeControls = function (object, domElement) {
    
        this.object = object;
        this.domElement = (domElement !== undefined) ? domElement : document;
    
        // Set to false to disable this control
        this.enabled = true;
    
        // "target" sets the location of focus, where the control orbits around
        // and where it pans with respect to.
        this.target = new THREE.Vector3();
        // center is old, deprecated; use "target" instead
        this.center = this.target;
    
        // This option actually enables dollying in and out; left as "zoom" for
        // backwards compatibility
        this.noZoom = false;
        this.zoomSpeed = 1.0;
        // Limits to how far you can dolly in and out
        this.minDistance = 0;
        this.maxDistance = 1500; //Infinity;
    
        // Set to true to disable this control
        this.noRotate = false;
        this.rotateSpeed = 1.0;
    
        // Set to true to disable this control
        this.noPan = false;
        this.keyPanSpeed = 40.0;	// pixels moved per arrow key push
    
        // Set to true to automatically rotate around the target
        this.autoRotate = false;
        this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60
    
        // How far you can orbit vertically, upper and lower limits.
        // Range is 0 to Math.PI radians.
        this.minPolarAngle = 0; // radians
        this.maxPolarAngle = Math.PI/2; // radians
    
        // Set to true to disable use of the keys
        this.noKeys = false;
        // The four arrow keys
        this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };
    
        this.cameraMovedCallbacks = JQUERY.Callbacks();
    
        this.needsUpdate = true;
    
        // internals
    
        var scope = this;
    
        var EPS = 0.000001;
    
        var rotateStart = new THREE.Vector2();
        var rotateEnd = new THREE.Vector2();
        var rotateDelta = new THREE.Vector2();
    
        var panStart = new THREE.Vector2();
        var panEnd = new THREE.Vector2();
        var panDelta = new THREE.Vector2();
    
        var dollyStart = new THREE.Vector2();
        var dollyEnd = new THREE.Vector2();
        var dollyDelta = new THREE.Vector2();
    
        var phiDelta = 0;
        var thetaDelta = 0;
        var scale = 1;
        var pan = new THREE.Vector3();
    
        var STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };
        var state = STATE.NONE;
    
        this.controlsActive = function() {
            return (state === STATE.NONE);
        }
    
      this.setPan = function( vec3 ) {
          pan = vec3;
      };
    
      this.panTo = function(vec3) {
          var newTarget = new THREE.Vector3(vec3.x, scope.target.y, vec3.z);
          var delta = scope.target.clone().sub(newTarget);
          pan.sub(delta);
          scope.update();
      };
    
        this.rotateLeft = function ( angle ) {
            if ( angle === undefined ) {
                angle = getAutoRotationAngle();
            }
            thetaDelta -= angle;
        };
    
        this.rotateUp = function ( angle ) {
            if ( angle === undefined ) {
                angle = getAutoRotationAngle();
            }
            phiDelta -= angle;
        };
    
        // pass in distance in world space to move left
        this.panLeft = function ( distance ) {
    
            var panOffset = new THREE.Vector3();
            var te = this.object.matrix.elements;
            // get X column of matrix
            panOffset.set( te[0], 0, te[2] );
            panOffset.normalize();
    
            panOffset.multiplyScalar(-distance);
            
            pan.add( panOffset );
    
        };
    
        // pass in distance in world space to move up
        this.panUp = function ( distance ) {
    
            var panOffset = new THREE.Vector3();
            var te = this.object.matrix.elements;
            // get Y column of matrix
            panOffset.set( te[4], 0, te[6] );
            panOffset.normalize();
            panOffset.multiplyScalar(distance);
            
            pan.add( panOffset );
        };
        
        // main entry point; pass in Vector2 of change desired in pixel space,
        // right and down are positive
        this.pan = function ( delta ) {
    
            var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
    
            if ( scope.object.fov !== undefined ) {
    
                // perspective
                var position = scope.object.position;
                var offset = position.clone().sub( scope.target );
                var targetDistance = offset.length();
    
                // half of the fov is center to top of screen
                targetDistance *= Math.tan( (scope.object.fov/2) * Math.PI / 180.0 );
                // we actually don't use screenWidth, since perspective camera is fixed to screen height
                scope.panLeft( 2 * delta.x * targetDistance / element.clientHeight );
                scope.panUp( 2 * delta.y * targetDistance / element.clientHeight );
            } else if ( scope.object.top !== undefined ) {
    
                // orthographic
                scope.panLeft( delta.x * (scope.object.right - scope.object.left) / element.clientWidth );
                scope.panUp( delta.y * (scope.object.top - scope.object.bottom) / element.clientHeight );
            } else {
    
                // camera neither orthographic or perspective - warn user
                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
            }
    
            scope.update()
        };
    
        this.panXY = function(x, y) {
            scope.pan(new THREE.Vector2(x, y));
        }
    
        this.dollyIn = function ( dollyScale ) {
            if ( dollyScale === undefined ) {
                dollyScale = getZoomScale();
            }
    
            scale /= dollyScale;
        };
    
        this.dollyOut = function ( dollyScale ) {
            if ( dollyScale === undefined ) {
                dollyScale = getZoomScale();
            }
    
            scale *= dollyScale;
        };
    
        this.update = function () {
            var position = this.object.position;
            var offset = position.clone().sub( this.target );
    
            // angle from z-axis around y-axis
            var theta = Math.atan2( offset.x, offset.z );
    
            // angle from y-axis
            var phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );
    
            if ( this.autoRotate ) {
                this.rotateLeft( getAutoRotationAngle() );
            }
    
            theta += thetaDelta;
            phi += phiDelta;
    
            // restrict phi to be between desired limits
            phi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );
    
            // restrict phi to be betwee EPS and PI-EPS
            phi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );
    
            var radius = offset.length() * scale;
    
            // restrict radius to be between desired limits
            radius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );
            
            // move target to panned location
            this.target.add( pan );
    
            offset.x = radius * Math.sin( phi ) * Math.sin( theta );
            offset.y = radius * Math.cos( phi );
            offset.z = radius * Math.sin( phi ) * Math.cos( theta );
    
            position.copy( this.target ).add( offset );
    
            this.object.lookAt( this.target );
    
            thetaDelta = 0;
            phiDelta = 0;
            scale = 1;
            pan.set(0,0,0);
    
            this.cameraMovedCallbacks.fire();
            this.needsUpdate = true;
        };
    
        function getAutoRotationAngle() {
            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
        }
    
        function getZoomScale() {
            return Math.pow( 0.95, scope.zoomSpeed );
        }
    
        function onMouseDown( event ) {
    
            if ( scope.enabled === false ) { return; }
            event.preventDefault();
    
            if ( event.button === 0 ) {
                if ( scope.noRotate === true ) { return; }
    
                state = STATE.ROTATE;
    
                rotateStart.set( event.clientX, event.clientY );
    
            } else if ( event.button === 1 ) {
                if ( scope.noZoom === true ) { return; }
    
                state = STATE.DOLLY;
    
                dollyStart.set( event.clientX, event.clientY );
    
            } else if ( event.button === 2 ) {
                if ( scope.noPan === true ) { return; }
    
                state = STATE.PAN;
    
                panStart.set( event.clientX, event.clientY );
            }
    
            // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be
            scope.domElement.addEventListener( 'mousemove', onMouseMove, false );
            scope.domElement.addEventListener( 'mouseup', onMouseUp, false );
    
        }
    
        function onMouseMove( event ) {
    
            if ( scope.enabled === false ) return;
    
            event.preventDefault();
    
            var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
    
            if ( state === STATE.ROTATE ) {
    
                if ( scope.noRotate === true ) return;
    
                rotateEnd.set( event.clientX, event.clientY );
                rotateDelta.subVectors( rotateEnd, rotateStart );
    
                // rotating across whole screen goes 360 degrees around
                scope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );
                // rotating up and down along whole screen attempts to go 360, but limited to 180
                scope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );
    
                rotateStart.copy( rotateEnd );
    
            } else if ( state === STATE.DOLLY ) {
    
                if ( scope.noZoom === true ) return;
    
                dollyEnd.set( event.clientX, event.clientY );
                dollyDelta.subVectors( dollyEnd, dollyStart );
    
                if ( dollyDelta.y > 0 ) {
    
                    scope.dollyIn();
    
                } else {
    
                    scope.dollyOut();
    
                }
    
                dollyStart.copy( dollyEnd );
    
            } else if ( state === STATE.PAN ) {
    
                if ( scope.noPan === true ) return;
    
                panEnd.set( event.clientX, event.clientY );
                panDelta.subVectors( panEnd, panStart );
                
                scope.pan( panDelta );
    
                panStart.copy( panEnd );
            }
    
            // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be
            scope.update();
        }
    
        function onMouseUp( /* event */ ) {
            if ( scope.enabled === false ) return;
    
            // Greggman fix: https://github.com/greggman/three.js/commit/fde9f9917d6d8381f06bf22cdff766029d1761be
            scope.domElement.removeEventListener( 'mousemove', onMouseMove, false );
            scope.domElement.removeEventListener( 'mouseup', onMouseUp, false );
    
            state = STATE.NONE;
        }
    
        function onMouseWheel( event ) {
            if ( scope.enabled === false || scope.noZoom === true ) return;
    
            var delta = 0;
    
            if ( event.wheelDelta ) { // WebKit / Opera / Explorer 9
                delta = event.wheelDelta;
            } else if ( event.detail ) { // Firefox
                delta = - event.detail;
            }
    
            if ( delta > 0 ) {
                scope.dollyOut();
    
            } else {
    
                scope.dollyIn();
            }
        scope.update();
        }
    
        function onKeyDown( event ) {
    
            if ( scope.enabled === false ) { return; }
            if ( scope.noKeys === true ) { return; }
            if ( scope.noPan === true ) { return; }
        
            switch ( event.keyCode ) {
    
                case scope.keys.UP:
                    scope.pan( new THREE.Vector2( 0, scope.keyPanSpeed ) );
                    break;
                case scope.keys.BOTTOM:
                    scope.pan( new THREE.Vector2( 0, -scope.keyPanSpeed ) );
                    break;
                case scope.keys.LEFT:
                    scope.pan( new THREE.Vector2( scope.keyPanSpeed, 0 ) );
                    break;
                case scope.keys.RIGHT:
                    scope.pan( new THREE.Vector2( -scope.keyPanSpeed, 0 ) );
                    break;
            }
    
        }
        
        function touchstart( event ) {
    
            if ( scope.enabled === false ) { return; }
    
            switch ( event.touches.length ) {
    
                case 1:	// one-fingered touch: rotate
                    if ( scope.noRotate === true ) { return; }
    
                    state = STATE.TOUCH_ROTATE;
    
                    rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
                    break;
    
                case 2:	// two-fingered touch: dolly
                    if ( scope.noZoom === true ) { return; }
    
                    state = STATE.TOUCH_DOLLY;
    
                    var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
                    var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
                    var distance = Math.sqrt( dx * dx + dy * dy );
                    dollyStart.set( 0, distance );
                    break;
    
                case 3: // three-fingered touch: pan
                    if ( scope.noPan === true ) { return; }
    
                    state = STATE.TOUCH_PAN;
    
                    panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
                    break;
    
                default:
                    state = STATE.NONE;
    
            }
        }
    
        function touchmove( event ) {
    
            if ( scope.enabled === false ) { return; }
    
            event.preventDefault();
            event.stopPropagation();
    
            var element = scope.domElement === document ? scope.domElement.body : scope.domElement;
    
            switch ( event.touches.length ) {
    
                case 1: // one-fingered touch: rotate
                    if ( scope.noRotate === true ) { return; }
                    if ( state !== STATE.TOUCH_ROTATE ) { return; }
    
                    rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
                    rotateDelta.subVectors( rotateEnd, rotateStart );
    
                    // rotating across whole screen goes 360 degrees around
                    scope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );
                    // rotating up and down along whole screen attempts to go 360, but limited to 180
                    scope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );
    
                    rotateStart.copy( rotateEnd );
                    break;
    
                case 2: // two-fingered touch: dolly
                    if ( scope.noZoom === true ) { return; }
                    if ( state !== STATE.TOUCH_DOLLY ) { return; }
    
                    var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
                    var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
                    var distance = Math.sqrt( dx * dx + dy * dy );
    
                    dollyEnd.set( 0, distance );
                    dollyDelta.subVectors( dollyEnd, dollyStart );
    
                    if ( dollyDelta.y > 0 ) {
                        scope.dollyOut();
                    } else {
                        scope.dollyIn();
                    }
    
                    dollyStart.copy( dollyEnd );
                    break;
    
                case 3: // three-fingered touch: pan
                    if ( scope.noPan === true ) { return; }
                    if ( state !== STATE.TOUCH_PAN ) { return; }
    
                    panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
                    panDelta.subVectors( panEnd, panStart );
                    
                    scope.pan( panDelta );
    
                    panStart.copy( panEnd );
                    break;
    
                default:
                    state = STATE.NONE;
            }
        }
    
        function touchend( /* event */ ) {
            if ( scope.enabled === false ) { 
                return; 
            }
            state = STATE.NONE;
        }
    
        this.domElement.addEventListener( 'contextmenu', function ( event ) { event.preventDefault(); }, false );
        this.domElement.addEventListener( 'mousedown', onMouseDown, false );
        this.domElement.addEventListener( 'mousewheel', onMouseWheel, false );
        this.domElement.addEventListener( 'DOMMouseScroll', onMouseWheel, false ); // firefox
        this.domElement.addEventListener( 'touchstart', touchstart, false );
        this.domElement.addEventListener( 'touchend', touchend, false );
        this.domElement.addEventListener( 'touchmove', touchmove, false );
    
        window.addEventListener( 'keydown', onKeyDown, false );
    };
    
    module.exports = ThreeControls;
    
    },{"jquery":1,"three":2}],22:[function(require,module,exports){
    var THREE = require('three')
    var utils = require('../utils/utils')
    
    var ThreeEdge = function(scene, edge, controls) {
      var scope = this;
      var scene = scene;
      var edge = edge;
      var controls = controls;
      var wall = edge.wall;
      var front = edge.front;
    
      var planes = [];
      var basePlanes = []; // always visible
      var texture = null;
      
      var lightMap = THREE.ImageUtils.loadTexture("rooms/textures/walllightmap.png");
      var fillerColor = 0xdddddd;
      var sideColor = 0xcccccc;
      var baseColor = 0xdddddd;
    
      this.visible = false;
    
      this.remove = function() {
        edge.redrawCallbacks.remove(redraw);
        controls.cameraMovedCallbacks.remove(updateVisibility);
        removeFromScene();
      }
    
      function init() {
        edge.redrawCallbacks.add(redraw);
        controls.cameraMovedCallbacks.add(updateVisibility);
        updateTexture();
        updatePlanes();
        addToScene();
      }
    
      function redraw() {
        removeFromScene();
        updateTexture();
        updatePlanes();
        addToScene();
      }
    
      function removeFromScene() {
        utils.forEach(planes, function(plane) {
          scene.remove(plane);
        });
        utils.forEach(basePlanes, function(plane) {
          scene.remove(plane);
        });
        planes = [];
        basePlanes = [];
      }
    
      function addToScene() {
        utils.forEach(planes, function(plane) {
          scene.add(plane);
        });
        utils.forEach(basePlanes, function(plane) {
          scene.add(plane);
        });
        updateVisibility();
      }
    
      function updateVisibility() {
        // finds the normal from the specified edge
        var start = edge.interiorStart();
        var end = edge.interiorEnd();
        var x = end.x - start.x;
        var y = end.y - start.y;
        // rotate 90 degrees CCW
        var normal = new THREE.Vector3(-y, 0, x);
        normal.normalize();
    
        // setup camera
        var position = controls.object.position.clone();
        var focus = new THREE.Vector3(
          (start.x + end.x) / 2.0,
          0,
          (start.y + end.y) / 2.0);
        var direction = position.sub(focus).normalize();
    
        // find dot
        var dot = normal.dot(direction);
    
        // update visible
        scope.visible = (dot >= 0);
    
        // show or hide plans
        utils.forEach(planes, function(plane) { 
          plane.visible = scope.visible;
        });
    
        updateObjectVisibility();
      }
    
      function updateObjectVisibility() {
        utils.forEach(wall.items, function(item) {
          item.updateEdgeVisibility(scope.visible, front);
        });
        utils.forEach(wall.onItems, function(item) {
          item.updateEdgeVisibility(scope.visible, front);
        });
      } 
    
    
      function updateTexture(callback) {
        // callback is fired when texture loads
        callback = callback || function() {
          scene.needsUpdate = true;
        }
        var textureData = edge.getTexture();
        var stretch = textureData.stretch;
        var url = textureData.url;
        var scale = textureData.scale;
        texture = THREE.ImageUtils.loadTexture(url, null, callback);
        if (!stretch) {
          var height = wall.height;
          var width = edge.interiorDistance(); 
          texture.wrapT = THREE.RepeatWrapping;
          texture.wrapS = THREE.RepeatWrapping;
          texture.repeat.set(width/scale, height/scale);
          texture.needsUpdate = true;
        }
      }
    
      function updatePlanes() {
        var wallMaterial = new THREE.MeshBasicMaterial({
          color: 0xffffff,
          ambientColor: 0xffffff,
          //ambient: scope.wall.color,
          side: THREE.FrontSide,
          map: texture,
          lightMap: lightMap
        });
        
        var fillerMaterial = new THREE.MeshBasicMaterial({
          color: fillerColor,
          side: THREE.DoubleSide
        });  
    
        // exterior plane
        planes.push(makeWall(
          edge.exteriorStart(), 
          edge.exteriorEnd(),
          edge.exteriorTransform,
          edge.invExteriorTransform,
          fillerMaterial));
    
        // interior plane
        planes.push(makeWall(
          edge.interiorStart(), 
          edge.interiorEnd(),
          edge.interiorTransform,
          edge.invInteriorTransform,
          wallMaterial));
    
        // bottom
        // put into basePlanes since this is always visible
        basePlanes.push(buildFiller(
          edge, 0, 
          THREE.BackSide, baseColor)); 
    
        // top
        planes.push(buildFiller(
          edge, wall.height, 
          THREE.DoubleSide, fillerColor));
    
        // sides
        planes.push(buildSideFillter(
          edge.interiorStart(), edge.exteriorStart(), 
          wall.height, sideColor));
    
        planes.push(buildSideFillter(
          edge.interiorEnd(), edge.exteriorEnd(), 
          wall.height, sideColor));
      }
    
      // start, end have x and y attributes (i.e. corners)
      function makeWall(start, end, transform, invTransform, material) {
        v1 = toVec3(start);
        v2 = toVec3(end);
        v3 = v2.clone();
        v3.y = wall.height;
        v4 = v1.clone();
        v4.y = wall.height;
    
        var points = [v1.clone(), v2.clone(), v3.clone(), v4.clone()];
    
        utils.forEach(points, function(p) {
          p.applyMatrix4(transform);
        });
    
        var shape = new THREE.Shape(points);
    
        // add holes for each wall item
        utils.forEach(wall.items, function(item) {
          var pos = item.position.clone();
          pos.applyMatrix4(transform)
          var halfSize = item.halfSize;
          var min = halfSize.clone().multiplyScalar(-1);
          var max = halfSize.clone();
          min.add(pos);
          max.add(pos);
    
          var holePoints = [
            new THREE.Vector3(min.x, min.y, 0),
            new THREE.Vector3(max.x, min.y, 0),
            new THREE.Vector3(max.x, max.y, 0),
            new THREE.Vector3(min.x, max.y, 0)
          ];
    
          shape.holes.push(new THREE.Path(holePoints));
        });
    
        var geometry = new THREE.ShapeGeometry(shape);
    
        utils.forEach(geometry.vertices, function(v) {
          v.applyMatrix4(invTransform);
        });
    
        // make UVs
        var totalDistance = utils.distance(v1.x, v1.z, v2.x, v2.z);
        var height = wall.height;
        geometry.faceVertexUvs[0] = [];
    
        function vertexToUv(vertex) {
          var x = utils.distance(v1.x, v1.z, vertex.x, vertex.z) / totalDistance;
          var y = vertex.y / height;
          return new THREE.Vector2(x, y);
        }
    
        utils.forEach(geometry.faces, function(face) {
          var vertA = geometry.vertices[face.a];
          var vertB = geometry.vertices[face.b];
          var vertC = geometry.vertices[face.c];
          geometry.faceVertexUvs[0].push([
              vertexToUv(vertA),
              vertexToUv(vertB),
              vertexToUv(vertC)]);      
        });
    
        geometry.faceVertexUvs[1] = geometry.faceVertexUvs[0];
    
        geometry.computeFaceNormals();
        geometry.computeVertexNormals();
    
        var mesh = new THREE.Mesh(
            geometry,
            material);
    
        return mesh;
      }
    
      function buildSideFillter(p1, p2, height, color) {
        var points = [
          toVec3(p1),
          toVec3(p2),
          toVec3(p2, height),
          toVec3(p1, height)
        ];
    
        var geometry = new THREE.Geometry(); 
        utils.forEach(points, function(p){
          geometry.vertices.push(p);
        });
        geometry.faces.push(new THREE.Face3(0, 1, 2));
        geometry.faces.push(new THREE.Face3(0, 2, 3));
    
        var fillerMaterial = new THREE.MeshBasicMaterial({
          color: color,
          side: THREE.DoubleSide
        });  
    
        var filler = new THREE.Mesh(geometry, fillerMaterial);
        return filler;
      }
    
      function buildFiller(edge, height, side, color) {
        var points = [
          toVec2(edge.exteriorStart()),
          toVec2(edge.exteriorEnd()),
          toVec2(edge.interiorEnd()),
          toVec2(edge.interiorStart())
        ];
    
        var fillerMaterial = new THREE.MeshBasicMaterial({
          color: color,
          side: side
        });  
    
        var shape = new THREE.Shape(points);
        var geometry = new THREE.ShapeGeometry(shape);
    
        var filler = new THREE.Mesh(geometry, fillerMaterial);
        filler.rotation.set(Math.PI/2, 0, 0);
        filler.position.y = height;
        return filler;
      }
    
      function toVec2(pos) {
        return new THREE.Vector2(pos.x, pos.y);
      }
    
      function toVec3(pos, height) {
        height = height || 0;
        return new THREE.Vector3(pos.x, height, pos.y);
      }
    
      init();
    }
    
    module.exports = ThreeEdge;
    
    },{"../utils/utils":29,"three":2}],23:[function(require,module,exports){
    var THREE = require('three')
    var utils = require('../utils/utils')
    
    var ThreeFloor = function(scene, room) {
    
      var scope = this;
      
      this.room = room;
      var scene = scene;
    
      var floorPlane = null;
      var roofPlane = null;
    
      init();
    
      function init() {
        scope.room.fireOnFloorChange(redraw);
        floorPlane = buildFloor();
        // roofs look weird, so commented out
        //roofPlane = buildRoof();
      }
      
      function redraw() {
        scope.removeFromScene();
        floorPlane = buildFloor();
        scope.addToScene();
      }
    
      function buildFloor() {
        var textureSettings = scope.room.getTexture();
        // setup texture
        var floorTexture = THREE.ImageUtils.loadTexture(textureSettings.url);
        floorTexture.wrapS = THREE.RepeatWrapping;
        floorTexture.wrapT = THREE.RepeatWrapping;
        floorTexture.repeat.set(1, 1);
        var floorMaterialTop = new THREE.MeshPhongMaterial({ 
          map: floorTexture, 
          side: THREE.DoubleSide,
          ambient: 0xffffff,
          color: 0xcccccc,
          specular: 0x0a0a0a
        });
    
        var textureScale = textureSettings.scale;
        // http://stackoverflow.com/questions/19182298/how-to-texture-a-three-js-mesh-created-with-shapegeometry
        // scale down coords to fit 0 -> 1, then rescale
    
        var points = [];
        utils.forEach( scope.room.interiorCorners, function(corner) {
            points.push(new THREE.Vector2(
              corner.x / textureScale, 
              corner.y / textureScale));
        });
        var shape = new THREE.Shape( points );
    
        var geometry = new THREE.ShapeGeometry( shape );
    
        var floor = new THREE.Mesh(geometry, floorMaterialTop);
    
        floor.rotation.set(Math.PI/2, 0, 0);
        floor.scale.set(textureScale, textureScale, textureScale);
        floor.receiveShadow = true;
        floor.castShadow = false;
        return floor;
      }
    
      function buildRoof() {
        // setup texture
        var roofMaterial = new THREE.MeshBasicMaterial({ 
          side: THREE.FrontSide,
          color: 0xe5e5e5
        });
    
        var points = [];
        utils.forEach( scope.room.interiorCorners, function(corner) {
            points.push(new THREE.Vector2(
              corner.x, 
              corner.y));
        });
        var shape = new THREE.Shape( points );
        var geometry = new THREE.ShapeGeometry( shape );
        var roof = new THREE.Mesh(geometry, roofMaterial);
    
        roof.rotation.set(Math.PI/2, 0, 0);
        roof.position.y = 250;
        return roof;  
      }
    
      this.addToScene = function() {
        scene.add(floorPlane);
        //scene.add(roofPlane);
        // hack so we can do intersect testing
        scene.add(room.floorPlane);
      }
    
      this.removeFromScene = function() {
        scene.remove(floorPlane);
        //scene.remove(roofPlane);
        scene.remove(room.floorPlane);
      }
    }
    
    module.exports = ThreeFloor;
    
    },{"../utils/utils":29,"three":2}],24:[function(require,module,exports){
    var THREE = require('three')
    var ThreeFloor = require('./three_floor');
    var ThreeEdge = require('./three_edge');
    var utils = require('../utils/utils')
    
    // THREE.Scene, Blueprint.Floorplan
    ThreeFloorplan = function(scene, floorplan, controls) {
    
      var scope = this;
    
      this.scene = scene;
      this.floorplan = floorplan;
      this.controls = controls;
    
      this.floors = [];
      this.edges = [];
    
      floorplan.fireOnUpdatedRooms(redraw);
    
      function redraw() {
        // clear scene
        utils.forEach(scope.floors, function(floor) {
          floor.removeFromScene();
        });
        utils.forEach(scope.edges, function(edge) {
          edge.remove();
        });
        scope.floors = [];
        scope.edges = [];
    
        // draw floors
        utils.forEach(scope.floorplan.getRooms(), function(room) {
          var threeFloor = new ThreeFloor(scene, room);
          scope.floors.push(threeFloor);
          threeFloor.addToScene();
        });
    
        // draw edges
        utils.forEach(scope.floorplan.wallEdges(), function(edge) {
          var threeEdge = new ThreeEdge(
            scene, edge, scope.controls);
          scope.edges.push(threeEdge);
        });
      }
    
    }
    
    module.exports = ThreeFloorplan;
    
    },{"../utils/utils":29,"./three_edge":22,"./three_floor":23,"three":2}],25:[function(require,module,exports){
    /*
    * Drawings on "top" of the scene.
    * e.g. rotate arrows
    */
    var THREE = require('three');
    
    var utils = require('../utils/utils')
    
    var ThreeHUD = function(three) {
      var scope = this;
      var three = three;
      var scene = new THREE.Scene();
    
      var selectedItem = null;
    
      var rotating = false;
      var mouseover = false;
    
      var tolerance = 10;
      var height = 5;
      var distance = 20;
      var color = "#ffffff";
      var hoverColor = "#f1c40f";
    
      var activeObject = null;
    
      this.getScene = function() {
        return scene;
      }
    
      this.getObject = function() {
        return activeObject;
      }
    
      function init() {
        three.itemSelectedCallbacks.add(itemSelected);
        three.itemUnselectedCallbacks.add(itemUnselected);
      }
    
      function resetSelectedItem() {
        selectedItem = null;
        if (activeObject) {
          scene.remove(activeObject);
          activeObject = null;
        }
      }
    
      function itemSelected(item) {
        if (selectedItem != item) {
          resetSelectedItem();
          if (item.allowRotate && !item.fixed) {
            selectedItem = item;
            activeObject = makeObject(selectedItem);
            scene.add(activeObject);
          }
        }
      }
    
      function itemUnselected() {
        resetSelectedItem();
      }
    
      this.setRotating = function(isRotating) {
        rotating = isRotating;
        setColor();
      }
    
      this.setMouseover = function(isMousedOver) {
        mouseover = isMousedOver;
        setColor();
      }
    
      function setColor() {
        if (activeObject) {
          utils.forEach(activeObject.children, function(obj) {
            obj.material.color.set(getColor());
          });      
        }
        three.needsUpdate();
      }
    
      function getColor() {
        return (mouseover || rotating) ? hoverColor : color;
      }
    
      this.update = function() {
        if (activeObject) {
          activeObject.rotation.y = selectedItem.rotation.y;
          activeObject.position.x = selectedItem.position.x;
          activeObject.position.z = selectedItem.position.z;
        }
      }
    
      function makeLineGeometry(item) {
        var geometry = new THREE.Geometry();
    
        geometry.vertices.push(
          new THREE.Vector3(0, 0, 0),
          rotateVector(item)
        );
    
        return geometry;
      }
    
      function rotateVector(item) {
        var vec = new THREE.Vector3(0, 0, 
          Math.max(item.halfSize.x, item.halfSize.z) + 1.4 + distance);
        return vec;
      }
    
      function makeLineMaterial(rotating) {
        var mat = new THREE.LineBasicMaterial({ 
          color: getColor(), 
          linewidth: 3
        });
        return mat;
      }
    
      function makeCone(item) {
        var coneGeo = new THREE.CylinderGeometry(5, 0, 10);
        var coneMat = new THREE.MeshBasicMaterial({
          color: getColor()
        });
        var cone = new THREE.Mesh(coneGeo, coneMat);
        cone.position.copy(rotateVector(item));
    
        cone.rotation.x = -Math.PI / 2.0;
    
        return cone;
      }
    
      function makeSphere(item) {
        var geometry = new THREE.SphereGeometry(4, 16, 16); 
        var material = new THREE.MeshBasicMaterial({
          color: getColor()
        });
        var sphere = new THREE.Mesh(geometry, material); 
        return sphere;
      }
    
      function makeObject(item) {
        var object = new THREE.Object3D();
        var line = new THREE.Line(
          makeLineGeometry(item), 
          makeLineMaterial(scope.rotating),
          THREE.LinePieces);
    
        var cone = makeCone(item);
        var sphere = makeSphere(item);
    
        object.add(line);
        object.add(cone);
        object.add(sphere);
    
        object.rotation.y = item.rotation.y;
        object.position.x = item.position.x;
        object.position.z = item.position.z;
        object.position.y = height;
    
        return object;
      }
    
      init();
    }
    
    module.exports = ThreeHUD;
    
    },{"../utils/utils":29,"three":2}],26:[function(require,module,exports){
    var THREE = require('three');
    
    var ThreeLights = function(scene, floorplan) {
    
      var scope = this;
      var scene = scene;
      var floorplan = floorplan;
    
      var tol = 1;
      var height = 300; // TODO: share with Blueprint.Wall
    
      var dirLight;
    
      this.getDirLight = function() {
        return dirLight;
      }
    
      function init() {
        var light = new THREE.HemisphereLight( 0xffffff, 0x888888, 1.1 );
        light.position.set(0, height, 0);
        scene.add(light);
    
        dirLight = new THREE.DirectionalLight( 0xffffff, 0 );
        dirLight.color.setHSL( 1, 1, 0.1 );
    
        dirLight.castShadow = true;
    
        dirLight.shadowMapWidth = 1024;
        dirLight.shadowMapHeight = 1024;
    
        dirLight.shadowCameraFar = height + tol;
        dirLight.shadowBias = -0.0001;
        dirLight.shadowDarkness = 0.2;
        dirLight.visible = true;
        dirLight.shadowCameraVisible = false;
    
        scene.add(dirLight);
        scene.add(dirLight.target);
    
        floorplan.fireOnUpdatedRooms(updateShadowCamera);
      }
    
      function updateShadowCamera() {
    
        var size = floorplan.getSize();
        d = (Math.max(size.z, size.x) + tol) / 2.0;
    
        var center = floorplan.getCenter();
        var pos = new THREE.Vector3(
          center.x, height, center.z);
        dirLight.position.copy(pos);
        dirLight.target.position.copy(center);
        //dirLight.updateMatrix();
        //dirLight.updateWorldMatrix()
        dirLight.shadowCameraLeft = -d;
        dirLight.shadowCameraRight = d;
        dirLight.shadowCameraTop = d;
        dirLight.shadowCameraBottom = -d;
        // this is necessary for updates
        if (dirLight.shadowCamera) {
          dirLight.shadowCamera.left = dirLight.shadowCameraLeft;
          dirLight.shadowCamera.right = dirLight.shadowCameraRight;
          dirLight.shadowCamera.top = dirLight.shadowCameraTop;
          dirLight.shadowCamera.bottom = dirLight.shadowCameraBottom;
          dirLight.shadowCamera.updateProjectionMatrix();
        }
      }
    
      init();
    }
    
    module.exports = ThreeLights;
    
    },{"three":2}],27:[function(require,module,exports){
    var THREE = require('three')
    var JQUERY = require('jquery');
    
    var ThreeController = require('./three_controller');
    var ThreeFloorplan = require('./three_floorplan');
    var ThreeLights = require('./three_lights');
   var ThreeSkybox = require('./three_skybox');
    var ThreeControls = require('./three_controls');
    //var ThreeCanvas = require('./three_canvas')
    var ThreeHUD = require('./three_hud.js')
    
    var ThreeMain = function(model, element, canvasElement, opts) {
      var scope = this;
    
      var options = {
        resize: true,
        pushHref: false,
        spin: true,
        spinSpeed: .00002,
        clickPan: true,
        canMoveFixedItems: false
      }
    
      // override with manually set options
      for (var opt in options) {
        if (options.hasOwnProperty(opt) && opts.hasOwnProperty(opt)) {
          options[opt] = opts[opt]
        }
      }
    
      var scene = model.scene;
    
      var model = model;
      this.element = JQUERY(element);
      var domElement;
    
      var camera;
      var renderer;
      this.controls;
      var canvas;
      var controller;
      var floorplan;
    
      //var canvas;
      //var canvasElement = canvasElement;
    
      var needsUpdate = false;
    
      var lastRender = Date.now();
      var mouseOver = false;
      var hasClicked = false;
    
      var hud;
    
      this.heightMargin;
      this.widthMargin;
      this.elementHeight;
      this.elementWidth;
    
      this.itemSelectedCallbacks = JQUERY.Callbacks(); // item
      this.itemUnselectedCallbacks = JQUERY.Callbacks(); 
    
      this.wallClicked = JQUERY.Callbacks(); // wall
      this.floorClicked = JQUERY.Callbacks(); // floor
      this.nothingClicked = JQUERY.Callbacks();
      
      function init() {
        THREE.ImageUtils.crossOrigin = "";
    
        domElement = scope.element.get(0) // Container
        camera = new THREE.PerspectiveCamera(45, 1, 1, 10000);
        renderer = new THREE.WebGLRenderer({
          antialias: true,
          preserveDrawingBuffer: true // required to support .toDataURL()
        });
        renderer.autoClear = false,
        renderer.shadowMapEnabled = true;
        renderer.shadowMapSoft = true;
        renderer.shadowMapType = THREE.PCFSoftShadowMap;
    
        var skybox = new ThreeIblSkybox(scene);// Skybox(scene)
        // var skybox = new ThreeSkybox(scene);
    
        scope.controls = new ThreeControls(camera, domElement);
    
        hud = new ThreeHUD(scope);
    
        controller = new ThreeController(
          scope, model, camera, scope.element, scope.controls, hud);
    
        domElement.appendChild(renderer.domElement);
    
        // handle window resizing
        scope.updateWindowSize();
        if (options.resize) {
          JQUERY(window).resize(scope.updateWindowSize);
        }
        
        // setup camera nicely
        scope.centerCamera();
        model.floorplan.fireOnUpdatedRooms(scope.centerCamera);
    
        var lights = new ThreeLights(scene, model.floorplan);
    
        floorplan = new ThreeFloorplan(scene, 
          model.floorplan, scope.controls);
    
        animate();
    
        scope.element.mouseenter(function() {
          mouseOver = true;
        }).mouseleave(function() {
          mouseOver = false;
        }).click(function() {
          hasClicked = true;
        });
    
        //canvas = new ThreeCanvas(canvasElement, scope);
      }
    
      function spin() {
        if (options.spin && !mouseOver && !hasClicked) {
          var theta = 2 * Math.PI * options.spinSpeed * (Date.now() - lastRender);
          scope.controls.rotateLeft(theta);
          scope.controls.update()
        }
      }
    
      this.dataUrl = function() {
        var dataUrl = renderer.domElement.toDataURL("image/png");
        return dataUrl;
      }
    
      this.stopSpin = function() {
        hasClicked = true;
      }
    
      this.options = function() {
        return options;
      }
    
      this.getModel = function() {
        return model;
      }
    
      this.getScene = function() {
        return scene;
      }
    
      this.getController = function() {
        return controller;
      }
    
      this.getCamera = function() {
        return camera;
      }
    
      this.needsUpdate = function() {
        needsUpdate = true;
    
      }
      function shouldRender() {
        // Do we need to draw a new frame
        if (scope.controls.needsUpdate || controller.needsUpdate || needsUpdate || model.scene.needsUpdate) {
          scope.controls.needsUpdate = false;
          controller.needsUpdate = false;
          needsUpdate = false;
          model.scene.needsUpdate = false;
          return true;
        } else {
          return false;
        }
      }
    
      function render() {
        spin();
        if (shouldRender()) {
          renderer.clear();
          renderer.render(scene.getScene(), camera);
          renderer.clearDepth();
          renderer.render(hud.getScene(), camera); 
        }
        lastRender = Date.now();
      };
    
      function animate() {
        var delay = 50;
        setTimeout(function() { 
          requestAnimationFrame(animate);
          }, delay);
        render();
      };
    
      this.rotatePressed = function() {
        controller.rotatePressed();
      }
    
      this.rotateReleased = function() {
        controller.rotateReleased();
      }
    
      this.setCursorStyle = function(cursorStyle) {
        domElement.style.cursor = cursorStyle;
      };
    
      this.updateWindowSize = function() {
        scope.heightMargin = scope.element.offset().top;
        scope.widthMargin = scope.element.offset().left;
    
        scope.elementWidth = scope.element.innerWidth();
        if (options.resize) {
          scope.elementHeight = window.innerHeight - scope.heightMargin;
        } else {
          scope.elementHeight = scope.element.innerHeight();
        }
    
        camera.aspect = scope.elementWidth / scope.elementHeight;
        camera.updateProjectionMatrix();
    
        renderer.setSize(scope.elementWidth, scope.elementHeight);
        needsUpdate = true;
      }
    
      this.centerCamera = function() {
        var yOffset = 150.0;
    
        var pan = model.floorplan.getCenter();
        pan.y = yOffset;
    
        scope.controls.target = pan;
    
        var distance = model.floorplan.getSize().z * 1.5;
    
        var offset = pan.clone().add(
          new THREE.Vector3(0, distance, distance));
        //scope.controls.setOffset(offset);
        camera.position.copy(offset);
    
        scope.controls.update();
      }
    
      // projects the object's center point into x,y screen coords
      // x,y are relative to top left corner of viewer
      this.projectVector = function(vec3, ignoreMargin) {
        ignoreMargin = ignoreMargin || false;
    
        var widthHalf = scope.elementWidth / 2;
        var heightHalf = scope.elementHeight / 2;
    
        var vector = new THREE.Vector3();
        vector.copy(vec3);
        vector.project(camera);
    
        var vec2 = new THREE.Vector2();
    
        vec2.x = ( vector.x * widthHalf ) + widthHalf;
        vec2.y = - ( vector.y * heightHalf ) + heightHalf;
    
        if (!ignoreMargin) {
           vec2.x += scope.widthMargin;
           vec2.y += scope.heightMargin;
        }
    
        return vec2;
      }
    
      init();
    }
    
    module.exports = ThreeMain;
    
    },{"./three_controller":20,"./three_controls":21,"./three_floorplan":24,"./three_hud.js":25,"./three_lights":26,"./three_skybox":28,"jquery":1,"three":2}],28:[function(require,module,exports){
    var THREE = require('three')

    ThreeIblSkybox = function (scene)
        {
            function LoadCube( src , onIblSkyboxLoaded)
            {
                var path = '/images/'
                var format = '.jpg';
                var urls = [
                    path + 'px' + format, path + 'nx' + format,
                    path + 'py' + format, path + 'ny' + format,
                    path + 'pz' + format, path + 'nz' + format
                ];

                var reflectionCube = THREE.ImageUtils.loadTextureCube( urls , false , onIblSkyboxLoaded);
                reflectionCube.format = THREE.RGBFormat;
                return reflectionCube;
            }

            var mesh;

            //var diffuseAmbientCube = LoadCube( "data/IBL/Grace/Irradiance/" );
            //var glossLowReflectionCube = LoadCube( "data/IBL/Grace/LowGloss/" );
            //var glossMidReflectionCube = LoadCube( "data/IBL/Grace/MidGloss/" );
            //var glossHighReflectionCube = LoadCube( "data/IBL/Grace/HighGloss/" );

            // Skybox
            var shader = THREE.ShaderLib[ "cube" ];
            shader.uniforms[ "tCube" ].value = LoadCube( "data/IBL/Grace/LowGloss/" );
            var material = new THREE.ShaderMaterial(
                {
                    fragmentShader: shader.fragmentShader,
                    vertexShader: shader.vertexShader,
                    uniforms: shader.uniforms,
                    depthWrite: false,
                    side: THREE.BackSide
                } ),
                mesh = new THREE.Mesh( new THREE.CubeGeometry( 3000, 3000, 3000), material );
            scene.add( mesh );
        }
    
    ThreeSkybox = function(scene) {
    
      var scope = this;
    
      var scene = scene;
    
      var topColor = 0xD8ECF9;//0xfffff
      var bottomColor = 0x565e63; //0xe9e9e9;//0xf9f9f9
      var verticalOffset = 500
      var sphereRadius = 4000
      var widthSegments = 32
      var heightSegments = 15
    
      var vertexShader = [
        "varying vec3 vWorldPosition;",
        "void main() {",
        "  vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
        "  vWorldPosition = worldPosition.xyz;",
        "  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
        "}"
      ].join('\n');
    
      var fragmentShader = [
        "uniform vec3 topColor;",
        "uniform vec3 bottomColor;",
        "uniform float offset;",
        "varying vec3 vWorldPosition;",
        "void main() {",
        "  float h = normalize( vWorldPosition + offset ).y;",
        "  gl_FragColor = vec4( mix( bottomColor, topColor, (h + 1.0) / 2.0), 1.0 );",
        "}"
      ].join('\n');
    
      function init() {
    
        var uniforms = {
            topColor: { 
              type: "c", 
              value: new THREE.Color(topColor) 
            },
            bottomColor: { 
              type: "c", 
              value: new THREE.Color(bottomColor) 
            },
            offset: { 
              type: "f", 
              value: verticalOffset 
            }
        }
    
        var skyGeo = new THREE.SphereGeometry( 
          sphereRadius, widthSegments, heightSegments );
        var skyMat = new THREE.ShaderMaterial({ 
          vertexShader: vertexShader, 
          fragmentShader: fragmentShader, 
          uniforms: uniforms, 
          side: THREE.BackSide 
        });
    
        var sky = new THREE.Mesh(skyGeo, skyMat);
        scene.add(sky);
      }
    
      init();
    }
    
    module.exports = ThreeSkybox;
    
    },{"three":2}],29:[function(require,module,exports){
    var utils = {};
    
    utils.pointDistanceFromLine  = function( x, y, x1, y1, x2, y2 ) {
    
      var point = utils.closestPointOnLine(x, y, x1, y1, x2, y2);
        var dx = x - point.x;
        var dy = y - point.y;
        return Math.sqrt(dx * dx + dy * dy);
    }
    
    utils.closestPointOnLine = function(x, y, x1, y1, x2, y2) {
      // thanks, http://stackoverflow.com/a/6853926
      var A = x - x1;
      var B = y - y1;
      var C = x2 - x1;
      var D = y2 - y1;
    
      var dot = A * C + B * D;
      var len_sq = C * C + D * D;
      var param = dot / len_sq;
    
      var xx, yy;
    
      if (param < 0 || (x1 == x2 && y1 == y2)) {
        xx = x1;
        yy = y1;
      } else if (param > 1) {
        xx = x2;
        yy = y2;
      } else {
        xx = x1 + param * C;
        yy = y1 + param * D;
      }
    
      return {
        x: xx,
        y: yy
      }
    }
    
    utils.distance = function( x1, y1, x2, y2 ) {
        return Math.sqrt(
            Math.pow(x2 - x1, 2) + 
            Math.pow(y2 - y1, 2));
    }
    
    // angle between 0,0->x1,y1 and 0,0->x2,y2 (-pi to pi)
    utils.angle = function( x1, y1, x2, y2 ) {
        var dot = x1 * x2 + y1 * y2;
        var det = x1 * y2 - y1 * x2;
        var angle = -Math.atan2( det, dot );
        return angle;
    }
    
    // shifts angle to be 0 to 2pi
    utils.angle2pi = function( x1, y1, x2, y2 ) {
        var theta = utils.angle(x1, y1, x2, y2);
        if (theta < 0) {
            theta += 2*Math.PI;
        }
        return theta;
    }
    
    // points is array of points with x,y attributes
    utils.isClockwise = function( points ) {
        // make positive
        subX = Math.min(0, Math.min.apply(null, utils.map(points, function(p) {
          return p.x;
        })))
        subY = Math.min(0, Math.min.apply(null, utils.map(points, function(p) {
          return p.x;
        })))
        var newPoints = utils.map(points, function(p) {
          return {
            x: p.x - subX,
            y: p.y - subY
          }
        })
    
        // determine CW/CCW, based on:
        // http://stackoverflow.com/questions/1165647
        var sum = 0;
        for ( var i = 0; i < newPoints.length; i++ ) {
            var c1 = newPoints[i];
            if (i == newPoints.length-1) {
                var c2 = newPoints[0]
            } else {
                var c2 = newPoints[i+1];
            }
            sum += (c2.x - c1.x) * (c2.y + c1.y);
        }
        return (sum >= 0);
    }
    
    
    utils.guid = (function() {
      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
                   .toString(16)
                   .substring(1);
      }
      return function() {
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
               s4() + '-' + s4() + s4() + s4();
      };
    })();
    
    // both arguments are arrays of corners with x,y attributes
    utils.polygonPolygonIntersect = function(firstCorners, secondCorners) {
        for (var i = 0; i < firstCorners.length; i++) {
            var firstCorner = firstCorners[i],
                secondCorner;
            if (i == firstCorners.length-1) {
                secondCorner = firstCorners[0];
            } else {
                secondCorner = firstCorners[i+1];
            }
    
            if (utils.linePolygonIntersect(
                firstCorner.x, firstCorner.y,
                secondCorner.x, secondCorner.y,
                secondCorners)) {
                return true;
            }
        }
        return false;
    }
    
    // corners is an array of points with x,y attributes
    utils.linePolygonIntersect = function(x1,y1,x2,y2,corners) {
    
        for (var i = 0; i < corners.length; i++) {
            var firstCorner = corners[i],
                secondCorner;
            if (i == corners.length-1) {
                secondCorner = corners[0];
            } else {
                secondCorner = corners[i+1];
            }
    
            if (utils.lineLineIntersect(x1,y1,x2,y2,
                firstCorner.x, firstCorner.y,
                secondCorner.x, secondCorner.y)) {
                return true;
            }
        }
        return false;
    }
    
    utils.lineLineIntersect = function(x1,y1,x2,y2, x3,y3,x4,y4) {
        function CCW(p1, p2, p3) {
            var a = p1.x,
                b = p1.y,
                c = p2.x,
                d = p2.y,
                e = p3.x,
                f = p3.y;
            return (f - b) * (c - a) > (d - b) * (e - a);
        }
    
        var p1 = {x:x1, y:y1},
            p2 = {x:x2, y:y2},
            p3 = {x:x3, y:y3},
            p4 = {x:x4, y:y4};
        return (CCW(p1, p3, p4) != CCW(p2, p3, p4)) && (CCW(p1, p2, p3) != CCW(p1, p2, p4));
    }
    
    
    // corners is an array of points with x,y attributes
    // startX and startY are start coords for raycast
    utils.pointInPolygon = function(x,y,corners,startX,startY) {
        startX = startX || 0;
        startY = startY || 0;
    
        var intersects = 0;
        for (var i = 0; i < corners.length; i++) {
            var firstCorner = corners[i],
                secondCorner;
            if (i == corners.length-1) {
                secondCorner = corners[0];
            } else {
                secondCorner = corners[i+1];
            }
    
            if (utils.lineLineIntersect(startX,startY,x,y,
                firstCorner.x, firstCorner.y,
                secondCorner.x, secondCorner.y)) {
                intersects++;
            }
        }
        // odd intersections means the point is in the polygon
        //console.log("intersects: " + intersects);
    
        return ((intersects%2) == 1);
    }
    
    // checks if all corners of insideCorners are inside the polygon described by outsideCorners
    utils.polygonInsidePolygon = function(insideCorners, outsideCorners, startX, startY) {
        startX = startX || 0;
        startY = startY || 0;
    
        //console.log("checking polygon in polygon");
        utils.forEach( outsideCorners, function(c) { console.log(c.x + ", " + c.y)});
    
        for (var i = 0; i < insideCorners.length; i++) {
            //console.log("checking point: " + insideCorners[i].x + ", " + insideCorners[i].y);
    
            if (!utils.pointInPolygon(
                insideCorners[i].x, insideCorners[i].y,
                outsideCorners,
                startX, startY)) {
                return false;
            }
        }
        return true;
    }
    
    // checks if any corners of firstCorners is inside the polygon described by secondCorners
    utils.polygonOutsidePolygon = function(insideCorners, outsideCorners, startX, startY) {
        startX = startX || 0;
        startY = startY || 0;
    
        for (var i = 0; i < insideCorners.length; i++) {
            if (utils.pointInPolygon(
                insideCorners[i].x, insideCorners[i].y,
                outsideCorners,
                startX, startY)) {
                return false;
            }
        }
        return true;
    }
    
    
    // arrays
    
    utils.forEach = function(array, action) {
      for (var i = 0; i < array.length; i++) {
        action(array[i]);
      }
    }
    
    utils.forEachIndexed = function(array, action) {
      for (var i = 0; i < array.length; i++) {
        action(i, array[i]);
      }
    }
    
    utils.map = function(array, func) {
      var result = [];
      utils.forEach(array, function (element) {
        result.push(func(element));
      });
      return result;
    }
    
    // remove elements in array if func(element) returns true
    utils.removeIf  = function(array, func) {
      var result = [];
        utils.forEach(array, function (element) {
        if (!func(element)) {
          result.push(element);
        }
      });
      return result;
    }
    
    // shift the items in an array by shift (positive integer)
    utils.cycle = function(arr, shift) {
      var ret = arr.slice(0);
      for (var i = 0; i < shift; i++) {
        var tmp = ret.shift();
        ret.push(tmp);
      }
      return ret;
    }
    
    // returns in the unique elemnts in arr
    utils.unique = function(arr, hashFunc) {
      var results = [];
      var map = {};
        for (var i = 0; i < arr.length; i++) {
          if (!map.hasOwnProperty(arr[i])) {
            results.push(arr[i]);
            map[hashFunc(arr[i])] = true;
          }
        }
        return results; 
    }
    
    utils.removeValue = function(arr, value) {
      for(var i = arr.length - 1; i >= 0; i--) {
        if(arr[i] === value) {
           arr.splice(i, 1);
        }
      }
    }
    
    // checks if value is in array
    utils.hasValue = function(array, value) {
      for (var i = 0; i < array.length; i++) {
        if (array[i] === value) {
          return true;
        }
      }
      return false;
    }
    
    // subtracts the elements in subArray from array
    utils.subtract = function(array, subArray) {
      return utils.removeIf(array, function(el) {
        return utils.hasValue(subArray, el);
      });
    }
    
    
    
    module.exports = utils;
    
    },{}]},{},[3]);
    